<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>个人项目总结</title>
    <link href="/blog/2023/04/22/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <url>/blog/2023/04/22/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>黄金矿工怀旧版</p><p>坦克大战</p><p>网络通讯平台</p><p>餐厅点餐服务</p><p>房屋出租系统</p><p>零钱通服务</p>]]></content>
    
    
    <categories>
      
      <category>Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>经验</tag>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冲刺蓝桥杯</title>
    <link href="/blog/2023/04/14/%E5%86%B2%E5%88%BA%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    <url>/blog/2023/04/14/%E5%86%B2%E5%88%BA%E8%93%9D%E6%A1%A5%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="认识数据结构和算法"><a href="#认识数据结构和算法" class="headerlink" title="认识数据结构和算法"></a>认识数据结构和算法</h1><ul><li><h4 id="数据结构：数据存储的方式-数组，字符串，树，堆，栈，队列，哈希表"><a href="#数据结构：数据存储的方式-数组，字符串，树，堆，栈，队列，哈希表" class="headerlink" title="数据结构：数据存储的方式    数组，字符串，树，堆，栈，队列，哈希表"></a>数据结构：数据存储的方式    数组，字符串，树，堆，栈，队列，哈希表</h4></li><li><h4 id="算法：数据计算的方式枚举遍历，排序，二分查找，递归，回溯"><a href="#算法：数据计算的方式枚举遍历，排序，二分查找，递归，回溯" class="headerlink" title="算法：数据计算的方式枚举遍历，排序，二分查找，递归，回溯"></a>算法：数据计算的方式枚举遍历，排序，二分查找，递归，回溯</h4></li></ul><h1 id="算法题类型"><a href="#算法题类型" class="headerlink" title="算法题类型"></a>算法题类型</h1><ul><li><h4 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h4></li><li><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4></li><li><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4></li><li><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4></li><li><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4></li><li><h4 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4></li><li><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4></li><li><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4></li><li><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4></li><li><h4 id="树"><a href="#树" class="headerlink" title="树"></a>树</h4></li><li><h4 id="图与回溯算法"><a href="#图与回溯算法" class="headerlink" title="图与回溯算法"></a>图与回溯算法</h4></li><li><h4 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h4></li><li><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4></li></ul><h1 id="刷题顺序"><a href="#刷题顺序" class="headerlink" title="刷题顺序"></a>刷题顺序</h1><h4 id="第一轮：数学-gt-数组-gt-链表-gt-字符串-gt-哈希表-gt-双指针-gt-递归-gt-栈-gt-队列-难度简单-50"><a href="#第一轮：数学-gt-数组-gt-链表-gt-字符串-gt-哈希表-gt-双指针-gt-递归-gt-栈-gt-队列-难度简单-50" class="headerlink" title="第一轮：数学 -&gt; 数组 -&gt; 链表 -&gt; 字符串 -&gt; 哈希表 -&gt; 双指针 -&gt; 递归 -&gt; 栈 -&gt; 队列    难度简单    50%"></a>第一轮：数学 -&gt; 数组 -&gt; 链表 -&gt; 字符串 -&gt; 哈希表 -&gt; 双指针 -&gt; 递归 -&gt; 栈 -&gt; 队列    难度简单    50%</h4><h4 id="第二轮：数学-gt-数组-gt-链表-gt-字符串-gt-哈希表-gt-双指针-gt-递归-gt-栈-gt-队列-难度中等-50"><a href="#第二轮：数学-gt-数组-gt-链表-gt-字符串-gt-哈希表-gt-双指针-gt-递归-gt-栈-gt-队列-难度中等-50" class="headerlink" title="第二轮：数学 -&gt; 数组 -&gt; 链表 -&gt; 字符串 -&gt; 哈希表 -&gt; 双指针 -&gt; 递归 -&gt; 栈 -&gt; 队列    难度中等    50%"></a>第二轮：数学 -&gt; 数组 -&gt; 链表 -&gt; 字符串 -&gt; 哈希表 -&gt; 双指针 -&gt; 递归 -&gt; 栈 -&gt; 队列    难度中等    50%</h4><h4 id="第三轮：分治-贪心-动态规划-二叉搜索树-图-50"><a href="#第三轮：分治-贪心-动态规划-二叉搜索树-图-50" class="headerlink" title="第三轮：分治    贪心    动态规划    二叉搜索树    图    50%"></a>第三轮：分治    贪心    动态规划    二叉搜索树    图    50%</h4><h4 id="第四轮：难"><a href="#第四轮：难" class="headerlink" title="第四轮：难"></a>第四轮：难</h4><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客-刷题</title>
    <link href="/blog/2023/04/09/%E7%89%9B%E5%AE%A2-%E5%88%B7%E9%A2%98/"/>
    <url>/blog/2023/04/09/%E7%89%9B%E5%AE%A2-%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<ul><li><h5 id="都是刷题时看到的一些精彩的题解和Java基础知识，随手复制粘贴就扔这儿了哈哈哈"><a href="#都是刷题时看到的一些精彩的题解和Java基础知识，随手复制粘贴就扔这儿了哈哈哈" class="headerlink" title="都是刷题时看到的一些精彩的题解和Java基础知识，随手复制粘贴就扔这儿了哈哈哈"></a>都是刷题时看到的一些精彩的题解和Java基础知识，随手复制粘贴就扔这儿了哈哈哈</h5></li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">final</span>修饰的方法，不允许被子类覆盖。<br><span class="hljs-keyword">final</span>修饰的类，不能被继承。<br><span class="hljs-keyword">final</span>修饰的变量，不能改变值。<br><span class="hljs-keyword">final</span>修饰的引用类型，不能再指向别的东西，但是可以改变其中的内容。<br><span class="hljs-keyword">final</span>修饰的成员变量在赋值时可以有三种方式。<span class="hljs-number">1</span>、在声明时直接赋值。<span class="hljs-number">2</span>、在构造器中赋值。<span class="hljs-number">3</span>、在初始代码块中进行赋值。<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">关于抽象类 <br>JDK <span class="hljs-number">1.8</span>以前，抽象类的方法默认访问权限为<span class="hljs-keyword">protected</span> <br>JDK <span class="hljs-number">1.8</span>时，抽象类的方法默认访问权限变为<span class="hljs-keyword">default</span> <br><br>关于接口 <br>JDK <span class="hljs-number">1.8</span>以前，接口中的方法必须是<span class="hljs-keyword">public</span>的 <br>JDK <span class="hljs-number">1.8</span>时，接口中的方法可以是<span class="hljs-keyword">public</span>的，也可以是<span class="hljs-keyword">default</span>的 <br>JDK <span class="hljs-number">1.9</span>时，接口中的方法可以是<span class="hljs-keyword">private</span>的<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">写法顺序：<span class="hljs-keyword">select</span>--<span class="hljs-keyword">from</span>--<span class="hljs-keyword">where</span>--<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>--<span class="hljs-keyword">having</span>--<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <br><br>执行顺序：<span class="hljs-keyword">from</span>--<span class="hljs-keyword">where</span>--<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>--<span class="hljs-keyword">having</span>--<span class="hljs-keyword">select</span>--<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <br>就是<span class="hljs-keyword">select</span>要放后面，如果有<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>，则<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>放最后，因为<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 是对结果进行排序<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">可串行化调度：所有的事物依次逐个执行，这样事物之间就完全不可能有干扰，防止脏读、不可重复读、幻读。<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">客户端对象:Socket s = new <span class="hljs-built_in">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">6666</span>); <br>服务端对象:ServerSocket ss = new <span class="hljs-built_in">ServerSocket</span>(<span class="hljs-number">6666</span>); <br>监听服务器的连接: <br>    s=ss.<span class="hljs-built_in">accept</span>()<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">s</span>.getBytes(<span class="hljs-string">&quot;GBK&quot;</span>).length就是求的字节数。如果是GBK，一个中文字符占<span class="hljs-number">2</span>字节，如果是UTF-<span class="hljs-number">8</span>则是<span class="hljs-number">3</span>个字节，<br></code></pre></td></tr></table></figure><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ocaml"><span class="hljs-type">Java</span>一维数组有两种初始化方法 <br><span class="hljs-number">1</span>、静态初始化 <br><span class="hljs-built_in">int</span> <span class="hljs-built_in">array</span><span class="hljs-literal">[]</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>或者<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">array</span><span class="hljs-literal">[]</span> = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>需要注意的是，写成如下形式也是错误的<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">array</span><span class="hljs-literal">[]</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">5</span>]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br><span class="hljs-number">2</span>、动态初始化 <br><span class="hljs-built_in">int</span> <span class="hljs-built_in">array</span><span class="hljs-literal">[]</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">5</span>];<br><span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">array</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">array</span>[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">array</span>[<span class="hljs-number">3</span>] = <span class="hljs-number">4</span>;<br><span class="hljs-built_in">array</span>[<span class="hljs-number">4</span>] = <span class="hljs-number">5</span>;<br>静态与动态初始化的区别就在于，前者是声明的时候就初始化，后者是先声明，再动态初始化<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">小到大算自动类型转换<br>就是隐式转换（自动类型转换）：<br>数值型数据的转换：<span class="hljs-type">byte</span>→<span class="hljs-type">short</span>→<span class="hljs-type">int</span>→<span class="hljs-type">long</span>→<span class="hljs-type">float</span>→<span class="hljs-type">double</span>。<br>字符型转换为整型：<span class="hljs-type">char</span>→<span class="hljs-type">int</span>。<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">Java一个源程序只能有一个<span class="hljs-keyword">public</span>类存在，且类名与文件名相同。Java程序是从main方法开始执行的，<span class="hljs-keyword">public</span>为类加载器提供入口，然后找到<span class="hljs-keyword">public</span>类中的main方法开始执行。如果存在多个<span class="hljs-keyword">public</span>类，程序将不知道该从哪里执行。<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">ava分为基本数据据类型和引用数据类型，基本数据类型又分为数值型（整数类型（<span class="hljs-keyword">byte</span>、<span class="hljs-keyword">short</span>、<span class="hljs-keyword">int</span>、<span class="hljs-keyword">long</span>）和浮点型（<span class="hljs-keyword">float</span>、<span class="hljs-keyword">double</span>））、字符型（<span class="hljs-keyword">char</span>）和布尔型（<span class="hljs-keyword">boolean</span>），引用数据类型包括类（<span class="hljs-keyword">class</span>）、接口（<span class="hljs-keyword">interface</span>）、数组和一些特殊的<span class="hljs-keyword">null</span>类型。<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">JDK</span>=JRE+编译、运行等命令工具<br>      <span class="hljs-attr">JRE</span>=JVM+Java系统类库<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Servlet</span>的生命周期分为<span class="hljs-number">5</span>个阶段：加载、创建、初始化、处理客户请求、卸载。 (<span class="hljs-number">1</span>)加载：容器通过类加载器使用servlet类对应的文件加载servlet (<span class="hljs-number">2</span>)创建：通过调用servlet构造函数创建一个servlet对象 (<span class="hljs-number">3</span>)初始化：调用init方法初始化 (<span class="hljs-number">4</span>)处理客户请求：每当有一个客户请求，容器会创建一个线程来处理客户请求 (<span class="hljs-number">5</span>)卸载：调用destroy方法让servlet自己释放其占用的资源<br></code></pre></td></tr></table></figure><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cos">Spring 框架是一个分层架构，由 <span class="hljs-number">7</span> 个定义良好的模块组成。 <br><br>核心容器，Spring上下文，Spring AOP， Spring DAO， Spring ORM， Spring Web， Spring <span class="hljs-keyword">MV</span><br></code></pre></td></tr></table></figure><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs delphi">方法重载（<span class="hljs-keyword">overload</span>）： <br><span class="hljs-number">1</span>.必须是同一个类 <br><span class="hljs-number">2</span>方法名（也可以叫函数）一样 <br><span class="hljs-number">3</span>参数类型不一样或参数数量不一样 <br><br>方法的重写（<span class="hljs-keyword">override</span>）两同两小一大原则： <br>方法名相同，参数类型相同 <br>子类返回类型小于等于父类方法返回类型， <br>子类抛出异常小于等于父类方法抛出异常， <br>子类访问权限大于等于父类方法访问权限<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Jdbc</span>六大步骤: <span class="hljs-number">1</span>.注册驱动 <span class="hljs-number">2</span>.获取连接 <span class="hljs-number">3</span>.创建语句对象 <span class="hljs-number">4</span>.执行sql <span class="hljs-number">5</span>.处理语句集 <span class="hljs-number">6</span>关闭连接<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">按照流是否直接与特定的地方（如磁盘、内存、设备等）相连，分为节点流和处理流两类。 <br>节点流：可以从或向一个特定的地方（节点）读写数据。如FileReader. <br>处理流：是对一个已存在的流的连接和封装，通过所封装的流的功能调用实现数据读写。如<span class="hljs-keyword">BufferedReader.处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。 </span><br><span class="hljs-keyword">JAVA常用的节点流： </span><br>文 件 FileInputStream FileOutputStrean FileReader FileWriter 文件进行处理的节点流。 <br>字符串 StringReader StringWriter 对字符串进行处理的节点流。 <br>数 组 <span class="hljs-keyword">ByteArrayInputStream </span><span class="hljs-keyword">ByteArrayOutputStreamCharArrayReader </span>CharArrayWriter 对数组进行处理的节点流（对应的不再是文件，而是内存中的一个数组）。 <br>管 道 PipedInputStream PipedOutputStream PipedReaderPipedWriter对管道进行处理的节点流。 <br>常用处理流（关闭处理流使用关闭里面的节点流） <br>缓冲流：<span class="hljs-keyword">BufferedInputStrean </span><span class="hljs-keyword">BufferedOutputStream </span><span class="hljs-keyword">BufferedReader </span><span class="hljs-keyword">BufferedWriter </span> 增加缓冲功能，避免频繁读写硬盘。 <br>转换流：InputStreamReader OutputStreamReader 实现字节流和字符流之间的转换。 <br>数据流 DataInputStream DataOutputStream  等-提供将基础数据类型写入到文件中，或者读取出来. <br>流的关闭顺序 <br>一般情况下是：先打开的后关闭，后打开的先关闭 <br>另一种情况：看依赖关系，如果流a依赖流<span class="hljs-keyword">b，应该先关闭流a，再关闭流b。例如，处理流a依赖节点流b，应该先关闭处理流a，再关闭节点流b </span><br>可以只关闭处理流，不用关闭节点流。处理流关闭的时候，会调用其处理的节点流的关闭方法。<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Integer对象的方法 <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-string">&quot;&quot;</span>)</span>;是将字符串类型转换为<span class="hljs-built_in">int</span>的基础数据类型 <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-string">&quot;&quot;</span>)</span>是将字符串类型数据转换为Integer对象 <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-built_in">int</span><span class="hljs-constructor">Value()</span>;是将Integer对象中的数据取出，返回一个基础数据类型<span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">在这里帮大家总结一下hashMap和hashtable方面的知识点吧： <span class="hljs-number">1.</span>  关于HashMap的一些说法： a)  HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。HashMap的底层结构是一个数组，数组中的每一项是一条链表。 b)  HashMap的实例有俩个参数影响其性能： “初始容量” 和 装填因子。 c)  HashMap实现不同步，线程不安全。  HashTable线程安全 d)  HashMap中的key-value都是存储在Entry中的。 e)  HashMap可以存<span class="hljs-literal">null</span>键和<span class="hljs-literal">null</span>值，不保证元素的顺序恒久不变，它的底层使用的是数组和链表，通过hashCode()方法和equals方法保证键的唯一性 f)  解决冲突主要有三种方法：定址法，拉链法，再散列法。HashMap是采用拉链法解决哈希冲突的。 注：链表法是将相同hash值的对象组成一个链表放在hash值对应的槽位；    用开放定址法解决冲突的做法是：当冲突发生时，使用某种探查(亦称探测)技术在散列表中形成一个探查(测)序列。沿此序列逐个单元地查找，直到找到给定的关键字，或者碰到一个开放的地址(即该地址单元为空)为止（若要插入，在探查到开放的地址，则可将待插入的新结点存人该地址单元）。   拉链法解决冲突的做法是： 将所有关键字为同义词的结点链接在同一个单链表中。若选定的散列表长度为m，则可将散列表定义为一个由m个头指针组成的指针数组T[<span class="hljs-number">0.</span>.m<span class="hljs-number">-1</span>]。凡是散列地址为i的结点，均插入到以T[i]为头指针的单链表中。T中各分量的初值均应为空指针。在拉链法中，装填因子α可以大于<span class="hljs-number">1</span>，但一般均取α≤<span class="hljs-number">1</span>。拉链法适合未规定元素的大小。     <span class="hljs-number">2.</span>  Hashtable和HashMap的区别： a)   继承不同。  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Hashtable</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">Dictionary</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Map</span> <span class="hljs-symbol">public</span> <span class="hljs-symbol">class</span> <span class="hljs-symbol">HashMap</span> <span class="hljs-symbol">extends</span>  <span class="hljs-symbol">AbstractMap</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Map</span> <span class="hljs-symbol">b</span>)  <span class="hljs-symbol">Hashtable</span>中的方法是同步的，而<span class="hljs-symbol">HashMap</span>中的方法在缺省情况下是非同步的。在多线程并发的环境下，可以直接使用<span class="hljs-symbol">Hashtable</span>，但是要使用<span class="hljs-symbol">HashMap</span>的话就要自己增加同步处理了。 <span class="hljs-symbol">c</span>)  <span class="hljs-symbol">Hashtable</span> 中， <span class="hljs-symbol">key</span> 和 <span class="hljs-symbol">value</span> 都不允许出现 <span class="hljs-symbol">null</span> 值。 在 <span class="hljs-symbol">HashMap</span> 中， <span class="hljs-symbol">null</span> 可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为 <span class="hljs-symbol">null</span> 。当 <span class="hljs-symbol">get</span>() 方法返回 <span class="hljs-symbol">null</span> 值时，即可以表示 <span class="hljs-symbol">HashMap</span> 中没有该键，也可以表示该键所对应的值为 <span class="hljs-symbol">null</span> 。因此，在 <span class="hljs-symbol">HashMap</span> 中不能由 <span class="hljs-symbol">get</span>() 方法来判断 <span class="hljs-symbol">HashMap</span> 中是否存在某个键， 而应该用 <span class="hljs-symbol">containsKey</span>() 方法来判断。 <span class="hljs-symbol">d</span>)  两个遍历方式的内部实现上不同。<span class="hljs-symbol">Hashtable</span>、<span class="hljs-symbol">HashMap</span>都使用了<span class="hljs-symbol">Iterator</span>。而由于历史原因，<span class="hljs-symbol">Hashtable</span>还使用了<span class="hljs-symbol">Enumeration</span>的方式。 <span class="hljs-symbol">e</span>)  哈希值的使用不同，<span class="hljs-symbol">HashTable</span>直接使用对象的<span class="hljs-symbol">hashCode</span>。而<span class="hljs-symbol">HashMap</span>重新计算<span class="hljs-symbol">hash</span>值。 <span class="hljs-symbol">f</span>)  <span class="hljs-symbol">Hashtable</span>和<span class="hljs-symbol">HashMap</span>它们两个内部实现方式的数组的初始大小和扩容的方式。<span class="hljs-symbol">HashTable</span>中<span class="hljs-symbol">hash</span>数组默认大小是<span class="hljs-symbol">11</span>，增加的方式是<span class="hljs-symbol">old</span>*<span class="hljs-symbol">2</span>+<span class="hljs-symbol">1</span>。<span class="hljs-symbol">HashMap</span>中<span class="hljs-symbol">hash</span>数组的默认大小是<span class="hljs-symbol">16</span>，而且一定是<span class="hljs-symbol">2</span>的指数。   注：  <span class="hljs-symbol">HashSet</span>子类依靠<span class="hljs-symbol">hashCode</span>()和<span class="hljs-symbol">equal</span>()方法来区分重复元素。      <span class="hljs-symbol">HashSet</span>内部使用<span class="hljs-symbol">Map</span>保存数据，即将<span class="hljs-symbol">HashSet</span>的数据作为<span class="hljs-symbol">Map</span>的<span class="hljs-symbol">key</span>值保存，这也是<span class="hljs-symbol">HashSet</span>中元素不能重复的原因。而<span class="hljs-symbol">Map</span>中保存<span class="hljs-symbol">key</span>值的,会去判断当前<span class="hljs-symbol">Map</span>中是否含有该<span class="hljs-symbol">Key</span>对象，内部是先通过<span class="hljs-symbol">key</span>的<span class="hljs-symbol">hashCode,</span>确定有相同的<span class="hljs-symbol">hashCode</span>之后，再通过<span class="hljs-symbol">equals</span>方法判断是否相同。<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">重写 要求两同两小一大原则， 方法名相同，参数类型相同，子类返回类型小于等于父类方法返回类型， 子类抛出异常小于等于父类方法抛出异常， 子类访问权限大于等于父类方法访问权限。［注意：这里的返回类型必须要在有继承关系的前提下比较］ <br>重载 方法名必须相同，参数类型必须不同，包括但不限于一项，参数数目，参数类型，参数顺序<br>再来说说这道题 <span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">B</span> 都是方法名和参数相同，是重写，但是返回类型没与父类返回类型有继承关系，错误 D 返回一个类错误 c的参数类型与父类不同，所以不是重写，可以理解为广义上的重载访问权限小于父类，都会显示错误<br>虽然题目没点明一定要重载或者重写，但是当你的方法名与参数类型与父类相同时，已经是重写了，这时候如果返回类型或者异常类型比父类大，或者访问权限比父类小都会编译错误<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">难道我们只能单纯的背java的那个类是线程安全的，那个类不是线程安全的么？<br>这和授人以鱼有何区别呢？难道就没有一种方法授人以渔？直接教我们如何去判断一个类是否是线程安全的？<br>java中的线程安全是什么：<br>就是线程同步的意思，就是当一个程序对一个线程安全的方法或者语句进行访问的时候，其他的不能再对他进行操作了，必须等到这次访问结束以后才能对这个线程安全的方法进行访问<br>什么叫线程安全：<br>如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。 <br>或者说:一个类或者程序所提供的接口对于线程来说是原子操作或者多个线程之间的切换不会导致该接口的执行结果存在二义性,也就是说我们不用考虑同步的问题。<br>线程安全问题都是由全局变量及静态变量引起的。<br>若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则就可能影响线程安全。<br>看过vector源码的同学就会知道他的许多操作都是加了<span class="hljs-keyword">synchronized</span>修饰的比如他的添加元素。(不知道<span class="hljs-keyword">synchronized</span>是什么意思的自行百度！)<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">只要是被子类重写的方法，不被<span class="hljs-keyword">super</span>调用都是调用子类方法<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">一旦在<span class="hljs-keyword">finally</span>块中使用了<span class="hljs-keyword">return</span>或<span class="hljs-keyword">throw</span>语句，将会导致<span class="hljs-keyword">try</span>块，<span class="hljs-keyword">catch</span>块中的<span class="hljs-keyword">return</span>，<span class="hljs-keyword">throw</span>语句失效<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">链接：https:<span class="hljs-regexp">//</span>www.nowcoder.com<span class="hljs-regexp">/questionTerminal/</span><span class="hljs-number">073</span>fe9f1e5c84a689bcdb9ea899d295e?<br>来源：牛客网<br><br>对于管道，有下面这几种类型：<br>①普通管道（PIPE）：通常有两种限制，一是单工，即只能单向传输；二是血缘，即常用于父子进程间（或有血缘关系的进程间）。<br>②流管道（s_pipe）：去除了上述的第一种限制，实现了双向传输。<br><br>③命名管道（name_pipe）：去除了上述的第二种限制，实现了无血缘关系的不同进程间通信。<br>显然，要求是对于不同的服务器之间的通信，是要要求全双工形式的，而管道只能是半双工，虽然可以双向，但是同一时间只能有一个方向传输，全双工和半双工的区别可以如下图示理解：<br></code></pre></td></tr></table></figure><p>链接：<a href="https://www.nowcoder.com/questionTerminal/073fe9f1e5c84a689bcdb9ea899d295e">https://www.nowcoder.com/questionTerminal/073fe9f1e5c84a689bcdb9ea899d295e</a>?<br>来源：牛客网<img src="https://uploadfiles.nowcoder.com/images/20180322/4846014_1521723853172_FF523AF3E7DA7B365BEA995386A30039" alt="img">**</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">is-<span class="hljs-keyword">a</span>:继承关系 has-<span class="hljs-keyword">a</span>:从属关系 like-<span class="hljs-keyword">a</span>:组合关系<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">链接：https:<span class="hljs-comment">//www.nowcoder.com/questionTerminal/049085c1e4204b20b6171a0c13dfbfe7?</span><br>来源：牛客网<br><br>java<span class="hljs-selector-class">.lang</span>.NullPoninterException：变量未被初始化、对象未赋值、对象为空（俗称的空指针异常）<br>java<span class="hljs-selector-class">.lang</span>.NumberFormatException：数据格式转换失败（integer的取值范围为：-<span class="hljs-number">128</span>~<span class="hljs-number">127</span>，超过范围都会访问false）<br>java<span class="hljs-selector-class">.lang</span>.RuntimeException：运行时异常<br>java<span class="hljs-selector-class">.lang</span>.ArrayindexOutOfBoundsException：数组下标越界<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gradle">链接：https:<span class="hljs-comment">//www.nowcoder.com/questionTerminal/22a7fd3328124530be8ced520a9eaceb?</span><br>来源：牛客网<br><br>接口是一种特殊的抽象类，先说明抽象类中的抽象方法，再说明接口<br><br>抽象类中的抽象方法(其前有 abstract1修饰)不能用 <span class="hljs-keyword">private</span>、 <span class="hljs-keyword">static</span>、 <span class="hljs-keyword">synchronized</span>、na<br>tive访回修饰符修饰。原因如下:<br><span class="hljs-number">1</span>. <span class="hljs-keyword">private</span><br>抽象方法没有方法体,是用来被继承的,所以不能用 <span class="hljs-keyword">private</span>修饰;<br><span class="hljs-number">2</span>.<span class="hljs-keyword">static</span><br><span class="hljs-keyword">static</span>修饰的方法可以通过类名来访间该方法(即该方法的方法体),抽象方法用sttic修饰没有意义;<br><span class="hljs-number">3</span>. <span class="hljs-keyword">synchronized</span><br>该关键字是为该方法加一个锁。而如果该关键字修饰的方法是 <span class="hljs-keyword">static</span>方法。则使用的锁就是<span class="hljs-keyword">class</span>变量的锁。如果是修饰类方法。则用<span class="hljs-keyword">this</span>变量锁。<br>但是抽象类不能实例化对象,因为该方法不是在该抽象类中实现的。是在其子类实现的。所以，锁应该归其子类所有。所以，抽象方法也就不能用 <span class="hljs-keyword">synchronized</span>关键字修饰了;<br><span class="hljs-number">3</span>. <span class="hljs-keyword">native</span><br><span class="hljs-keyword">native</span>这个东西本身就和 <span class="hljs-keyword">abstract</span>冲突,他们都是方法的声明,只是一个把方法实现移交给子类,另一个是移交给本地操作系统。如果同时出现,就相当于即把实现移交给子类,又把实现移交给本地操作系统,那到底谁来实现具体方法呢<br><br>终于说到了接口！<br>接口是一种特殊的抽象类,接口中的方法全部是抽象方法(但其前的 <span class="hljs-keyword">abstract</span>可以省略),所以抽象类中的抽象方法不能用的访间修饰符这里也不能用。同时额外说明一下protect关键词<br><span class="hljs-number">4</span>. protect<br><span class="hljs-keyword">protected</span>访同修饰符也不能使用,因为接口可以让所有的类去实现(非继承),不只是其子类,但是要用<span class="hljs-keyword">public</span>去修饰。接口可以去继承一个已有的接口。<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">我们一般使用thread都是<span class="hljs-keyword">new</span>一个线程，然后调用start方法启动，使用start方法才真正实现了多线程运行，thread线程有<span class="hljs-number">5</span>种状态，创建-就绪-运行-阻塞-死亡，我们的start方法呢就是就绪这一步，因为这个时候我们的线程并没有立即的执行，而是得等待，等到我们的cpu有空闲的时候，才会执行线程里面的run方法，等run方法执行完了，线程就结束了。 <br> <br>  直接使用thread执行run方***咋样呢？因为run方法是thread里面的一个普通的方法，所以我们直接调用run方法，这个时候它是会运行在我们的主线程中的，因为这个时候我们的程序中只有主线程一个线程，所以这样并没有做到多线程的这种目的。<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">volatile</span>关键字有两个作用：<br><span class="hljs-number">1.</span>并发环境可见性：<span class="hljs-keyword">volatile</span>修饰后的变量能够保证该变量在线程间的可见性，线程进行数据的读写操作时将绕开工作内存（CPU缓存）而直接跟主内存进行数据交互，即线程进行读操作时直接从主内存中读取，写操作时直接将修改后端变量刷新到主内存中，这样就能保证其他线程访问到的数据是最新数据<br><span class="hljs-number">2.</span>并发环境有序性：通过对<span class="hljs-keyword">volatile</span>变量采取内存屏障（Memory barrier）的方式来防止编译重排序和CPU指令重排序，具体方式是通过在操作<span class="hljs-keyword">volatile</span>变量的指令前后加入内存屏障，来实现happens-before关系，保证在多线程环境下的数据交互不会出现紊乱。<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">中间件位于操作系统之上，应用软件之下，而不是操作系统内核中<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;为带符号右移，右移后左边的空位被填充为符号位</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;为不带符号右移，右移后左边的空位被填充为0</span><br><br><br>没有&lt;&lt;&lt; 因为&lt;&lt;后右边总是补0<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">java,<span class="hljs-keyword">exe</span>是java虚拟机<br><br>javadoc.<span class="hljs-keyword">exe</span>用来制作java文档<br><br>jdb.<span class="hljs-keyword">exe</span>是java的调试器<br><br>javaprof,<span class="hljs-keyword">exe</span>是剖析工具<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Autowired</span><br>注入声明的SpringBean对象,根据一定的规则首先按照注入的类型去查找，如果没有找到安装注入的名称去匹配你要注入的属性名称，如果都没有找到启动项目时抛出异常，<span class="hljs-variable">@Autowired</span>(required = false) 表示没有找到注入对象时，不抛异常，注入null。<br><br><br><span class="hljs-variable">@Primary</span><br>如果有多个相同类型的SpringBean,我们可以使用<span class="hljs-variable">@Primary</span>注解,优先注入带该注解标识的类,<span class="hljs-variable">@Primary</span>可以在多个类上标注，那就会抛异常。<br><span class="hljs-variable">@Quelifier</span><br>使用SpringBean的名称(SpringBean的名称都是唯一的)进行注入<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">序列化：将数据结构转换称为二进制数据流或者文本流的过程。序列化后的数据方便在网络上传输和在硬盘上存储。<br>反序列化：与序列化相反，是将二进制数据流或者文本流转换称为易于处理和阅读的数据结构的过程。<br><br>本质其实还是一种协议，一种数据格式，方便数据的存储和传输。<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span>和<span class="hljs-type">int</span>之间，用==比较，肯定为<span class="hljs-keyword">true</span>。基本数据类型没有equals方法<br><span class="hljs-type">int</span>和<span class="hljs-type">Integer</span>比较，<span class="hljs-type">Integer</span>会自动拆箱，== 和 equals都肯定为<span class="hljs-keyword">true</span><br><span class="hljs-type">int</span>和<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>比较，<span class="hljs-type">Integer</span>会自动拆箱，调用intValue方法, 所以 == 和 equals都肯定为<span class="hljs-keyword">true</span><br><span class="hljs-type">Integer</span>和<span class="hljs-type">Integer</span>比较的时候，由于直接赋值的话会进行自动的装箱。所以当值在[<span class="hljs-number">-128</span>,<span class="hljs-number">127</span>]中的时候，由于值缓存在IntegerCache中，那么当赋值在这个区间的时候，不会创建新的<span class="hljs-type">Integer</span>对象，而是直接从缓存中获取已经创建好的<span class="hljs-type">Integer</span>对象。而当大于这个区间的时候，会直接<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>。<br>当<span class="hljs-type">Integer</span>和<span class="hljs-type">Integer</span>进行==比较的时候，在[<span class="hljs-number">-128</span>,<span class="hljs-number">127</span>]区间的时候，为<span class="hljs-keyword">true</span>。不在这个区间，则为<span class="hljs-keyword">false</span><br>当<span class="hljs-type">Integer</span>和<span class="hljs-type">Integer</span>进行equals比较的时候，由于<span class="hljs-type">Integer</span>的equals方法进行了重写，比较的是内容，所以为<span class="hljs-keyword">true</span><br><br><span class="hljs-type">Integer</span>和<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span> ： <span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>会创建对象，存储在堆中。而<span class="hljs-type">Integer</span>在[<span class="hljs-number">-128</span>,<span class="hljs-number">127</span>]中，从缓存中取，否则会<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>.<br>所以 <span class="hljs-type">Integer</span>和<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span> 进行==比较的话，肯定为<span class="hljs-keyword">false</span> ; <span class="hljs-type">Integer</span>和<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span> 进行equals比较的话，肯定为<span class="hljs-keyword">true</span><br><br><span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>和<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>进行==比较的时候，肯定为<span class="hljs-keyword">false</span> ; 进行equals比较的时候，肯定为<span class="hljs-keyword">true</span><br>原因是<span class="hljs-built_in">new</span>的时候，会在堆中创建对象，分配的地址不同，==比较的是内存地址，所以肯定不同<br><br>装箱过程是通过调用包装器的valueOf方法实现的<br>拆箱过程是通过调用包装器的xxxValue方法实现的（xxx表示对应的基本数据类型）<br><br>总结：Byte、Short、<span class="hljs-type">Integer</span>、Long这几个类的valueOf方法实现类似的。所以在[<span class="hljs-number">-128</span>,<span class="hljs-number">127</span>]区间内，==比较的时候，值总是相等的（指向的是同一对象），在这个区间外是不等的。<br>而<span class="hljs-type">Float</span>和<span class="hljs-type">Double</span>则不相等， <span class="hljs-type">Boolean</span>的值总是相等的<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黄金矿工怀旧版-开发文档</title>
    <link href="/blog/2023/04/09/%E9%BB%84%E9%87%91%E7%9F%BF%E5%B7%A5%E6%80%80%E6%97%A7%E7%89%88-%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/"/>
    <url>/blog/2023/04/09/%E9%BB%84%E9%87%91%E7%9F%BF%E5%B7%A5%E6%80%80%E6%97%A7%E7%89%88-%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="欢迎阅读黄金矿工怀旧版的开发文档"><a href="#欢迎阅读黄金矿工怀旧版的开发文档" class="headerlink" title="欢迎阅读黄金矿工怀旧版的开发文档"></a>欢迎阅读黄金矿工怀旧版的开发文档</h2><ul><li><h5 id="这个游戏是在3月份初着手的，慢悠悠写了半个月功能就差不多实现了"><a href="#这个游戏是在3月份初着手的，慢悠悠写了半个月功能就差不多实现了" class="headerlink" title="这个游戏是在3月份初着手的，慢悠悠写了半个月功能就差不多实现了"></a>这个游戏是在3月份初着手的，慢悠悠写了半个月功能就差不多实现了</h5></li><li><h5 id="到了3月下旬又想起这玩意儿了，赶工优化了一下游戏画面，增加了关卡跳转时的3秒倒计时效果，匆匆打包好了，也是非常有成就感的"><a href="#到了3月下旬又想起这玩意儿了，赶工优化了一下游戏画面，增加了关卡跳转时的3秒倒计时效果，匆匆打包好了，也是非常有成就感的" class="headerlink" title="到了3月下旬又想起这玩意儿了，赶工优化了一下游戏画面，增加了关卡跳转时的3秒倒计时效果，匆匆打包好了，也是非常有成就感的"></a>到了3月下旬又想起这玩意儿了，赶工优化了一下游戏画面，增加了关卡跳转时的3秒倒计时效果，匆匆打包好了，也是非常有成就感的</h5></li><li><h5 id="那么这篇文档当然不能够再现完整的开发流程了，只能是简单审视下整个项目开发完毕之后的逻辑实现"><a href="#那么这篇文档当然不能够再现完整的开发流程了，只能是简单审视下整个项目开发完毕之后的逻辑实现" class="headerlink" title="那么这篇文档当然不能够再现完整的开发流程了，只能是简单审视下整个项目开发完毕之后的逻辑实现"></a>那么这篇文档当然不能够再现完整的开发流程了，只能是简单审视下整个项目开发完毕之后的逻辑实现</h5></li><li><h5 id="废话不多说，开始吧"><a href="#废话不多说，开始吧" class="headerlink" title="废话不多说，开始吧"></a>废话不多说，开始吧</h5></li></ul>]]></content>
    
    
    <categories>
      
      <category>project</category>
      
      <category>游戏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
      <tag>开发经验</tag>
      
      <tag>Game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java泛型</title>
    <link href="/blog/2023/04/09/Java%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/blog/2023/04/09/Java%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h4 id="这一批代码比较全面的展示了泛型的各种使用场景了"><a href="#这一批代码比较全面的展示了泛型的各种使用场景了" class="headerlink" title="这一批代码比较全面的展示了泛型的各种使用场景了"></a>这一批代码比较全面的展示了泛型的各种使用场景了</h4><ul><li><h5 id="泛型接口-EndA"><a href="#泛型接口-EndA" class="headerlink" title="泛型接口 EndA"></a>泛型接口 EndA<T></h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> entity.c;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EndA</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun_1</span><span class="hljs-params">(T t)</span>;<br><br>    &lt;R&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun_2</span><span class="hljs-params">(T t, R r)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><h5 id="泛型类-EndB"><a href="#泛型类-EndB" class="headerlink" title="泛型类 EndB"></a>泛型类 EndB<T></h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> entity.c;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 邓哈哈</span><br><span class="hljs-comment"> * 2023/4/9 21:51</span><br><span class="hljs-comment"> * Function:</span><br><span class="hljs-comment"> * Version 1.0</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndB</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">public</span> &lt;R&gt; EndB(T t, R r) &#123;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><h5 id="泛型类-EndC-lt-T-E-gt-extends-EndB-implements-EndA"><a href="#泛型类-EndC-lt-T-E-gt-extends-EndB-implements-EndA" class="headerlink" title="泛型类 EndC&lt;T, E&gt; extends EndB implements EndA"></a>泛型类 EndC&lt;T, E&gt; extends EndB<T> implements EndA<E></h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> entity.c;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 邓哈哈</span><br><span class="hljs-comment"> * 2023/4/9 21:39</span><br><span class="hljs-comment"> * Function:</span><br><span class="hljs-comment"> * Version 1.0</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndC</span>&lt;T, E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EndB</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EndA</span>&lt;E&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun_1</span><span class="hljs-params">(E t)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;R&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun_2</span><span class="hljs-params">(E e, R r)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;R&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun_3</span><span class="hljs-params">(T t, R r)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;R&gt; EndC(T t, R r) &#123;<br>        <span class="hljs-built_in">super</span>(t, r);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><ul><li><h5 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> entity.c;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 邓哈哈</span><br><span class="hljs-comment"> * 2023/4/9 21:50</span><br><span class="hljs-comment"> * Function: 这一批代码比较全面的展示了泛型的各种使用场景了</span><br><span class="hljs-comment"> * 接下来介绍泛型使用中的诸多语法和注意事项:</span><br><span class="hljs-comment"> * 泛型类, 泛型接口, 泛型类</span><br><span class="hljs-comment"> * 定义泛型接口 EndA, 内含抽象方法 fun_1 fun_2待实现;</span><br><span class="hljs-comment"> * 定义泛型类 EndB, 内含构造器</span><br><span class="hljs-comment"> * 定义泛型类 EndC, 继承EndB, 实现EndA</span><br><span class="hljs-comment"> * 注意:</span><br><span class="hljs-comment"> * 泛型类 EndC实现了 fun_1, fun_2方法, 自定义了 fun_3方法 和 有参构造器</span><br><span class="hljs-comment"> * 实例化泛型类, 要声明泛型类中的泛型</span><br><span class="hljs-comment"> * EndB 声明 T, EndC 声明 T, E</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * Version 1.0</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        EndB&lt;String&gt; endB = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EndB</span>&lt;&gt;(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">18</span>);<br><br>        EndC&lt;String, Double&gt; EndC_1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EndC</span>&lt;&gt;(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">10</span>);<br><br>        EndC&lt;Integer, Double&gt; EndC_2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EndC</span>&lt;&gt;(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>技术</tag>
      
      <tag>经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端-Vue3篇</title>
    <link href="/blog/2023/04/01/%E5%89%8D%E7%AB%AF-Vue3%E7%AF%87/"/>
    <url>/blog/2023/04/01/%E5%89%8D%E7%AB%AF-Vue3%E7%AF%87/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>伙伴匹配-开发文档</title>
    <link href="/blog/2023/03/24/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D-%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/"/>
    <url>/blog/2023/03/24/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D-%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前端项目初始化"><a href="#前端项目初始化" class="headerlink" title="前端项目初始化"></a>前端项目初始化</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Vue</span> <span class="hljs-number">3</span> 开发框架（提高页面开发的效率）<br><br><span class="hljs-attribute">Vant</span> UI（基于 Vue 的移动端组件库）（React 版 Zent）<br><br><span class="hljs-attribute">Vite</span> <span class="hljs-number">2</span>（打包工具，快！）<br><br><span class="hljs-attribute">Nginx</span> 来单机部署<br></code></pre></td></tr></table></figure><ul><li><h4 id="使用vite快速搭建一个项目-跟着文档操作就好了"><a href="#使用vite快速搭建一个项目-跟着文档操作就好了" class="headerlink" title="使用vite快速搭建一个项目(跟着文档操作就好了)"></a>使用vite快速搭建一个项目(跟着文档操作就好了)</h4></li><li><h5 id="在指定目录下执行该命令-初始化项目"><a href="#在指定目录下执行该命令-初始化项目" class="headerlink" title="在指定目录下执行该命令, 初始化项目"></a>在指定目录下执行该命令, 初始化项目</h5></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yarn create vite</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="package-json下的文件"><a href="#package-json下的文件" class="headerlink" title="package.json下的文件"></a>package.json下的文件</h5></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;partnermatch&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;private&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;module&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vite&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-tsc &amp;&amp; vite build&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;preview&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vite preview&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;vant&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.1.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.2.47&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@vitejs/plugin-vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.1.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;typescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.9.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;unplugin-vue-components&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.24.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue-tsc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.2.0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><ul><li><h5 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h5></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/svg+xml&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/vite.svg&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vite + Vue + TS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/src/main.ts&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h5></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./style.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);<br><br></code></pre></td></tr></table></figure><ul><li><h5 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup lang=&quot;ts&quot;&gt;<br>import HelloWorld from &quot;./components/HelloWorld.vue&quot;;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;a href=&quot;https://vitejs.dev&quot; target=&quot;_blank&quot;&gt;<br>      &lt;img src=&quot;/vite.svg&quot; class=&quot;logo&quot; alt=&quot;Vite logo&quot; /&gt;<br>    &lt;/a&gt;<br>    &lt;a href=&quot;https://vuejs.org/&quot; target=&quot;_blank&quot;&gt;<br>      &lt;img src=&quot;./assets/vue.svg&quot; class=&quot;logo vue&quot; alt=&quot;Vue logo&quot; /&gt;<br>    &lt;/a&gt;<br>  &lt;/div&gt;<br>  &lt;HelloWorld msg=&quot;Vite + Vue&quot; /&gt;<br><br>  &lt;van-button type=&quot;primary&quot; /&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br>.logo &#123;<br>  height: 6em;<br>  padding: 1.5em;<br>  will-change: filter;<br>  transition: filter 300ms;<br>&#125;<br>.logo:hover &#123;<br>  filter: drop-shadow(0 0 2em #646cffaa);<br>&#125;<br>.logo.vue:hover &#123;<br>  filter: drop-shadow(0 0 2em #42b883aa);<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><ul><li><h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h5></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> dev<br></code></pre></td></tr></table></figure><h4 id="项目正常启动-接下来就是引入组件-开发我们自己的页面了-详见官方文档"><a href="#项目正常启动-接下来就是引入组件-开发我们自己的页面了-详见官方文档" class="headerlink" title="项目正常启动, 接下来就是引入组件, 开发我们自己的页面了(详见官方文档)"></a>项目正常启动, 接下来就是引入组件, 开发我们自己的页面了(详见官方文档)</h4><ul><li><h5 id="安装最新版vant"><a href="#安装最新版vant" class="headerlink" title="安装最新版vant"></a>安装最新版vant</h5></li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i vant<br></code></pre></td></tr></table></figure><h5 id="引入vant组件-这里我们使用按需引入的方法"><a href="#引入vant组件-这里我们使用按需引入的方法" class="headerlink" title="引入vant组件(这里我们使用按需引入的方法)"></a>引入vant组件(这里我们使用按需引入的方法)</h5><ul><li><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 通过 yarn 安装</span><br>yarn <span class="hljs-built_in">add</span> unplugin-vue-components -D<br></code></pre></td></tr></table></figure><h5 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h5><ul><li><h5 id="在vite-config-js下配置插件"><a href="#在vite-config-js下配置插件" class="headerlink" title="在vite.config.js下配置插件"></a>在vite.config.js下配置插件</h5></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Components</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-vue-components/vite&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">VantResolver</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-vue-components/resolvers&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">vue</span>(),<br>    <span class="hljs-title class_">Components</span>(&#123;<br>      <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">VantResolver</span>()],<br>    &#125;),<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h5><ul><li><h5 id="在App-vue中引入组件"><a href="#在App-vue中引入组件" class="headerlink" title="在App.vue中引入组件"></a>在App.vue中引入组件</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;van-button type=&quot;primary&quot;&gt;主要按钮&lt;/van-button&gt;<br>  &lt;van-button type=&quot;success&quot;&gt;成功按钮&lt;/van-button&gt;<br>  &lt;van-button type=&quot;default&quot;&gt;默认按钮&lt;/van-button&gt;<br>  &lt;van-button type=&quot;warning&quot;&gt;警告按钮&lt;/van-button&gt;<br>  &lt;van-button type=&quot;danger&quot;&gt;危险按钮&lt;/van-button&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><ul><li><h5 id="在main-js中导入相应的库-因为我们使用按需引入的方法来引入组件-所以这些库得自己导"><a href="#在main-js中导入相应的库-因为我们使用按需引入的方法来引入组件-所以这些库得自己导" class="headerlink" title="在main.js中导入相应的库(因为我们使用按需引入的方法来引入组件, 所以这些库得自己导)"></a>在main.js中导入相应的库(因为我们使用按需引入的方法来引入组件, 所以这些库得自己导)</h5></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vant&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./style.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Button</span>);<br><br></code></pre></td></tr></table></figure><ul><li><h5 id="完成-页面已经成功被我们自定义了"><a href="#完成-页面已经成功被我们自定义了" class="headerlink" title="完成! 页面已经成功被我们自定义了"></a>完成! 页面已经成功被我们自定义了</h5></li><li><h5 id="接下来就是快速搭建我们自己的页面了"><a href="#接下来就是快速搭建我们自己的页面了" class="headerlink" title="接下来就是快速搭建我们自己的页面了"></a>接下来就是快速搭建我们自己的页面了</h5></li><li><h5 id="layouts-BasicLayout-vue"><a href="#layouts-BasicLayout-vue" class="headerlink" title="/layouts/BasicLayout.vue"></a>/layouts/BasicLayout.vue</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 导航栏 --&gt;<br>  &lt;van-nav-bar<br>    title=&quot;标题&quot;<br>    fixed<br>    left-arrow<br>    @click-left=&quot;onClickLeft&quot;<br>    @click-right=&quot;onClickRight&quot;<br>  &gt;<br>    &lt;template #right&gt;<br>      &lt;van-icon name=&quot;search&quot; size=&quot;18&quot; /&gt;<br>    &lt;/template&gt;<br>  &lt;/van-nav-bar&gt;<br><br>  &lt;!-- 内容 --&gt;<br>  &lt;div id=&quot;content&quot;&gt;<br>    &lt;template v-if=&quot;active === &#x27;index&#x27;&quot;&gt;<br>      &lt;Index /&gt;<br>    &lt;/template&gt;<br>    &lt;template v-if=&quot;active === &#x27;team&#x27;&quot;&gt;<br>      &lt;Team /&gt;<br>    &lt;/template&gt;<br>  &lt;/div&gt;<br><br>  &lt;slot&gt; 这里是内容 &lt;/slot&gt;<br>  &lt;!-- 标签页 --&gt;<br>  &lt;van-tabbar v-model=&quot;active&quot; @change=&quot;onChange&quot;&gt;<br>    &lt;van-tabbar-item icon=&quot;home-o&quot; name=&quot;index&quot;&gt;主页&lt;/van-tabbar-item&gt;<br>    &lt;van-tabbar-item icon=&quot;search&quot; name=&quot;team&quot;&gt;队伍&lt;/van-tabbar-item&gt;<br>    &lt;van-tabbar-item icon=&quot;friends-o&quot; name=&quot;user&quot;&gt;个人&lt;/van-tabbar-item&gt;<br>  &lt;/van-tabbar&gt;<br>&lt;/template&gt;<br><br>&lt;!-- 脚本 --&gt;<br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref &#125; from &quot;vue&quot;;<br><br>import Index from &quot;./../pages/Index.vue&quot;;<br>import Team from &quot;./../pages/Team.vue&quot;;<br><br>const onClickLeft = () =&gt; alert(&quot;左&quot;);<br>const onClickRight = () =&gt; alert(&quot;右&quot;);<br><br>const active = ref(&quot;index&quot;);<br>// const onChange = (index) =&gt; alert(`$&#123;index&#125;`);<br>&lt;/script&gt;<br><br>&lt;!-- 样式 --&gt;<br>&lt;style&gt;&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><ul><li><h5 id="注意vant组件的导入和vue的引入"><a href="#注意vant组件的导入和vue的引入" class="headerlink" title="注意vant组件的导入和vue的引入"></a>注意vant组件的导入和vue的引入</h5></li><li><h5 id="开发主页和队伍页-pages-Index-vue-pages-Team-vue"><a href="#开发主页和队伍页-pages-Index-vue-pages-Team-vue" class="headerlink" title="开发主页和队伍页 (/pages/Index.vue    /pages/Team.vue)"></a>开发主页和队伍页 (/pages/Index.vue    /pages/Team.vue)</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br><br> &lt;slot&gt; 主页 &lt;/slot&gt;<br><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br><br> &lt;slot&gt; 队伍 &lt;/slot&gt;<br><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h1 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h1><ul><li><h5 id="设计标签表"><a href="#设计标签表" class="headerlink" title="设计标签表"></a>设计标签表</h5></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tag<br>(<br>    id          <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>    tag_name    <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                                    <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;标签名称&#x27;</span>,<br>    userId      <span class="hljs-type">bigint</span>                                          <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>    is_Parent   tinyint                                         <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否为父标签 0 - 不是 1 - 是&#x27;</span>,<br>    parentId    <span class="hljs-type">bigint</span>                                          <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;父标签id&#x27;</span>,<br>    create_time datetime              <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    update_time datetime              <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    is_delete   tinyint               <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否删除 0 - 正常&#x27;</span><br>) comment <span class="hljs-string">&#x27;标签表&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li><h5 id="用户表添加tags字段"><a href="#用户表添加tags字段" class="headerlink" title="用户表添加tags字段"></a>用户表添加tags字段</h5></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">user</span><br>(<br>    id            <span class="hljs-type">bigint</span>                                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>    user_account  <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;账号&#x27;</span>,<br>    username      <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;昵称&#x27;</span>,<br>    user_password <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>)                           <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br>    avatar_url    <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;头像&#x27;</span>,<br>    gender        <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span>               <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>    phone         <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;电话&#x27;</span>,<br>    email         <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>    user_status   <span class="hljs-type">int</span>          <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;状态 0 - 正常&#x27;</span>,<br>    create_time   datetime     <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    update_time   datetime     <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    is_delete     tinyint      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否删除 0 - 正常&#x27;</span>,<br>    user_role     <span class="hljs-type">int</span>(<span class="hljs-number">1</span>)       <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户权限 0 - 管理员 1 - 普通用户&#x27;</span>,<br>    planet_code   <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                           <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;星球编号&#x27;</span><br>    tags          <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>)     <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;标签&#x27;</span><br>)<br>    comment <span class="hljs-string">&#x27;用户&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="后端接口开发"><a href="#后端接口开发" class="headerlink" title="后端接口开发"></a>后端接口开发</h1><h5 id="初始化后端环境"><a href="#初始化后端环境" class="headerlink" title="初始化后端环境"></a>初始化后端环境</h5><ul><li><h5 id="开发根据标签查询符合条件用户的方法-service层"><a href="#开发根据标签查询符合条件用户的方法-service层" class="headerlink" title="开发根据标签查询符合条件用户的方法 (service层)"></a>开发根据标签查询符合条件用户的方法 (service层)</h5></li></ul><h6 id="在内存中判断用户是个否拥有选中的标签"><a href="#在内存中判断用户是个否拥有选中的标签" class="headerlink" title="在内存中判断用户是个否拥有选中的标签"></a>在内存中判断用户是个否拥有选中的标签</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据标签查询用户(在内存中判断用户是个否拥有选中的标签)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> tagNameList 打上的标签列表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 查询到的用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">searchUserByTags</span><span class="hljs-params">(List&lt;String&gt; tagNameList)</span> &#123;<br>    <span class="hljs-comment">// 1.默认查询全部用户</span><br>    QueryWrapper&lt;User&gt; uqw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    List&lt;User&gt; userList = userMapper.selectList(uqw);<br><br>    <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>    <span class="hljs-comment">// 2.从查询到的用户中, 根据标签筛选出符合的用户, 组合成列表并返回</span><br>    <span class="hljs-keyword">return</span> userList.stream().filter(user -&gt; &#123;<br>        <span class="hljs-comment">// 2.1.获取用户标签</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">tagsStr</span> <span class="hljs-operator">=</span> user.getTags();<br>        <span class="hljs-comment">// 2.1.校验是否有标签</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(tagsStr))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 2.2.将标签从json字符串转换为List集合</span><br>        List&lt;String&gt; tempTagsNameSet = gson.fromJson(tagsStr, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeToken</span>&lt;List&lt;String&gt;&gt;() &#123;<br>        &#125;.getType());<br>        <span class="hljs-comment">// 2.3.筛出标签不符合的用户</span><br>        <span class="hljs-keyword">for</span> (String tagName : tagNameList) &#123;<br>            <span class="hljs-keyword">if</span> (!tempTagsNameSet.contains(tagName))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 2.4.返回符合用户</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;).map(<span class="hljs-built_in">this</span>::getSafetyUser).collect(Collectors.toList());<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="SQL查询数据库"><a href="#SQL查询数据库" class="headerlink" title="SQL查询数据库"></a>SQL查询数据库</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据标签查询用户(SQL查询数据库)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tagNameList 打上的标签列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查询到的用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Deprecated</span><br><span class="hljs-comment">//    @Override</span><br>    <span class="hljs-keyword">private</span> List&lt;User&gt; <span class="hljs-title function_">searchUserByTags2</span><span class="hljs-params">(List&lt;String&gt; tagNameList)</span> &#123;<br>        <span class="hljs-comment">// 1.设置查询条件</span><br>        QueryWrapper&lt;User&gt; uqw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        <span class="hljs-comment">// where tags like &quot;...&quot; and like &quot;...&quot; and ......</span><br>        <span class="hljs-keyword">for</span> (String tagName : tagNameList) &#123;<br>            uqw.like(<span class="hljs-string">&quot;tags&quot;</span>, tagName);<br>        &#125;<br>        <span class="hljs-comment">// 2.查询到符合标签的用户</span><br>        List&lt;User&gt; userList = userMapper.selectList(uqw);<br>        <span class="hljs-comment">// 3.用户信息脱敏</span><br>        <span class="hljs-keyword">return</span> userList.stream().map(<span class="hljs-built_in">this</span>::getSafetyUser).collect(Collectors.toList());<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="数据库表中添加几条测试数据"><a href="#数据库表中添加几条测试数据" class="headerlink" title="数据库表中添加几条测试数据"></a>数据库表中添加几条测试数据</h5></li></ul><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230326091433304.png" alt="image-20230326091433304"></p><ul><li><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImplTest</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">searchUserByTags</span><span class="hljs-params">()</span> &#123;<br>        List&lt;String&gt; tagNameList = Arrays.asList(<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;python&quot;</span>);<br>        List&lt;User&gt; userList = userService.searchUserByTags(tagNameList);<br>        Assertions.assertNotNull(userList);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="该功能开发完成"><a href="#该功能开发完成" class="headerlink" title="该功能开发完成"></a>该功能开发完成</h5></li></ul><h1 id="前端整合路由"><a href="#前端整合路由" class="headerlink" title="前端整合路由"></a>前端整合路由</h1><ul><li><h5 id="记得之前开发好的前端页面吧-当时实现跳转的方法是这样的"><a href="#记得之前开发好的前端页面吧-当时实现跳转的方法是这样的" class="headerlink" title="记得之前开发好的前端页面吧, 当时实现跳转的方法是这样的"></a>记得之前开发好的前端页面吧, 当时实现跳转的方法是这样的</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue"> &lt;!-- 内容 --&gt;<br>&lt;div id=&quot;content&quot;&gt;<br>   &lt;template v-if=&quot;active === &#x27;index&#x27;&quot;&gt;<br>     &lt;Index /&gt;<br>   &lt;/template&gt;<br>   &lt;template v-if=&quot;active === &#x27;team&#x27;&quot;&gt;<br>     &lt;Team /&gt;<br>   &lt;/template&gt;<br> &lt;/div&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 标签页 --&gt;<br><br> &lt;van-tabbar v-model=&quot;active&quot;&gt;<br>  &lt;van-tabbar-item to=&quot;/&quot; icon=&quot;home-o&quot; name=&quot;index&quot;&gt;主页&lt;/van-tabbar-item&gt;<br>  &lt;van-tabbar-item to=&quot;/team&quot; icon=&quot;search&quot; name=&quot;team&quot;&gt;队伍&lt;/van-tabbar-item&gt;<br>  &lt;van-tabbar-item to=&quot;/user&quot; icon=&quot;friends-o&quot; name=&quot;user&quot;<br>   \&gt;个人&lt;/van-tabbar-item&gt;<br>   &lt;/van-tabbar&gt;\<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 默认选中页</span><br><span class="hljs-keyword">const</span> active = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;index&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><h5 id="真他妈原始-我们要整点高级的-gt-使用路由跳转的方式实现页面跳转"><a href="#真他妈原始-我们要整点高级的-gt-使用路由跳转的方式实现页面跳转" class="headerlink" title="真他妈原始, 我们要整点高级的 ==&gt; 使用路由跳转的方式实现页面跳转"></a>真他妈原始, 我们要整点高级的 ==&gt; 使用路由跳转的方式实现页面跳转</h5></li></ul><h4 id="引入Vue-Router组件"><a href="#引入Vue-Router组件" class="headerlink" title="引入Vue-Router组件"></a>引入Vue-Router组件</h4><ul><li><h5 id="看官方文档-就好了"><a href="#看官方文档-就好了" class="headerlink" title="看官方文档, 就好了"></a>看官方文档, 就好了</h5></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 定义路由组件.</span><br><span class="hljs-comment">// 也可以从其他文件导入</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;Home&lt;/div&gt;&#x27;</span> &#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">About</span> = &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;About&lt;/div&gt;&#x27;</span> &#125;<br><br><span class="hljs-comment">// 2. 定义一些路由</span><br><span class="hljs-comment">// 每个路由都需要映射到一个组件。</span><br><span class="hljs-comment">// 我们后面再讨论嵌套路由。</span><br><span class="hljs-keyword">const</span> routes = [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span> &#125;,<br>]<br><br><span class="hljs-comment">// 3. 创建路由实例并传递 `routes` 配置</span><br><span class="hljs-comment">// 你可以在这里输入更多的配置，但我们在这里</span><br><span class="hljs-comment">// 暂时保持简单</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-title class_">VueRouter</span>.<span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-comment">// 4. 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。</span><br>  <span class="hljs-attr">history</span>: <span class="hljs-title class_">VueRouter</span>.<span class="hljs-title function_">createWebHashHistory</span>(),<br>  routes, <span class="hljs-comment">// `routes: routes` 的缩写</span><br>&#125;)<br><br><span class="hljs-comment">// 5. 创建并挂载根实例</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;&#125;)<br><span class="hljs-comment">//确保 _use_ 路由实例使</span><br><span class="hljs-comment">//整个应用支持路由。</span><br>app.<span class="hljs-title function_">use</span>(router)<br><br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br><span class="hljs-comment">// 现在，应用已经启动了！</span><br><br></code></pre></td></tr></table></figure><ul><li><h5 id="我们稍微修改一下-实现我们自定义页面的路由跳转"><a href="#我们稍微修改一下-实现我们自定义页面的路由跳转" class="headerlink" title="我们稍微修改一下, 实现我们自定义页面的路由跳转"></a>我们稍微修改一下, 实现我们自定义页面的路由跳转</h5></li><li><h5 id="把路由的定义封装到src-config-route-ts下-在main文件中引入就可以了"><a href="#把路由的定义封装到src-config-route-ts下-在main文件中引入就可以了" class="headerlink" title="把路由的定义封装到src/config/route.ts下, 在main文件中引入就可以了"></a>把路由的定义封装到src/config/route.ts下, 在main文件中引入就可以了</h5></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 定义路由组件.</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">IndexPage</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/IndexPage.vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TeamPage</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/TeamPage.vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">UserPage</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/UserPage.vue&quot;</span>;<br><br><span class="hljs-comment">// 2. 定义一些路由</span><br><span class="hljs-comment">// 每个路由都需要映射到一个组件。</span><br><span class="hljs-comment">// 我们后面再讨论嵌套路由。</span><br><span class="hljs-keyword">const</span> routes = [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">IndexPage</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/team&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">TeamPage</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserPage</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> routes;<br><br></code></pre></td></tr></table></figure><ul><li><h5 id="这是我们的main-ts文件了"><a href="#这是我们的main-ts文件了" class="headerlink" title="这是我们的main.ts文件了"></a>这是我们的main.ts文件了</h5></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span>, <span class="hljs-title class_">Icon</span>, <span class="hljs-title class_">NavBar</span>, <span class="hljs-title class_">Tabbar</span>, <span class="hljs-title class_">TabbarItem</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vant&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./config/route&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Button</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Icon</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">NavBar</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Tabbar</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">TabbarItem</span>);<br><br><span class="hljs-comment">// 3. 创建路由实例并传递 `routes` 配置</span><br><span class="hljs-comment">// 你可以在这里输入更多的配置，但我们在这里</span><br><span class="hljs-comment">// 暂时保持简单</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-title class_">VueRouter</span>.<span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-comment">// 4. 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。</span><br>  <span class="hljs-attr">history</span>: <span class="hljs-title class_">VueRouter</span>.<span class="hljs-title function_">createWebHashHistory</span>(),<br>  <span class="hljs-attr">routes</span>: routes, <span class="hljs-comment">// `routes: routes` 的缩写</span><br>&#125;);<br><span class="hljs-comment">// 5. 创建并挂载根实例</span><br><span class="hljs-comment">//确保 _use_ 路由实例使</span><br><span class="hljs-comment">//整个应用支持路由。</span><br>app.<span class="hljs-title function_">use</span>(router);<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><h5 id="这里我们的路由就配置好了-总体来说还是很简单的"><a href="#这里我们的路由就配置好了-总体来说还是很简单的" class="headerlink" title="这里我们的路由就配置好了, 总体来说还是很简单的"></a>这里我们的路由就配置好了, 总体来说还是很简单的</h5></li><li><h5 id="浅浅尝试一下用法吧-尝完就可以删了"><a href="#浅浅尝试一下用法吧-尝完就可以删了" class="headerlink" title="浅浅尝试一下用法吧 (尝完就可以删了)"></a>浅浅尝试一下用法吧 (尝完就可以删了)</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div id=&quot;content&quot;&gt;<br>  &lt;router-view /&gt;<br>&lt;/div&gt;<br><br>&lt;router-link to=&quot;/&quot;&gt;Go to Home&lt;/router-link&gt;<br>&lt;router-link to=&quot;/about&quot;&gt;Go to About&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><ul><li><h5 id="如上-这样就能够使用路由实现页面跳转了-非常方便"><a href="#如上-这样就能够使用路由实现页面跳转了-非常方便" class="headerlink" title="如上, 这样就能够使用路由实现页面跳转了, 非常方便!"></a>如上, 这样就能够使用路由实现页面跳转了, 非常方便!</h5></li><li><h5 id="幸运的是-我们的van-tabbar组件也内置了路由跳转-改写为以下形式"><a href="#幸运的是-我们的van-tabbar组件也内置了路由跳转-改写为以下形式" class="headerlink" title="幸运的是, 我们的van-tabbar组件也内置了路由跳转, 改写为以下形式:"></a>幸运的是, 我们的van-tabbar组件也内置了路由跳转, 改写为以下形式:</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 标签页 --&gt;<br> &lt;van-tabbar route&gt;<br>   &lt;van-tabbar-item to=&quot;/&quot; icon=&quot;home-o&quot; name=&quot;index&quot;&gt;主页&lt;/van-tabbar-item&gt;<br>   &lt;van-tabbar-item to=&quot;/team&quot; icon=&quot;search&quot; name=&quot;team&quot;&gt;队伍&lt;/van-tabbar-item&gt;<br>   &lt;van-tabbar-item to=&quot;/user&quot; icon=&quot;friends-o&quot; name=&quot;user&quot;<br>     &gt;个人&lt;/van-tabbar-item<br>   &gt;<br> &lt;/van-tabbar&gt;<br></code></pre></td></tr></table></figure><ul><li><h5 id="路由整合完成了呢"><a href="#路由整合完成了呢" class="headerlink" title="路由整合完成了呢"></a>路由整合完成了呢</h5></li><li><h5 id="差点忘记了-这里有个非常恶心的BUG-我配完vue-router配置后-启动服务显示页面为空白-怎么搞都没反应-结果把自定义路由那儿的-“-“-删了改成-“-index”后-就他妈有页面了-我他妈给改回去后-既然能正常显示了-真奶奶的无语-还好老子聪明机智哈哈哈-差点栽这儿出不来了"><a href="#差点忘记了-这里有个非常恶心的BUG-我配完vue-router配置后-启动服务显示页面为空白-怎么搞都没反应-结果把自定义路由那儿的-“-“-删了改成-“-index”后-就他妈有页面了-我他妈给改回去后-既然能正常显示了-真奶奶的无语-还好老子聪明机智哈哈哈-差点栽这儿出不来了" class="headerlink" title="差点忘记了, 这里有个非常恶心的BUG, 我配完vue-router配置后, 启动服务显示页面为空白, 怎么搞都没反应, 结果把自定义路由那儿的 “/“ 删了改成 “/index”后, 就他妈有页面了, 我他妈给改回去后, 既然能正常显示了?!真奶奶的无语, 还好老子聪明机智哈哈哈, 差点栽这儿出不来了"></a>差点忘记了, 这里有个非常恶心的BUG, 我配完vue-router配置后, 启动服务显示页面为空白, 怎么搞都没反应, 结果把自定义路由那儿的 “/“ 删了改成 “/index”后, 就他妈有页面了, 我他妈给改回去后, 既然能正常显示了?!真奶奶的无语, 还好老子聪明机智哈哈哈, 差点栽这儿出不来了</h5></li></ul><h1 id="前端页面开发"><a href="#前端页面开发" class="headerlink" title="前端页面开发"></a>前端页面开发</h1><ul><li><strong>路由整合完毕之后，接下来就要开发我们的搜索页面了：</strong></li></ul><h2 id="搜索页面"><a href="#搜索页面" class="headerlink" title="搜索页面"></a>搜索页面</h2><ul><li><strong>开发页面之前，我们先把搜索页面的路由配置好吧 （src/config/route.ts）</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 2. 定义一些路由</span><br><span class="hljs-comment">// 每个路由都需要映射到一个组件。</span><br><span class="hljs-comment">// 我们后面再讨论嵌套路由。</span><br><span class="hljs-keyword">const</span> routes = [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">IndexPage</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/team&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">TeamPage</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserPage</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/search&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">SearchPage</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/edit&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserEditPage</span> &#125;,<br>];<br></code></pre></td></tr></table></figure><ul><li><p><strong>这里顺带把后面的用户信息页和用户信息修改页路由页配置好了，后面就不涉及了</strong></p></li><li><h5 id="点击导航栏的搜索符号跳转到搜索页面"><a href="#点击导航栏的搜索符号跳转到搜索页面" class="headerlink" title="点击导航栏的搜索符号跳转到搜索页面"></a>点击导航栏的搜索符号跳转到搜索页面</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onClickRight</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;/search&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><strong>去找到合适的组件，完成页面开发</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 搜索栏 --&gt;<br> &lt;form action=&quot;/&quot;&gt;<br>   &lt;van-search<br>     v-model=&quot;searchText&quot;<br>     show-action<br>     placeholder=&quot;请输入搜索关键词&quot;<br>     @search=&quot;onSearch&quot;<br>     @cancel=&quot;onCancel&quot;<br>   /&gt;<br> &lt;/form&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 分割线 --&gt;<br>  &lt;van-divider content-position=&quot;left&quot;&gt;已选标签&lt;/van-divider&gt;  <br>  &lt;van-divider content-position=&quot;right&quot;&gt;可选标签&lt;/van-divider&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 选中的标签  layout布局 --&gt;<br>  &lt;van-row gutter=&quot;20&quot;&gt;<br>    &lt;van-col v-for=&quot;tag in activeIds&quot;&gt;<br>      &lt;van-tag closeable size=&quot;medium&quot; type=&quot;primary&quot; @close=&quot;close&quot;&gt;<br>        &#123;&#123; tag &#125;&#125;<br>      &lt;/van-tag&gt;<br>    &lt;/van-col&gt;<br>  &lt;/van-row&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 标签列表 --&gt;<br>  &lt;van-tree-select<br>    v-model:active-id=&quot;activeIds&quot;<br>    v-model:main-active-index=&quot;activeIndex&quot;<br>    :items=&quot;tagList&quot;<br>  /&gt;<br></code></pre></td></tr></table></figure><ul><li><strong>在脚本里编写一些逻辑，最终达成了：</strong></li></ul><ol><li><h5 id="搜索栏可以筛选标签列表里的标签"><a href="#搜索栏可以筛选标签列表里的标签" class="headerlink" title="搜索栏可以筛选标签列表里的标签"></a>搜索栏可以筛选标签列表里的标签</h5></li><li><h5 id="选中标签列表后可以把标签整合成json字符串，将来可以发送json字符串实现根据标签搜索用户"><a href="#选中标签列表后可以把标签整合成json字符串，将来可以发送json字符串实现根据标签搜索用户" class="headerlink" title="选中标签列表后可以把标签整合成json字符串，将来可以发送json字符串实现根据标签搜索用户"></a>选中标签列表后可以把标签整合成json字符串，将来可以发送json字符串实现根据标签搜索用户</h5></li><li><h5 id="注：这块逻辑比较难，可以多加理解消化，这里不做过多介绍了（因为我自己也看懵了，照着人家的代码写下来的）"><a href="#注：这块逻辑比较难，可以多加理解消化，这里不做过多介绍了（因为我自己也看懵了，照着人家的代码写下来的）" class="headerlink" title="注：这块逻辑比较难，可以多加理解消化，这里不做过多介绍了（因为我自己也看懵了，照着人家的代码写下来的）"></a>注：这块逻辑比较难，可以多加理解消化，这里不做过多介绍了（因为我自己也看懵了，照着人家的代码写下来的）</h5><h5 id="展示一下搜索页最终代码和实现效果吧"><a href="#展示一下搜索页最终代码和实现效果吧" class="headerlink" title="展示一下搜索页最终代码和实现效果吧"></a>展示一下搜索页最终代码和实现效果吧</h5></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 搜索栏 --&gt;<br>  &lt;form action=&quot;/&quot;&gt;<br>    &lt;van-search<br>      v-model=&quot;searchText&quot;<br>      show-action<br>      placeholder=&quot;请输入搜索关键词&quot;<br>      @search=&quot;onSearch&quot;<br>      @cancel=&quot;onCancel&quot;<br>    /&gt;<br>  &lt;/form&gt;<br>  &lt;!-- 分割线 --&gt;<br>  &lt;van-divider content-position=&quot;left&quot;&gt;已选标签&lt;/van-divider&gt;<br>  &lt;div v-if=&quot;activeIds.length === 0&quot;&gt;请选择标签&lt;/div&gt;<br>  &lt;!-- 选中的标签  layout布局 --&gt;<br>  &lt;van-row gutter=&quot;20&quot;&gt;<br>    &lt;van-col v-for=&quot;tag in activeIds&quot;&gt;<br>      &lt;van-tag closeable size=&quot;medium&quot; type=&quot;primary&quot; @close=&quot;close&quot;&gt;<br>        &#123;&#123; tag &#125;&#125;<br>      &lt;/van-tag&gt;<br>    &lt;/van-col&gt;<br>  &lt;/van-row&gt;<br><br>  &lt;van-divider content-position=&quot;right&quot;&gt;可选标签&lt;/van-divider&gt;<br>  &lt;!-- 标签列表 --&gt;<br>  &lt;van-tree-select<br>    v-model:active-id=&quot;activeIds&quot;<br>    v-model:main-active-index=&quot;activeIndex&quot;<br>    :items=&quot;tagList&quot;<br>  /&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref &#125; from &quot;vue&quot;;<br><br>const searchText = ref(&quot;&quot;);<br><br>// 已选中的标签<br>const activeIds = ref([]);<br>const activeIndex = ref(0);<br><br>// 原始标签列表<br>const originTagList = [<br>  &#123;<br>    text: &quot;年级&quot;,<br>    children: [<br>      &#123; text: &quot;大一&quot;, id: &quot;大一&quot; &#125;,<br>      &#123; text: &quot;大二&quot;, id: &quot;大二&quot; &#125;,<br>      &#123; text: &quot;大三&quot;, id: &quot;大三&quot; &#125;,<br>      &#123; text: &quot;大四&quot;, id: &quot;大四&quot; &#125;,<br>      &#123; text: &quot;大五&quot;, id: &quot;大五&quot;, disabled: true &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    text: &quot;性别&quot;,<br>    children: [<br>      &#123; text: &quot;男&quot;, id: &quot;男&quot; &#125;,<br>      &#123; text: &quot;女&quot;, id: &quot;女&quot; &#125;,<br>    ],<br>  &#125;,<br>];<br><br>// 实际标签列表<br>let tagList = ref(originTagList);<br><br>/**<br> * 搜索过滤<br> * @param val<br> */<br>const onSearch = (val: any) =&gt; &#123;<br>  tagList.value = originTagList.map((parentTag) =&gt; &#123;<br>    const tempChildren = [...parentTag.children];<br>    const tempParentTag = &#123; ...parentTag &#125;;<br>    tempParentTag.children = tempChildren.filter((item) =&gt;<br>      item.text.includes(searchText.value)<br>    );<br>    return tempParentTag;<br>  &#125;);<br>&#125;;<br><br>// 取消<br>const onCancel = () =&gt; &#123;<br>  searchText.value = &quot;&quot;;<br>  tagList.value = originTagList;<br>&#125;;<br><br>// 关闭标签<br>const close = (tag: any) =&gt; &#123;<br>  activeIds.value = activeIds.value.filter((item) =&gt; &#123;<br>    return item !== tag;<br>  &#125;);<br>&#125;;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230402160806287.png" alt="image-20230402160806287"></p><h2 id="用户信息页"><a href="#用户信息页" class="headerlink" title="用户信息页"></a>用户信息页</h2><ul><li><h5 id="这里就比较简单了，开发！"><a href="#这里就比较简单了，开发！" class="headerlink" title="这里就比较简单了，开发！"></a>这里就比较简单了，开发！</h5></li><li><h5 id="引入相关表单组件-Cell单元格"><a href="#引入相关表单组件-Cell单元格" class="headerlink" title="引入相关表单组件    Cell单元格"></a>引入相关表单组件    Cell单元格</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- &lt;slot&gt; 个人 &lt;/slot&gt; --&gt;<br>  &lt;van-cell title=&quot;账号&quot; is-link to=&quot;/user/edit&quot; :value=&quot;user.username&quot; /&gt;<br>  &lt;van-cell title=&quot;昵称&quot; is-link to=&quot;/user/edit&quot; :value=&quot;user.userAccount&quot; /&gt;<br>  &lt;van-cell title=&quot;头像&quot; is-link to=&quot;/user/edit&quot; :value=&quot;user.avatarUrl&quot; /&gt;<br>  &lt;van-cell title=&quot;性别&quot; is-link to=&quot;/user/edit&quot; :value=&quot;user.gender&quot; /&gt;<br>  &lt;van-cell title=&quot;电话&quot; is-link to=&quot;/user/edit&quot; :value=&quot;user.phone&quot; /&gt;<br>  &lt;van-cell title=&quot;邮箱&quot; is-link to=&quot;/user/edit&quot; :value=&quot;user.email&quot; /&gt;<br>  &lt;van-cell title=&quot;星球编号&quot; is-link to=&quot;/user/edit&quot; :value=&quot;user.planetCode&quot; /&gt;<br>  &lt;van-cell title=&quot;注册时间&quot; is-link to=&quot;/user/edit&quot; :value=&quot;user.createTime.toISOString()&quot;/&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><ul><li><h5 id="自己在src-models下写一个user-d-ts，自定义userType类型，将来填充表单"><a href="#自己在src-models下写一个user-d-ts，自定义userType类型，将来填充表单" class="headerlink" title="自己在src/models下写一个user.d.ts，自定义userType类型，将来填充表单"></a>自己在src/models下写一个user.d.ts，自定义userType类型，将来填充表单</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 用户信息</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> userType = &#123;<br>  id?: <span class="hljs-built_in">number</span>;<br>  userAccount?: <span class="hljs-built_in">string</span>;<br>  username?: <span class="hljs-built_in">string</span>;<br>  avatarUrl?: <span class="hljs-built_in">string</span>;<br>  gender?: <span class="hljs-built_in">string</span>;<br>  phone?: <span class="hljs-built_in">string</span>;<br>  email?: <span class="hljs-built_in">string</span>;<br>  createTime?: <span class="hljs-title class_">Date</span>;<br>  userStatus?: <span class="hljs-built_in">string</span>;<br>  userRole?: <span class="hljs-built_in">number</span>;<br>  planetCode?: <span class="hljs-built_in">string</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><h5 id="自定义一个用户对象，由于目前没有相关接口从后端拿取数据，给定一些假数据测试效果"><a href="#自定义一个用户对象，由于目前没有相关接口从后端拿取数据，给定一些假数据测试效果" class="headerlink" title="自定义一个用户对象，由于目前没有相关接口从后端拿取数据，给定一些假数据测试效果"></a>自定义一个用户对象，由于目前没有相关接口从后端拿取数据，给定一些假数据测试效果</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> user = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">userAccount</span>: <span class="hljs-string">&quot;memory&quot;</span>,<br>  <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;邓哈哈&quot;</span>,<br>  <span class="hljs-attr">avatarUrl</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  <span class="hljs-attr">phone</span>: <span class="hljs-string">&quot;18887786754&quot;</span>,<br>  <span class="hljs-attr">email</span>: <span class="hljs-string">&quot;3348407547@qq.com&quot;</span>,<br>  <span class="hljs-attr">planetCode</span>: <span class="hljs-string">&quot;17625&quot;</span>,<br>  <span class="hljs-attr">createTime</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><h5 id="对表单稍作修改，给表单列绑定数据模型，同时点击相关列后可以修改该项，并跳转至用户修改页"><a href="#对表单稍作修改，给表单列绑定数据模型，同时点击相关列后可以修改该项，并跳转至用户修改页" class="headerlink" title="对表单稍作修改，给表单列绑定数据模型，同时点击相关列后可以修改该项，并跳转至用户修改页"></a>对表单稍作修改，给表单列绑定数据模型，同时点击相关列后可以修改该项，并跳转至用户修改页</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- &lt;slot&gt; 个人 &lt;/slot&gt; --&gt;<br>  &lt;van-cell<br>    title=&quot;账号&quot;<br>    is-link<br>    to=&quot;/user/edit&quot;<br>    :value=&quot;user.userAccount&quot;<br>    @click=&quot;toEdit(&#x27;userAccount&#x27;, &#x27;账号&#x27;, user.userAccount)&quot;<br>  /&gt;<br>  &lt;van-cell<br>    title=&quot;昵称&quot;<br>    is-link<br>    to=&quot;/user/edit&quot;<br>    :value=&quot;user.username&quot;<br>    @click=&quot;toEdit(&#x27;username&#x27;, &#x27;昵称&#x27;, user.username)&quot;<br>  /&gt;<br>  &lt;van-cell<br>    title=&quot;头像&quot;<br>    is-link<br>    to=&quot;/user/edit&quot;<br>    :value=&quot;user.avatarUrl&quot;<br>    @click=&quot;toEdit(&#x27;avatarUrl&#x27;, &#x27;头像&#x27;, user.avatarUrl)&quot;<br>  /&gt;<br>  &lt;van-cell<br>    title=&quot;性别&quot;<br>    is-link<br>    to=&quot;/user/edit&quot;<br>    :value=&quot;user.gender&quot;<br>    @click=&quot;toEdit(&#x27;gender&#x27;, &#x27;性别&#x27;, user.gender)&quot;<br>  /&gt;<br>  &lt;van-cell<br>    title=&quot;电话&quot;<br>    is-link<br>    to=&quot;/user/edit&quot;<br>    :value=&quot;user.phone&quot;<br>    @click=&quot;toEdit(&#x27;phone&#x27;, &#x27;电话&#x27;, user.phone)&quot;<br>  /&gt;<br>  &lt;van-cell<br>    title=&quot;邮箱&quot;<br>    is-link<br>    to=&quot;/user/edit&quot;<br>    :value=&quot;user.email&quot;<br>    @click=&quot;toEdit(&#x27;email&#x27;, &#x27;邮箱&#x27;, user.email)&quot;<br>  /&gt;<br>  &lt;van-cell<br>    title=&quot;星球编号&quot;<br>    is-link<br>    to=&quot;/user/edit&quot;<br>    :value=&quot;user.planetCode&quot;<br>    @click=&quot;toEdit(&#x27;planetCode&#x27;, &#x27;星球编号&#x27;, user.planetCode)&quot;<br>  /&gt;<br>  &lt;van-cell<br>    title=&quot;注册时间&quot;<br>    is-link<br>    to=&quot;/user/edit&quot;<br>    :value=&quot;user.createTime.toISOString()&quot;<br>    @click=&quot;toEdit(&#x27;createTime&#x27;, &#x27;注册时间&#x27;, user.createTime.toISOString())&quot;<br>  /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h5 id="script下实现toEdit方法，携带相关参数并跳转至用户修改页下（路由我们前面写过了）"><a href="#script下实现toEdit方法，携带相关参数并跳转至用户修改页下（路由我们前面写过了）" class="headerlink" title="script下实现toEdit方法，携带相关参数并跳转至用户修改页下（路由我们前面写过了）"></a>script下实现toEdit方法，携带相关参数并跳转至用户修改页下（路由我们前面写过了）</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">toEdit</span> = (<span class="hljs-params">editKey: <span class="hljs-built_in">string</span>, editName: <span class="hljs-built_in">string</span>, currentValue: <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>  router.<span class="hljs-title function_">push</span>(&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/edit&quot;</span>,<br>    <span class="hljs-attr">query</span>: &#123;<br>      editKey,<br>      editName,<br>      currentValue,<br>    &#125;,<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="这个跳转并携带参数涉及到vue-Router的两个组件，非常重要，马上讲到👇"><a href="#这个跳转并携带参数涉及到vue-Router的两个组件，非常重要，马上讲到👇" class="headerlink" title="这个跳转并携带参数涉及到vue-Router的两个组件，非常重要，马上讲到👇"></a>这个跳转并携带参数涉及到vue-Router的两个组件，非常重要，马上讲到👇</h5><h1 id="用户信息修改页"><a href="#用户信息修改页" class="headerlink" title="用户信息修改页"></a>用户信息修改页</h1><ul><li><h5 id="跟前面同样的操作，引入相关组件-From表单"><a href="#跟前面同样的操作，引入相关组件-From表单" class="headerlink" title="跟前面同样的操作，引入相关组件   From表单"></a>跟前面同样的操作，引入相关组件   From表单</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;van-form @submit=&quot;onSubmit&quot;&gt;<br>  &lt;van-cell-group inset&gt;<br>    &lt;van-field<br>      v-model=&quot;username&quot;<br>      name=&quot;用户名&quot;<br>      label=&quot;用户名&quot;<br>      placeholder=&quot;用户名&quot;<br>    /&gt;<br>  &lt;/van-cell-group&gt;<br>  <br>  &lt;div style=&quot;margin: 16px;&quot;&gt;<br>    &lt;van-button round block type=&quot;primary&quot; native-type=&quot;submit&quot;&gt;<br>      提交<br>    &lt;/van-button&gt;<br>  &lt;/div&gt;<br>&lt;/van-form&gt;<br></code></pre></td></tr></table></figure><ul><li><h5 id="自定义一个修改后的用户信息对象"><a href="#自定义一个修改后的用户信息对象" class="headerlink" title="自定义一个修改后的用户信息对象"></a>自定义一个修改后的用户信息对象</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">editUser</span>: editUserType = <span class="hljs-title function_">ref</span>(&#123;<br>  <span class="hljs-attr">editKey</span>: route.<span class="hljs-property">query</span>.<span class="hljs-property">editKey</span>,<br>  <span class="hljs-attr">editName</span>: route.<span class="hljs-property">query</span>.<span class="hljs-property">editName</span>,<br>  <span class="hljs-attr">currentValue</span>: route.<span class="hljs-property">query</span>.<span class="hljs-property">currentValue</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><h5 id="修改一下表单，能不能实现用户编辑信息页的某项信息时，用户信息修改页正确显示"><a href="#修改一下表单，能不能实现用户编辑信息页的某项信息时，用户信息修改页正确显示" class="headerlink" title="修改一下表单，能不能实现用户编辑信息页的某项信息时，用户信息修改页正确显示"></a>修改一下表单，能不能实现用户编辑信息页的某项信息时，用户信息修改页正确显示</h5></li></ul><ul><li><h5 id="改成这样👇："><a href="#改成这样👇：" class="headerlink" title="改成这样👇："></a>改成这样👇：</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- &lt;slot&gt;用户编辑页&lt;/slot&gt; --&gt;<br> &lt;van-form @submit=&quot;onSubmit&quot;&gt;<br>   &lt;van-field<br>     v-model=&quot;editUser.currentValue&quot;<br>     :name=&quot;editUser.editKey&quot;<br>     :label=&quot;editUser.editName&quot;<br>     :placeholder=&quot;`$&#123;editUser.editKey&#125;`&quot;<br>   /&gt;<br><br>   &lt;div style=&quot;margin: 16px&quot;&gt;<br>     &lt;van-button<br>       round<br>       block<br>       type=&quot;primary&quot;<br>       native-type=&quot;submit&quot;<br>     &gt;<br>       提交<br>     &lt;/van-button&gt;<br>   &lt;/div&gt;<br> &lt;/van-form&gt;<br></code></pre></td></tr></table></figure><ul><li><h5 id="测试一下，完成功能！"><a href="#测试一下，完成功能！" class="headerlink" title="测试一下，完成功能！"></a>测试一下，完成功能！</h5></li></ul><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230402163407935.png" alt="image-20230402163407935"></p><ul><li><h5 id="什么原理呢？用户信息页的信息是怎样传到用户信息修改页并正确显示的呢？我们捋一捋："><a href="#什么原理呢？用户信息页的信息是怎样传到用户信息修改页并正确显示的呢？我们捋一捋：" class="headerlink" title="什么原理呢？用户信息页的信息是怎样传到用户信息修改页并正确显示的呢？我们捋一捋："></a>什么原理呢？用户信息页的信息是怎样传到用户信息修改页并正确显示的呢？我们捋一捋：</h5></li><li><h5 id="用户信息页我们写过这个："><a href="#用户信息页我们写过这个：" class="headerlink" title="用户信息页我们写过这个："></a>用户信息页我们写过这个：</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">toEdit</span> = (<span class="hljs-params">editKey: <span class="hljs-built_in">string</span>, editName: <span class="hljs-built_in">string</span>, currentValue: <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>  router.<span class="hljs-title function_">push</span>(&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/edit&quot;</span>,<br>    <span class="hljs-attr">query</span>: &#123;<br>      editKey,<br>      editName,<br>      currentValue,<br>    &#125;,<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><h5 id="干了什么？一句话：就是携带了参数-query-并跳转到了对应路由组件-“-user-edit”-里"><a href="#干了什么？一句话：就是携带了参数-query-并跳转到了对应路由组件-“-user-edit”-里" class="headerlink" title="干了什么？一句话：就是携带了参数 query 并跳转到了对应路由组件 “/user/edit” 里"></a>干了什么？一句话：就是携带了参数 query 并跳转到了对应路由组件 “/user/edit” 里</h5></li><li><h5 id="当然，组件-router-实现了这个功能"><a href="#当然，组件-router-实现了这个功能" class="headerlink" title="当然，组件 router 实现了这个功能"></a>当然，组件 router 实现了这个功能</h5></li><li><h5 id="那用户信心修改页呢，又干了什么？"><a href="#那用户信心修改页呢，又干了什么？" class="headerlink" title="那用户信心修改页呢，又干了什么？"></a>那用户信心修改页呢，又干了什么？</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">editUser</span>: editUserType = <span class="hljs-title function_">ref</span>(&#123;<br>  <span class="hljs-attr">editKey</span>: route.<span class="hljs-property">query</span>.<span class="hljs-property">editKey</span>,<br>  <span class="hljs-attr">editName</span>: route.<span class="hljs-property">query</span>.<span class="hljs-property">editName</span>,<br>  <span class="hljs-attr">currentValue</span>: route.<span class="hljs-property">query</span>.<span class="hljs-property">currentValue</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;van-field<br>      v-model=&quot;editUser.currentValue&quot;<br>      :name=&quot;editUser.editKey&quot;<br>      :label=&quot;editUser.editName&quot;<br>      :placeholder=&quot;`$&#123;editUser.editKey&#125;`&quot;<br>    /&gt;<br></code></pre></td></tr></table></figure><ul><li><h5 id="也是一句话：拿到了-当前路由组件下接收的参数-query-并在表单上-绑定了数据模型，同步显示了而已"><a href="#也是一句话：拿到了-当前路由组件下接收的参数-query-并在表单上-绑定了数据模型，同步显示了而已" class="headerlink" title="也是一句话：拿到了 当前路由组件下接收的参数 query , 并在表单上 绑定了数据模型，同步显示了而已"></a>也是一句话：拿到了 当前路由组件下接收的参数 query , 并在表单上 绑定了数据模型，同步显示了而已</h5></li><li><h5 id="当然，组件-route-实现了这个功能"><a href="#当然，组件-route-实现了这个功能" class="headerlink" title="当然，组件 route 实现了这个功能"></a>当然，组件 route 实现了这个功能</h5></li></ul><h1 id="Swagger-knif4j-自动生成接口文档"><a href="#Swagger-knif4j-自动生成接口文档" class="headerlink" title="Swagger + knif4j 自动生成接口文档"></a>Swagger + knif4j 自动生成接口文档</h1><h5 id="这里我们用knif4j，来到官方文档跟着快速操作即可"><a href="#这里我们用knif4j，来到官方文档跟着快速操作即可" class="headerlink" title="这里我们用knif4j，来到官方文档跟着快速操作即可"></a>这里我们用knif4j，来到官方文档跟着快速操作即可</h5><h5 id="第一步：创建Spring-Boot项目并且在pom-xml中引入Knife4j的依赖包，代码如下："><a href="#第一步：创建Spring-Boot项目并且在pom-xml中引入Knife4j的依赖包，代码如下：" class="headerlink" title="第一步：创建Spring Boot项目并且在pom.xml中引入Knife4j的依赖包，代码如下："></a>第一步：<a href="https://spring.io/guides/gs/spring-boot/">创建Spring Boot项目</a>并且在pom.xml中引入<a href="https://search.maven.org/search?q=g:com.github.xiaoymin">Knife4j的依赖包</a>，代码如下：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--引入Knife4j的官方start包,该指南选择Spring Boot版本&lt;<span class="hljs-number">3.0</span>,开发者需要注意--&gt;<br>      &lt;dependency&gt;<br>          &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;<br>          &lt;artifactId&gt;knife4j-openapi2-spring-boot-starter&lt;/artifactId&gt;<br>          &lt;version&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>      &lt;/dependency&gt;<br>  <br></code></pre></td></tr></table></figure><ul><li><h5 id="第二步：创建Swagger配置依赖，代码如下："><a href="#第二步：创建Swagger配置依赖，代码如下：" class="headerlink" title="第二步：创建Swagger配置依赖，代码如下："></a>第二步：创建Swagger配置依赖，代码如下：</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.memory.usercenter.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 邓哈哈</span><br><span class="hljs-comment"> * 2023/4/2 23:39</span><br><span class="hljs-comment"> * Function:</span><br><span class="hljs-comment"> * Version 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2WebMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Knife4jConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean(value = &quot;dockerBean&quot;)</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">dockerBean</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//指定使用Swagger2规范</span><br>        <span class="hljs-type">Docket</span> <span class="hljs-variable">docket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                        <span class="hljs-comment">//描述字段支持Markdown语法</span><br>                        .title(<span class="hljs-string">&quot;Memory用户中心&quot;</span>)<br>                        .description(<span class="hljs-string">&quot;# Memory用户中心接口文档&quot;</span>)<br>                        .termsOfServiceUrl(<span class="hljs-string">&quot;https://gitee.com/deng-2022/client-center&quot;</span>)<br>                        .contact(<span class="hljs-string">&quot;3348407547@qq.com&quot;</span>)<br>                        .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                        .build())<br>                <span class="hljs-comment">//分组名称</span><br>                .groupName(<span class="hljs-string">&quot;用户服务&quot;</span>)<br>                .select()<br>                <span class="hljs-comment">//这里指定Controller扫描包路径</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.memory.usercenter.controller&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build();<br>        <span class="hljs-keyword">return</span> docket;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><h5 id="然后启动项目即可"><a href="#然后启动项目即可" class="headerlink" title="然后启动项目即可"></a>然后启动项目即可</h5></li><li><h5 id="访问-http-localhost-8081-api-doc-html-成功自动生成接口文档！"><a href="#访问-http-localhost-8081-api-doc-html-成功自动生成接口文档！" class="headerlink" title="访问   http://localhost:8081/api/doc.html 成功自动生成接口文档！"></a>访问   <a href="http://localhost:8081/api/doc.html">http://localhost:8081/api/doc.html</a> 成功自动生成接口文档！</h5></li><li><h5 id="如果springBoot版本高于2-6，可能会有报错，这是因为-knif4j-不兼容现今高版本的springBoot，这里有两种解决办法："><a href="#如果springBoot版本高于2-6，可能会有报错，这是因为-knif4j-不兼容现今高版本的springBoot，这里有两种解决办法：" class="headerlink" title="如果springBoot版本高于2.6，可能会有报错，这是因为 knif4j 不兼容现今高版本的springBoot，这里有两种解决办法："></a>如果springBoot版本高于2.6，可能会有报错，这是因为 knif4j 不兼容现今高版本的springBoot，这里有两种解决办法：</h5></li></ul><ol><li><h5 id="降低springBoot的版本使其兼容knif4j（很不现实的解决方法，不推荐）"><a href="#降低springBoot的版本使其兼容knif4j（很不现实的解决方法，不推荐）" class="headerlink" title="降低springBoot的版本使其兼容knif4j（很不现实的解决方法，不推荐）"></a>降低springBoot的版本使其兼容knif4j（很不现实的解决方法，不推荐）</h5></li><li><h5 id="application-yaml文件里添加如下配置："><a href="#application-yaml文件里添加如下配置：" class="headerlink" title="application.yaml文件里添加如下配置："></a>application.yaml文件里添加如下配置：</h5></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br> <span class="hljs-attr">mvc:</span><br>      <span class="hljs-attr">pathmatch:</span><br>        <span class="hljs-attr">matching-strategy:</span> <span class="hljs-string">ANT_PATH_MATCHER</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="问题即可解决！"><a href="#问题即可解决！" class="headerlink" title="问题即可解决！"></a>问题即可解决！</h5></li><li><h6 id="这里还要注意Swagger文档不能随意暴露在外！可能会有不法分子利用该文档调用接口、泄露数据"><a href="#这里还要注意Swagger文档不能随意暴露在外！可能会有不法分子利用该文档调用接口、泄露数据" class="headerlink" title="这里还要注意Swagger文档不能随意暴露在外！可能会有不法分子利用该文档调用接口、泄露数据"></a>这里还要注意Swagger文档不能随意暴露在外！可能会有不法分子利用该文档调用接口、泄露数据</h6></li><li><h5 id="我们在application-yaml下定义开发环境："><a href="#我们在application-yaml下定义开发环境：" class="headerlink" title="我们在application.yaml下定义开发环境："></a>我们在application.yaml下定义开发环境：</h5></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="在knif4j配置前还可以配置-Profile，在指定开发环境下才会生成接口文档，否则访问失败"><a href="#在knif4j配置前还可以配置-Profile，在指定开发环境下才会生成接口文档，否则访问失败" class="headerlink" title="在knif4j配置前还可以配置@Profile，在指定开发环境下才会生成接口文档，否则访问失败"></a>在knif4j配置前还可以配置@Profile，在指定开发环境下才会生成接口文档，否则访问失败</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2WebMvc</span><br><span class="hljs-meta">@Profile(&#123;&quot;dev&quot;, &quot;test&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Knife4jConfiguration</span> &#123;<br>...........................<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="抓取网页信息"><a href="#抓取网页信息" class="headerlink" title="抓取网页信息"></a>抓取网页信息</h2><h3 id="从Excel表格中导入用户数据-gt-EasyExcel"><a href="#从Excel表格中导入用户数据-gt-EasyExcel" class="headerlink" title="从Excel表格中导入用户数据 -&gt; EasyExcel"></a>从Excel表格中导入用户数据 -&gt; EasyExcel</h3><ul><li><h5 id="看着官网，跟着操作即可-（在新增目录-once下）："><a href="#看着官网，跟着操作即可-（在新增目录-once下）：" class="headerlink" title="看着官网，跟着操作即可 （在新增目录/once下）："></a>看着官网，跟着操作即可 （在新增目录/once下）：</h5></li><li><h5 id="编写映射对象"><a href="#编写映射对象" class="headerlink" title="编写映射对象"></a>编写映射对象</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span> &#123;<br>    <span class="hljs-meta">@ExcelProperty(&quot;成员编号&quot;)</span><br>    <span class="hljs-keyword">private</span> String planetCode;<br><br><br>    <span class="hljs-meta">@ExcelProperty(&quot;成员昵称&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="编写监听器"><a href="#编写监听器" class="headerlink" title="编写监听器"></a>编写监听器</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 有个很重要的点 DemoDataListener 不能被spring管理，</span><br><span class="hljs-comment">// 要每次读取excel都要new,然后里面用到spring可以构造方法传进去</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TableListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ReadListener</span>&lt;UserInfo&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这个每一条数据解析都会来调用</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data    one row value. Is is same as &#123;<span class="hljs-doctag">@link</span> AnalysisContext#readRowHolder()&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(UserInfo data, AnalysisContext context)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 所有数据解析完成了 都会来调用</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext context)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;所有数据解析完成！&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="在-resources下导入一张Excel表格testExcel-xlsx"><a href="#在-resources下导入一张Excel表格testExcel-xlsx" class="headerlink" title="在/resources下导入一张Excel表格testExcel.xlsx"></a>在/resources下导入一张Excel表格testExcel.xlsx</h5></li><li><h5 id="读取表中数据，这里有两种方式"><a href="#读取表中数据，这里有两种方式" class="headerlink" title="读取表中数据，这里有两种方式:"></a>读取表中数据，这里有两种方式:</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImportExcel</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定列的下标或者列名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        readByListener();<br>        synchronousRead();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-使用监听器"><a href="#1-使用监听器" class="headerlink" title="1.使用监听器"></a>1.使用监听器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 监听器</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readByListener</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\Project\\星球项目\\ClientCenter\\user-center\\src\\main\\resources\\testExcel.xlsx&quot;</span>;<br>       <span class="hljs-comment">// 这里默认读取第一个sheet</span><br>       EasyExcel.read(fileName, UserInfo.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TableListener</span>()).sheet().doRead();<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="2-同步返回"><a href="#2-同步返回" class="headerlink" title="2.同步返回"></a>2.同步返回</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 同步的返回，不推荐使用，如果数据量大会把数据放到内存里面</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">synchronousRead</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\Project\\星球项目\\ClientCenter\\user-center\\src\\main\\resources\\testExcel.xlsx&quot;</span>;<br>       List&lt;UserInfo&gt; list = EasyExcel.read(fileName).head(UserInfo.class).sheet().doReadSync();<br>       <span class="hljs-keyword">for</span> (UserInfo data : list) &#123;<br>           log.info(<span class="hljs-string">&quot;读取到数据:&#123;&#125;&quot;</span>, data);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li><h6 id="要了解这两者的区别和优缺点，请移步至鱼皮的开发文档"><a href="#要了解这两者的区别和优缺点，请移步至鱼皮的开发文档" class="headerlink" title="要了解这两者的区别和优缺点，请移步至鱼皮的开发文档"></a>要了解这两者的区别和优缺点，请移步至鱼皮的开发文档</h6></li><li><h5 id="执行main方法，成功地读取到了Excel表的数据，如下"><a href="#执行main方法，成功地读取到了Excel表的数据，如下" class="headerlink" title="执行main方法，成功地读取到了Excel表的数据，如下"></a>执行main方法，成功地读取到了Excel表的数据，如下</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">22</span>:<span class="hljs-number">42</span>:<span class="hljs-number">23.479</span> [main] INFO com.memory.usercenter.once.ImportExcel - 读取到数据:UserInfo(planetCode=<span class="hljs-number">1</span>, username=邓哈哈)<br><span class="hljs-number">22</span>:<span class="hljs-number">42</span>:<span class="hljs-number">23.491</span> [main] INFO com.memory.usercenter.once.ImportExcel - 读取到数据:UserInfo(planetCode=<span class="hljs-number">2</span>, username=邓呵呵)<br><span class="hljs-number">22</span>:<span class="hljs-number">42</span>:<span class="hljs-number">23.491</span> [main] INFO com.memory.usercenter.once.ImportExcel - 读取到数据:UserInfo(planetCode=<span class="hljs-number">3</span>, username=邓嘻嘻)<br><span class="hljs-number">22</span>:<span class="hljs-number">42</span>:<span class="hljs-number">23.492</span> [main] INFO com.memory.usercenter.once.ImportExcel - 读取到数据:UserInfo(planetCode=<span class="hljs-number">4</span>, username=邓哇哇)<br><span class="hljs-number">22</span>:<span class="hljs-number">42</span>:<span class="hljs-number">23.492</span> [main] INFO com.memory.usercenter.once.ImportExcel - 读取到数据:UserInfo(planetCode=<span class="hljs-number">5</span>, username=邓几把)<br></code></pre></td></tr></table></figure><h2 id="完成根据标签搜索用户功能"><a href="#完成根据标签搜索用户功能" class="headerlink" title="完成根据标签搜索用户功能"></a>完成根据标签搜索用户功能</h2><ul><li><h5 id="搜索到的用户总得展示吧，那么我们先做一个用户列表页"><a href="#搜索到的用户总得展示吧，那么我们先做一个用户列表页" class="headerlink" title="搜索到的用户总得展示吧，那么我们先做一个用户列表页"></a>搜索到的用户总得展示吧，那么我们先做一个用户列表页</h5></li><li><h5 id="写一个搜索按钮，用来携带已选中标签信息，获取符合要求用户，并跳转到用户列表页展示-不要纠结样式"><a href="#写一个搜索按钮，用来携带已选中标签信息，获取符合要求用户，并跳转到用户列表页展示-不要纠结样式" class="headerlink" title="写一个搜索按钮，用来携带已选中标签信息，获取符合要求用户，并跳转到用户列表页展示,不要纠结样式"></a>写一个搜索按钮，用来携带已选中标签信息，获取符合要求用户，并跳转到用户列表页展示,不要纠结样式</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 搜索 --&gt;<br>&lt;van-button<br>  type=&quot;primary&quot;<br>  style=&quot;margin: 8px; padding: 20px&quot;<br>  @click=&quot;doSearch()&quot;<br>  &gt;搜索&lt;/van-button<br>&gt;<br></code></pre></td></tr></table></figure><ul><li><h5 id="先不谈发送请求，这里我们先实现跳转吧，很简单"><a href="#先不谈发送请求，这里我们先实现跳转吧，很简单" class="headerlink" title="先不谈发送请求，这里我们先实现跳转吧，很简单"></a>先不谈发送请求，这里我们先实现跳转吧，很简单</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 根据标签搜索, 向后台发送请求</span><br><span class="hljs-keyword">import</span> &#123; useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">doSearch</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  router.<span class="hljs-title function_">push</span>(&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/list&quot;</span>,<br>    <span class="hljs-attr">query</span>: &#123;<br>      <span class="hljs-attr">tags</span>: activeIds.<span class="hljs-property">value</span>,<br>    &#125;,<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><h5 id="开发用户列表页-（Card-商品卡片）"><a href="#开发用户列表页-（Card-商品卡片）" class="headerlink" title="开发用户列表页   （Card 商品卡片）"></a>开发用户列表页   （Card 商品卡片）</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;van-card<br>  num=<span class="hljs-string">&quot;2&quot;</span><br>  price=<span class="hljs-string">&quot;2.00&quot;</span><br>  desc=<span class="hljs-string">&quot;描述信息&quot;</span><br>  title=<span class="hljs-string">&quot;商品标题&quot;</span><br>  thumb=<span class="hljs-string">&quot;https://fastly.jsdelivr.net/npm/@vant/assets/ipad.jpeg&quot;</span><br>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">tags</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">van-tag</span> <span class="hljs-attr">plain</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">van-tag</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">van-tag</span> <span class="hljs-attr">plain</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">van-tag</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>&lt;/van-card&gt;<br><br></code></pre></td></tr></table></figure><ul><li><h5 id="这里再次console-log-打印一下，是可以拿到SearchPage页携带的选中的标签的"><a href="#这里再次console-log-打印一下，是可以拿到SearchPage页携带的选中的标签的" class="headerlink" title="这里再次console.log()打印一下，是可以拿到SearchPage页携带的选中的标签的"></a>这里再次console.log()打印一下，是可以拿到SearchPage页携带的选中的标签的</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">query</span>);<br></code></pre></td></tr></table></figure><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230404211104286.png" alt="image-20230404211104286"></p><ul><li><h5 id="筛选逻辑这里先不考虑，用假数据测试吧"><a href="#筛选逻辑这里先不考虑，用假数据测试吧" class="headerlink" title="筛选逻辑这里先不考虑，用假数据测试吧"></a>筛选逻辑这里先不考虑，用假数据测试吧</h5></li><li><h5 id="写个测试数据，也就是一个用户列表"><a href="#写个测试数据，也就是一个用户列表" class="headerlink" title="写个测试数据，也就是一个用户列表"></a>写个测试数据，也就是一个用户列表</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> users = [<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">userAccount</span>: <span class="hljs-string">&quot;memory&quot;</span>,<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;邓哈哈&quot;</span>,<br>    <span class="hljs-attr">avatarUrl</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>    <span class="hljs-attr">phone</span>: <span class="hljs-string">&quot;18887786754&quot;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&quot;3348407547@qq.com&quot;</span>,<br>    <span class="hljs-attr">planetCode</span>: <span class="hljs-string">&quot;17625&quot;</span>,<br>    <span class="hljs-attr">createTime</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),<br>    <span class="hljs-attr">profile</span>: <span class="hljs-string">&quot;这个用户很懒，什么也没写~&quot;</span>,<br>    <span class="hljs-attr">tags</span>: [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;emo&quot;</span>, <span class="hljs-string">&quot;努力中&quot;</span>],<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">userAccount</span>: <span class="hljs-string">&quot;memory&quot;</span>,<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;邓哈哈&quot;</span>,<br>    <span class="hljs-attr">avatarUrl</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>    <span class="hljs-attr">phone</span>: <span class="hljs-string">&quot;18887786754&quot;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&quot;3348407547@qq.com&quot;</span>,<br>    <span class="hljs-attr">planetCode</span>: <span class="hljs-string">&quot;17625&quot;</span>,<br>    <span class="hljs-attr">createTime</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),<br>    <span class="hljs-attr">profile</span>: <span class="hljs-string">&quot;这个用户很懒，什么也没写~&quot;</span>,<br>    <span class="hljs-attr">tags</span>: [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;emo&quot;</span>, <span class="hljs-string">&quot;努力中&quot;</span>],<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><ul><li><h5 id="稍微修改一下，遍历users拿到每一个user，再正确显示user的属性，自己看着设计样式吧"><a href="#稍微修改一下，遍历users拿到每一个user，再正确显示user的属性，自己看着设计样式吧" class="headerlink" title="稍微修改一下，遍历users拿到每一个user，再正确显示user的属性，自己看着设计样式吧"></a>稍微修改一下，遍历users拿到每一个user，再正确显示user的属性，自己看着设计样式吧</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;van-card<br>   v-for=&quot;user in users&quot;<br>   :tag=&quot;user.gender&quot;<br>   :title=&quot;`$&#123;user.userAccount&#125; $&#123;user.username&#125; $&#123;user.planetCode&#125;`&quot;<br>   :desc=&quot;user.profile&quot;<br>   thumb=&quot;https://fastly.jsdelivr.net/npm/@vant/assets/ipad.jpeg&quot;<br> &gt;<br>   &lt;template #tags&gt;<br>     &lt;van-tag<br>       plain<br>       type=&quot;primary&quot;<br>       v-for=&quot;tag in user.tags&quot;<br>       style=&quot;margin-right: 3px; margin-top: 3px&quot;<br>     &gt;<br>       &#123;&#123; tag &#125;&#125;<br>     &lt;/van-tag&gt;<br>   &lt;/template&gt;<br>   &lt;template #footer&gt;<br>     &lt;van-button size=&quot;mini&quot;&gt;联系我&lt;/van-button&gt;<br>   &lt;/template&gt;<br> &lt;/van-card&gt;<br></code></pre></td></tr></table></figure><ul><li><h5 id="测试代码，开发完成"><a href="#测试代码，开发完成" class="headerlink" title="测试代码，开发完成"></a>测试代码，开发完成</h5></li></ul><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230404211229967.png" alt="image-20230404211229967"></p><ul><li><h5 id="接下来就是打通前后端，实现根据标签搜索用户"><a href="#接下来就是打通前后端，实现根据标签搜索用户" class="headerlink" title="接下来就是打通前后端，实现根据标签搜索用户"></a>接下来就是打通前后端，实现根据标签搜索用户</h5></li></ul><h2 id="编写根据标签搜索用户的接口"><a href="#编写根据标签搜索用户的接口" class="headerlink" title="编写根据标签搜索用户的接口"></a>编写根据标签搜索用户的接口</h2><ul><li><h5 id="编写接口之前，我们在表user中添加新字段-profile"><a href="#编写接口之前，我们在表user中添加新字段-profile" class="headerlink" title="编写接口之前，我们在表user中添加新字段 profile"></a>编写接口之前，我们在表user中添加新字段 profile</h5></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- auto-generated definition</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">user</span><br>(<br>    id            <span class="hljs-type">bigint</span>                                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;id&#x27;</span><br>        <span class="hljs-keyword">primary</span> key,<br>    user_account  <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;账号&#x27;</span>,<br>    username      <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;昵称&#x27;</span>,<br>    user_password <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>)                           <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br>    avatar_url    <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;头像&#x27;</span>,<br>    gender        <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span>               <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>    phone         <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;电话&#x27;</span>,<br>    email         <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>    user_status   <span class="hljs-type">int</span>          <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;状态 0 - 正常&#x27;</span>,<br>    create_time   datetime     <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    update_time   datetime     <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    is_delete     tinyint      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否删除 0 - 正常&#x27;</span>,<br>    user_role     <span class="hljs-type">int</span>(<span class="hljs-number">1</span>)       <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户权限 0 - 管理员 1 - 普通用户&#x27;</span>,<br>    planet_code   <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                           <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;星球编号&#x27;</span>,<br>    profile       <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;这个用户很懒，什么也没写~&#x27;</span>   <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户描述&#x27;</span>,<br>    tags          <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>)                          <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;标签&#x27;</span><br>)<br>    comment <span class="hljs-string">&#x27;用户&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li><h6 id="记得修改几处地方，这里就不一一演示了：-model-User，userMapper-xml，service下的-getSafetyUser-方法"><a href="#记得修改几处地方，这里就不一一演示了：-model-User，userMapper-xml，service下的-getSafetyUser-方法" class="headerlink" title="记得修改几处地方，这里就不一一演示了：/model/User，userMapper.xml，service下的 getSafetyUser()方法"></a>记得修改几处地方，这里就不一一演示了：/model/User，userMapper.xml，service下的 getSafetyUser()方法</h6></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 标签列表</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> tagNameList</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@GetMapping(&quot;/search/tags&quot;)</span><br>  <span class="hljs-keyword">public</span> BaseResponse&lt;List&lt;User&gt;&gt; <span class="hljs-title function_">searchByTags</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;String&gt; tagNameList)</span> &#123;<br>      <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(tagNameList))<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(PARMS_ERROR);<br><br>      List&lt;User&gt; userList = userService.searchUserByTags(tagNameList);<br>      <span class="hljs-keyword">return</span> ResultUtils.success(userList);<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="接下来我们要在前端页面发送请求了，跟着官网来，安装axios"><a href="#接下来我们要在前端页面发送请求了，跟着官网来，安装axios" class="headerlink" title="接下来我们要在前端页面发送请求了，跟着官网来，安装axios"></a>接下来我们要在前端页面发送请求了，跟着官网来，安装axios</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">yarn add axios<br></code></pre></td></tr></table></figure><ul><li><h5 id="在-plugins-myAxios-ts下配置-myAxios-和请求拦截器、响应拦截器，"><a href="#在-plugins-myAxios-ts下配置-myAxios-和请求拦截器、响应拦截器，" class="headerlink" title="在/plugins/myAxios.ts下配置 myAxios 和请求拦截器、响应拦截器，"></a>在/plugins/myAxios.ts下配置 myAxios 和请求拦截器、响应拦截器，</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-comment">// Set config defaults when creating the instance</span><br><span class="hljs-keyword">const</span> myAxios = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;http://localhost:8081/api&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 添加请求拦截器</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我他妈发请求了<span class="hljs-subst">$&#123;config&#125;</span>`</span>);<br>    <span class="hljs-comment">// 在发送请求之前做些什么</span><br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// 对请求错误做些什么</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 添加响应拦截器</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我他妈响应了 <span class="hljs-subst">$&#123;response&#125;</span>`</span>);<br>    <span class="hljs-comment">// 对响应数据做点什么</span><br>    <span class="hljs-keyword">return</span> response;<br>  &#125;,<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// 对响应错误做点什么</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> myAxios;<br></code></pre></td></tr></table></figure><ul><li><h5 id="在userListPage-vue下写个钩子函数，发送请求到后端"><a href="#在userListPage-vue下写个钩子函数，发送请求到后端" class="headerlink" title="在userListPage.vue下写个钩子函数，发送请求到后端"></a>在userListPage.vue下写个钩子函数，发送请求到后端</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; onMounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">import</span> myAxios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../plugins/myAxios&quot;</span>;<br><span class="hljs-keyword">import</span> qs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;qs&quot;</span>;<br><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>();<br>  <span class="hljs-keyword">const</span> &#123; tags &#125; = route.<span class="hljs-property">query</span>;<br>  <span class="hljs-comment">// 上面的请求也可以这样做</span><br>  myAxios<br>    .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user/search/tags&quot;</span>, &#123;<br>      <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">tagNameList</span>: tags,<br>      &#125;,<br>      <span class="hljs-attr">paramsSerializer</span>: &#123;<br>        <span class="hljs-attr">serialize</span>: <span class="hljs-function">(<span class="hljs-params">params</span>) =&gt;</span> qs.<span class="hljs-title function_">stringify</span>(params, &#123; <span class="hljs-attr">indices</span>: <span class="hljs-literal">false</span> &#125;),<br>      &#125;,<br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><h5 id="简单介绍一下运作原理"><a href="#简单介绍一下运作原理" class="headerlink" title="简单介绍一下运作原理"></a>简单介绍一下运作原理</h5></li><li><h5 id="钩子函数不用多废话了"><a href="#钩子函数不用多废话了" class="headerlink" title="钩子函数不用多废话了"></a>钩子函数不用多废话了</h5></li><li><h5 id="引入我们的myAxios，发送请求，语法要熟悉"><a href="#引入我们的myAxios，发送请求，语法要熟悉" class="headerlink" title="引入我们的myAxios，发送请求，语法要熟悉"></a>引入我们的myAxios，发送请求，语法要熟悉</h5></li><li><h5 id="引入-userRoute，拿到searchPage页携带的标签列表，语法要熟悉"><a href="#引入-userRoute，拿到searchPage页携带的标签列表，语法要熟悉" class="headerlink" title="引入 userRoute，拿到searchPage页携带的标签列表，语法要熟悉"></a>引入 userRoute，拿到searchPage页携带的标签列表，语法要熟悉</h5></li><li><h5 id="然后就是引入-qs-可以正确地在axios请求中携带数组参数发送到后端，详情还需去百度了解"><a href="#然后就是引入-qs-可以正确地在axios请求中携带数组参数发送到后端，详情还需去百度了解" class="headerlink" title="然后就是引入 qs , 可以正确地在axios请求中携带数组参数发送到后端，详情还需去百度了解"></a>然后就是引入 qs , 可以正确地在axios请求中携带数组参数发送到后端，详情还需去百度了解</h5></li><li><p>这里我还踩了两个坑，补充说明一下吧：</p></li></ul><ol><li><h5 id="axios配置baseURL时，我给配成了-“https-localhost-8081-api-quot-，把http写成了https，导致响应状态码一直是500，唉"><a href="#axios配置baseURL时，我给配成了-“https-localhost-8081-api-quot-，把http写成了https，导致响应状态码一直是500，唉" class="headerlink" title="axios配置baseURL时，我给配成了 “https://localhost:8081/api&quot;，把http写成了https，导致响应状态码一直是500，唉"></a>axios配置baseURL时，我给配成了 “<a href="https://localhost:8081/api&quot;%EF%BC%8C%E6%8A%8Ahttp%E5%86%99%E6%88%90%E4%BA%86https%EF%BC%8C%E5%AF%BC%E8%87%B4%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81%E4%B8%80%E7%9B%B4%E6%98%AF500%EF%BC%8C%E5%94%89">https://localhost:8081/api&quot;，把http写成了https，导致响应状态码一直是500，唉</a></h5></li><li><h5 id="然后就是-qs-了，坑死我了，先介绍一下-qs-引入流程："><a href="#然后就是-qs-了，坑死我了，先介绍一下-qs-引入流程：" class="headerlink" title="然后就是 qs 了，坑死我了，先介绍一下 qs 引入流程："></a>然后就是 qs 了，坑死我了，先介绍一下 qs 引入流程：</h5></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">yarn add qs<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> qs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;qs&quot;</span>;<br><br><span class="hljs-comment">// 旧版</span><br><span class="hljs-attr">paramsSerializer</span>: <span class="hljs-function">(<span class="hljs-params">params</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> qs.<span class="hljs-title function_">stringify</span>(params, &#123;<span class="hljs-attr">arrayFormat</span>: <span class="hljs-string">&#x27;repeat&#x27;</span>&#125;)<br>&#125;<br><br><span class="hljs-comment">// 新版</span><br><span class="hljs-attr">paramsSerializer</span>: &#123;<br>        <span class="hljs-attr">serialize</span>: <span class="hljs-function">(<span class="hljs-params">params</span>) =&gt;</span> qs.<span class="hljs-title function_">stringify</span>(params, &#123; <span class="hljs-attr">indices</span>: <span class="hljs-literal">false</span> &#125;),<br>      &#125;,<br></code></pre></td></tr></table></figure><ul><li><h5 id="我他妈就用了旧版，半天都不能正确发送请求，那用户列表页还他么卡死"><a href="#我他妈就用了旧版，半天都不能正确发送请求，那用户列表页还他么卡死" class="headerlink" title="我他妈就用了旧版，半天都不能正确发送请求，那用户列表页还他么卡死"></a>我他妈就用了旧版，半天都不能正确发送请求，那用户列表页还他么卡死</h5></li><li><h5 id="好了，请求成功发送了"><a href="#好了，请求成功发送了" class="headerlink" title="好了，请求成功发送了"></a>好了，请求成功发送了</h5></li></ul><h2 id="打通前后端查询用户"><a href="#打通前后端查询用户" class="headerlink" title="打通前后端查询用户"></a>打通前后端查询用户</h2><ul><li><h5 id="发送请求成功后，后端接口成功返回包含对应标签的用户（具体逻辑实现看-gt-后端接口开发）"><a href="#发送请求成功后，后端接口成功返回包含对应标签的用户（具体逻辑实现看-gt-后端接口开发）" class="headerlink" title="发送请求成功后，后端接口成功返回包含对应标签的用户（具体逻辑实现看 =&gt; 后端接口开发）"></a>发送请求成功后，后端接口成功返回包含对应标签的用户（具体逻辑实现看 =&gt; 后端接口开发）</h5></li><li><h5 id="发送请求逻辑我们已经写好了，接下来就是响应后端发回数据的逻辑了"><a href="#发送请求逻辑我们已经写好了，接下来就是响应后端发回数据的逻辑了" class="headerlink" title="发送请求逻辑我们已经写好了，接下来就是响应后端发回数据的逻辑了"></a>发送请求逻辑我们已经写好了，接下来就是响应后端发回数据的逻辑了</h5></li><li><h5 id="我们在钩子函数前后写上："><a href="#我们在钩子函数前后写上：" class="headerlink" title="我们在钩子函数前后写上："></a>我们在钩子函数前后写上：</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>();<br><span class="hljs-keyword">const</span> &#123; tags &#125; = route.<span class="hljs-property">query</span>;<br><span class="hljs-keyword">const</span> userList = <span class="hljs-title function_">ref</span>([]);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">onMounted</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-comment">// 响应数据</span><br>  <span class="hljs-keyword">const</span> userListData = <span class="hljs-keyword">await</span> myAxios<br>    .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user/search/tags&quot;</span>, &#123;<br>      <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">tagNameList</span>: tags,<br>      &#125;,<br>      <span class="hljs-attr">paramsSerializer</span>: &#123;<br>        <span class="hljs-attr">serialize</span>: <span class="hljs-function">(<span class="hljs-params">params</span>) =&gt;</span> qs.<span class="hljs-title function_">stringify</span>(params, &#123; <span class="hljs-attr">indices</span>: <span class="hljs-literal">false</span> &#125;),<br>      &#125;,<br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>        <span class="hljs-comment">// 返回响应数据（用户列表）</span><br>      <span class="hljs-keyword">return</span> response.<span class="hljs-property">data</span>?.<span class="hljs-property">data</span>;<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>    &#125;);<br><br>  <span class="hljs-keyword">if</span> (userListData) &#123;<br>    userListData.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">user: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (user.<span class="hljs-property">gender</span> == <span class="hljs-number">1</span>) user.<span class="hljs-property">gender</span> = <span class="hljs-string">&quot;男&quot;</span>;<br>      <span class="hljs-keyword">if</span> (user.<span class="hljs-property">gender</span> == <span class="hljs-number">0</span>) user.<span class="hljs-property">gender</span> = <span class="hljs-string">&quot;女&quot;</span>;<br><br>      <span class="hljs-keyword">if</span> (user.<span class="hljs-property">tags</span>) user.<span class="hljs-property">tags</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(user.<span class="hljs-property">tags</span>);<br>    &#125;);<br>  &#125;<br>  userList.<span class="hljs-property">value</span> = userListData;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><h5 id="这块儿实现了什么逻辑呢，简单讲讲："><a href="#这块儿实现了什么逻辑呢，简单讲讲：" class="headerlink" title="这块儿实现了什么逻辑呢，简单讲讲："></a>这块儿实现了什么逻辑呢，简单讲讲：</h5></li></ul><ol><li><h5 id="返回了响应数据，返回的用户列表是Json字符串，我们把它序列化为列表-userList"><a href="#返回了响应数据，返回的用户列表是Json字符串，我们把它序列化为列表-userList" class="headerlink" title="返回了响应数据，返回的用户列表是Json字符串，我们把它序列化为列表 userList"></a>返回了响应数据，返回的用户列表是Json字符串，我们把它序列化为列表 userList</h5></li><li><h5 id="将用户信息中的性别显示为-‘男’-‘女’"><a href="#将用户信息中的性别显示为-‘男’-‘女’" class="headerlink" title="将用户信息中的性别显示为 ‘男’  ‘女’"></a>将用户信息中的性别显示为 ‘男’  ‘女’</h5></li></ol><ul><li><h5 id="再修改一下表数据，之前我们用的是假数据"><a href="#再修改一下表数据，之前我们用的是假数据" class="headerlink" title="再修改一下表数据，之前我们用的是假数据"></a>再修改一下表数据，之前我们用的是假数据</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;van-card<br>   v-for=&quot;user in userList&quot;<br>   :tag=&quot;`$&#123;user.gender&#125;`&quot;<br>   :title=&quot;`$&#123;user.userAccount&#125; $&#123;user.username&#125; $&#123;user.planetCode&#125;`&quot;<br>   :desc=&quot;user.profile&quot;<br>   thumb=&quot;https://fastly.jsdelivr.net/npm/@vant/assets/ipad.jpeg&quot;<br> &gt;<br></code></pre></td></tr></table></figure><ul><li><h5 id="好极了，我们根据-‘男’-标签，搜索用户，得到了正确结果"><a href="#好极了，我们根据-‘男’-标签，搜索用户，得到了正确结果" class="headerlink" title="好极了，我们根据 ‘男’ 标签，搜索用户，得到了正确结果"></a>好极了，我们根据 ‘男’ 标签，搜索用户，得到了正确结果</h5></li></ul><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230405150346771.png" alt="image-20230405150346771"></p><h2 id="Session共享实现"><a href="#Session共享实现" class="headerlink" title="Session共享实现"></a>Session共享实现</h2><ul><li><h5 id="用来实现在多台服务器之间共享登录态"><a href="#用来实现在多台服务器之间共享登录态" class="headerlink" title="用来实现在多台服务器之间共享登录态"></a>用来实现在多台服务器之间共享登录态</h5></li><li><h5 id="安装redis-Redis-5-0-14-下载："><a href="#安装redis-Redis-5-0-14-下载：" class="headerlink" title="安装redis  Redis 5.0.14 下载："></a>安装redis  Redis 5.0.14 下载：</h5></li></ul><h5 id="链接：https-pan-baidu-com-s-1XcsAIrdeesQAyQU2lE3cOg"><a href="#链接：https-pan-baidu-com-s-1XcsAIrdeesQAyQU2lE3cOg" class="headerlink" title="链接：https://pan.baidu.com/s/1XcsAIrdeesQAyQU2lE3cOg"></a>链接：<a href="https://pan.baidu.com/s/1XcsAIrdeesQAyQU2lE3cOg">https://pan.baidu.com/s/1XcsAIrdeesQAyQU2lE3cOg</a></h5><h5 id="提取码：vkoi"><a href="#提取码：vkoi" class="headerlink" title="提取码：vkoi"></a>提取码：vkoi</h5><ul><li><h5 id="安装quick-redis"><a href="#安装quick-redis" class="headerlink" title="安装quick-redis"></a>安装quick-redis</h5></li></ul><h5 id="quick-redis：https-quick123-net"><a href="#quick-redis：https-quick123-net" class="headerlink" title="quick redis：https://quick123.net/"></a>quick redis：<a href="https://quick123.net/">https://quick123.net/</a></h5><ul><li><h5 id="引入redis，能够操作-redis："><a href="#引入redis，能够操作-redis：" class="headerlink" title="引入redis，能够操作 redis："></a>引入redis，能够操作 redis：</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- https:<span class="hljs-comment">//mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis --&gt;</span><br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">2.6</span><span class="hljs-number">.4</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><ul><li><h5 id="引入-spring-session-和-redis-的整合-使得自动将-session-存储到-redis-中："><a href="#引入-spring-session-和-redis-的整合-使得自动将-session-存储到-redis-中：" class="headerlink" title="引入 spring-session 和 redis 的整合    使得自动将 session 存储到 redis 中："></a>引入 spring-session 和 redis 的整合    使得自动将 session 存储到 redis 中：</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- https:<span class="hljs-comment">//mvnrepository.com/artifact/org.springframework.session/spring-session-data-redis --&gt;</span><br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">2.6</span><span class="hljs-number">.3</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><ul><li><h5 id="修改-spring-session-存储配置-spring-session-store-type"><a href="#修改-spring-session-存储配置-spring-session-store-type" class="headerlink" title="修改 spring-session 存储配置 spring.session.store-type"></a>修改 spring-session 存储配置 <code>spring.session.store-type</code></h5></li><li><h5 id="默认是-none，表示存储在单台服务器"><a href="#默认是-none，表示存储在单台服务器" class="headerlink" title="默认是 none，表示存储在单台服务器"></a>默认是 none，表示存储在单台服务器</h5></li><li><h5 id="store-type-redis，表示从-redis-读写-session"><a href="#store-type-redis，表示从-redis-读写-session" class="headerlink" title="store-type: redis，表示从 redis 读写 session"></a>store-type: redis，表示从 redis 读写 session</h5></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-comment"># session 失效时间(分钟)</span><br><span class="hljs-attr">session:</span><br>  <span class="hljs-attr">timeout:</span> <span class="hljs-number">86640</span><br>  <span class="hljs-attr">store-type:</span> <span class="hljs-string">redis</span><br><span class="hljs-comment"># redis 配置</span><br><span class="hljs-attr">redis:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="完成"><a href="#完成" class="headerlink" title="完成!"></a>完成!</h5></li><li><h5 id="现在登录态已经可以写入redis了，还是共享的"><a href="#现在登录态已经可以写入redis了，还是共享的" class="headerlink" title="现在登录态已经可以写入redis了，还是共享的"></a>现在登录态已经可以写入redis了，还是共享的</h5></li></ul><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230405204848156.png" alt="image-20230405204848156"></p><ul><li><h5 id="接下来就要实现用户登录、用户信息展示、修改用户信息，但涉及到了跨域问题"><a href="#接下来就要实现用户登录、用户信息展示、修改用户信息，但涉及到了跨域问题" class="headerlink" title="接下来就要实现用户登录、用户信息展示、修改用户信息，但涉及到了跨域问题"></a>接下来就要实现用户登录、用户信息展示、修改用户信息，但涉及到了跨域问题</h5></li><li><h5 id="这块login后，后端种下了session，但axios发送请求时，老是携带不到cookie，getCurrentUser-获取不到当前用户登录态"><a href="#这块login后，后端种下了session，但axios发送请求时，老是携带不到cookie，getCurrentUser-获取不到当前用户登录态" class="headerlink" title="这块login后，后端种下了session，但axios发送请求时，老是携带不到cookie，getCurrentUser()获取不到当前用户登录态"></a>这块login后，后端种下了session，但axios发送请求时，老是携带不到cookie，getCurrentUser()获取不到当前用户登录态</h5></li><li><h5 id="先做后边的功能吧，这一块儿我再研究研究，这个跨域携带cookie好像挺难搞定"><a href="#先做后边的功能吧，这一块儿我再研究研究，这个跨域携带cookie好像挺难搞定" class="headerlink" title="先做后边的功能吧，这一块儿我再研究研究，这个跨域携带cookie好像挺难搞定"></a>先做后边的功能吧，这一块儿我再研究研究，这个跨域携带cookie好像挺难搞定</h5></li><li><h5 id="axios不能成功携带cookie的话，上面的需求都做不了"><a href="#axios不能成功携带cookie的话，上面的需求都做不了" class="headerlink" title="axios不能成功携带cookie的话，上面的需求都做不了"></a>axios不能成功携带cookie的话，上面的需求都做不了</h5></li><li><h5 id="三天后老子回来了，爷爷解决问题了！那么接下来，就让我捋一捋这个周末都学到了些什么吧！"><a href="#三天后老子回来了，爷爷解决问题了！那么接下来，就让我捋一捋这个周末都学到了些什么吧！" class="headerlink" title="三天后老子回来了，爷爷解决问题了！那么接下来，就让我捋一捋这个周末都学到了些什么吧！"></a>三天后老子回来了，爷爷解决问题了！那么接下来，就让我捋一捋这个周末都学到了些什么吧！</h5></li></ul><h2 id="编写修改用户信息接口"><a href="#编写修改用户信息接口" class="headerlink" title="编写修改用户信息接口"></a>编写修改用户信息接口</h2><ul><li><h5 id="后端-service层"><a href="#后端-service层" class="headerlink" title="后端    service层"></a>后端    service层</h5></li><li><h5 id="实现思路："><a href="#实现思路：" class="headerlink" title="实现思路："></a>实现思路：</h5></li><li><h5 id="管理员修改用户接口"><a href="#管理员修改用户接口" class="headerlink" title="管理员修改用户接口"></a>管理员修改用户接口</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 管理员修改用户信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">userUpdateByAdmin</span><span class="hljs-params">(User user)</span> &#123;<br>        userMapper.updateById(user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;修改信息成功&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="用户普通用户修改用户接口"><a href="#用户普通用户修改用户接口" class="headerlink" title="用户普通用户修改用户接口"></a>用户普通用户修改用户接口</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 修改用户信息</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> user      要修改的用户</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> loginUser 当前登录用户</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> 修改接过信息</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">userUpdate</span><span class="hljs-params">(User user, User loginUser)</span> &#123;<br>       <span class="hljs-comment">// 1.1.校验管理员权限</span><br>       <span class="hljs-keyword">if</span> (isAdmin(loginUser)) &#123;<br>           <span class="hljs-comment">// 1.2.如果是管理员, 就跳转到管理员修改用户接口, 执行修改并返回结果</span><br>           <span class="hljs-keyword">return</span> userUpdateByAdmin(user);<br>       &#125;<br><br>       <span class="hljs-comment">// 1.3.非管理员, 就执行普通用户修改用户方法</span><br>       <span class="hljs-comment">// 根据传回来的id, 判断当前用户是否为要修改的用户</span><br>       <span class="hljs-keyword">if</span> (!loginUser.getId().equals(user.getId()))<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(NO_AUTH);<br><br>       userMapper.updateById(user);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;修改信息成功&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="这里我们在service层封装了两个-isAdmin-方法"><a href="#这里我们在service层封装了两个-isAdmin-方法" class="headerlink" title="这里我们在service层封装了两个 isAdmin() 方法"></a>这里我们在service层封装了两个 isAdmin() 方法</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> loginUser 校验的用户</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 校验成功与否(t / f)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">isAdmin</span><span class="hljs-params">(User loginUser)</span> &#123;<br>      <span class="hljs-comment">//校验是否为管理员</span><br>      <span class="hljs-keyword">return</span> loginUser != <span class="hljs-literal">null</span> &amp;&amp; loginUser.getUserRole() == ADMIN_ROLE;<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 校验是否为管理员</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> request request</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> 校验成功与否(t / f)</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">isAdmin</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>       <span class="hljs-comment">//校验是否为管理员</span><br>       <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) request.getSession().getAttribute(USER_LOGIN_STATE);<br>       <span class="hljs-keyword">return</span> user != <span class="hljs-literal">null</span> &amp;&amp; user.getUserRole() == ADMIN_ROLE;<br>   &#125;<br><br></code></pre></td></tr></table></figure><ul><li><h5 id="顺带的，我们整理了所有的-controller层-和-service层的代码，最终呈现出统一格式："><a href="#顺带的，我们整理了所有的-controller层-和-service层的代码，最终呈现出统一格式：" class="headerlink" title="顺带的，我们整理了所有的 controller层 和 service层的代码，最终呈现出统一格式："></a>顺带的，我们整理了所有的 controller层 和 service层的代码，最终呈现出统一格式：</h5></li><li><h5 id="controller-层负责：简单校验参数-—-gt-调用service层的接口代码-—-gt-通用返回结果"><a href="#controller-层负责：简单校验参数-—-gt-调用service层的接口代码-—-gt-通用返回结果" class="headerlink" title="controller 层负责：简单校验参数 —&gt; 调用service层的接口代码 —&gt;通用返回结果"></a>controller 层负责：简单校验参数 —&gt; 调用service层的接口代码 —&gt;通用返回结果</h5></li><li><h5 id="service-层负责：实现全部的业务逻辑代码"><a href="#service-层负责：实现全部的业务逻辑代码" class="headerlink" title="service 层负责：实现全部的业务逻辑代码"></a>service 层负责：实现全部的业务逻辑代码</h5></li><li><h5 id="整个项目结构就变得很清晰了，那我们简单展示一下现在的-项目结构-和-代码规范-吧："><a href="#整个项目结构就变得很清晰了，那我们简单展示一下现在的-项目结构-和-代码规范-吧：" class="headerlink" title="整个项目结构就变得很清晰了，那我们简单展示一下现在的 项目结构 和 代码规范 吧："></a>整个项目结构就变得很清晰了，那我们简单展示一下现在的 项目结构 和 代码规范 吧：</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java">项目结构<br>|_ main<br>|_ java<br>|_ com.memory.usercenter<br>|_ common<br>    |_ BaseResponse.java<br>    |_ ErrorCode.java<br>    |_JacksonObjectMapper.java<br>    |_ ResultUtils.java<br>|_ config<br>    |_ Knif4jConfiguration.java<br>    |_ MyIntercepter.java<br>   |_ WebConfig.java<br>|_ constant<br>    |_ UserConstant.java<br>    |_ controller<br>    |_UserCtroller.java<br>|_ exception<br>    |_ BusinessException.java<br>    |_ GlobalExceptionHandler.java<br>|_ mapper<br>    |_ UserMapper.java<br>|_ model<br>    |_ request<br>    |_ UserLoginRequest.java<br>    |_ UserRegisterRequest.java<br>    |_ User<br>|_ once<br>    |_ ImportExcel.java<br>    |_ InsertUser.java<br>    |_ TableListener.java<br>    |_UserInfo.java<br>|_ service<br>    |_ impl<br>    |_ UserServiceImpl.java<br>    |_ UserService.java<br>|_ util<br>|_ UserCenterApplication.java<br>|_ resources<br>|_ mapper <br>    |_ UserMapper.xml<br>|_ application.yaml<br>|_ testExcel.xlsx<br>|_ test<br>|_ java<br>    |_ com.memory.usercenter<br>    ...................<br>|_ target<br>|_ pom.xml<br></code></pre></td></tr></table></figure><ul><li><h5 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h5></li><li><h5 id="修改用户信息，我们提到了要校验在线用户权限对吧，这个在线用户登录态我们在用户中心里做过，但伙伴匹配还未实现，所以在实现接下来，我们先实现登录和记录用户登录态功能"><a href="#修改用户信息，我们提到了要校验在线用户权限对吧，这个在线用户登录态我们在用户中心里做过，但伙伴匹配还未实现，所以在实现接下来，我们先实现登录和记录用户登录态功能" class="headerlink" title="修改用户信息，我们提到了要校验在线用户权限对吧，这个在线用户登录态我们在用户中心里做过，但伙伴匹配还未实现，所以在实现接下来，我们先实现登录和记录用户登录态功能"></a>修改用户信息，我们提到了要校验在线用户权限对吧，这个在线用户登录态我们在用户中心里做过，但伙伴匹配还未实现，所以在实现接下来，我们先实现登录和记录用户登录态功能</h5></li><li><h5 id="添加登录页路由"><a href="#添加登录页路由" class="headerlink" title="添加登录页路由"></a>添加登录页路由</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">UserLoginPage</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/UserLoginPage.vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">IndexPage</span> &#125;, <span class="hljs-comment">// 主页</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/team&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">TeamPage</span> &#125;, <span class="hljs-comment">// 队伍页</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserPage</span> &#125;, <span class="hljs-comment">// 个人页</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/search&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">SearchPage</span> &#125;, <span class="hljs-comment">// 搜索页</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/edit&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserEditPage</span> &#125;, <span class="hljs-comment">// 用户信息修改页</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/list&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserListPage</span> &#125;, <span class="hljs-comment">// 用户列表页</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/login&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserLoginPage</span> &#125;, <span class="hljs-comment">// 用户登录页</span><br>];<br></code></pre></td></tr></table></figure><h5 id="借助组件开发用户登录页-Form表单"><a href="#借助组件开发用户登录页-Form表单" class="headerlink" title="借助组件开发用户登录页  Form表单"></a>借助组件开发用户登录页  Form表单</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;van-form @submit=&quot;onSubmit&quot;&gt;<br>    &lt;van-cell-group inset&gt;<br>      &lt;van-field<br>        v-model=&quot;userAccount&quot;<br>        name=&quot;用户名&quot;<br>        label=&quot;用户名&quot;<br>        placeholder=&quot;用户名&quot;<br>        :rules=&quot;[&#123; required: true, message: &#x27;请填写用户名&#x27; &#125;]&quot;<br>      /&gt;<br>      &lt;van-field<br>        v-model=&quot;userPassword&quot;<br>        type=&quot;password&quot;<br>        name=&quot;密码&quot;<br>        label=&quot;密码&quot;<br>        placeholder=&quot;密码&quot;<br>        :rules=&quot;[&#123; required: true, message: &#x27;请填写密码&#x27; &#125;]&quot;<br>      /&gt;<br>    &lt;/van-cell-group&gt;<br>    &lt;div style=&quot;margin: 16px&quot;&gt;<br>      &lt;van-button round block type=&quot;primary&quot; native-type=&quot;submit&quot;&gt;<br>        提交<br>      &lt;/van-button&gt;<br>    &lt;/div&gt;<br>  &lt;/van-form&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><ul><li><h5 id="发送登录请求"><a href="#发送登录请求" class="headerlink" title="发送登录请求"></a>发送登录请求</h5></li><li><h5 id="还记得之前封装好的MyAxios吧，与表单双向绑定后，携带-userAccount-userPassword-json字符串-发送至后端"><a href="#还记得之前封装好的MyAxios吧，与表单双向绑定后，携带-userAccount-userPassword-json字符串-发送至后端" class="headerlink" title="还记得之前封装好的MyAxios吧，与表单双向绑定后，携带 userAccount userPassword json字符串 发送至后端"></a>还记得之前封装好的MyAxios吧，与表单双向绑定后，携带 userAccount userPassword json字符串 发送至后端</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;script setup lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> myAxios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../plugins/myAxios&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; showSuccessToast, showFailToast &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vant&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; requestData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../models/user&quot;</span>;<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>();<br><span class="hljs-keyword">const</span> userAccount = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">const</span> userPassword = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSubmit</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">res</span>: requestData = <span class="hljs-keyword">await</span> myAxios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/user/login&quot;</span>, &#123;<br>    <span class="hljs-attr">userAccount</span>: userAccount.<span class="hljs-property">value</span>,<br>    <span class="hljs-attr">userPassword</span>: userPassword.<span class="hljs-property">value</span>,<br>  &#125;);<br><br>  <span class="hljs-keyword">if</span> (res.<span class="hljs-property">code</span> === <span class="hljs-number">0</span> &amp;&amp; res.<span class="hljs-property">data</span>) &#123;<br>    <span class="hljs-title function_">showSuccessToast</span>(<span class="hljs-string">&quot;登录成功&quot;</span>);<br>    <span class="hljs-comment">// 登录成功后跳转至主页</span><br>    router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;/&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">showFailToast</span>(<span class="hljs-string">&quot;登录失败&quot;</span>);<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li><h5 id="用户可以登录了，且登录后记录了用户登录态，将来可以获取到登录用户信息"><a href="#用户可以登录了，且登录后记录了用户登录态，将来可以获取到登录用户信息" class="headerlink" title="用户可以登录了，且登录后记录了用户登录态，将来可以获取到登录用户信息"></a>用户可以登录了，且登录后记录了用户登录态，将来可以获取到登录用户信息</h5></li><li><h5 id="我们在主页的钩子函数上实现一个功能，如果获取不到用户登录态，就跳转至登录页进行登录"><a href="#我们在主页的钩子函数上实现一个功能，如果获取不到用户登录态，就跳转至登录页进行登录" class="headerlink" title="我们在主页的钩子函数上实现一个功能，如果获取不到用户登录态，就跳转至登录页进行登录"></a>我们在主页的钩子函数上实现一个功能，如果获取不到用户登录态，就跳转至登录页进行登录</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 校验是否登录, 未登录则跳转至登录页;</span><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getCurrentUser</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  <span class="hljs-keyword">if</span> (!res.<span class="hljs-property">data</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;未登录!&quot;</span>);<br>    router.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;/user/login&quot;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><h5 id="类似的，我们可以在之后的展示当前用户信息、修改用户信息之前，获取当前用户登录态，以便对该用户进行权限校验"><a href="#类似的，我们可以在之后的展示当前用户信息、修改用户信息之前，获取当前用户登录态，以便对该用户进行权限校验" class="headerlink" title="类似的，我们可以在之后的展示当前用户信息、修改用户信息之前，获取当前用户登录态，以便对该用户进行权限校验"></a>类似的，我们可以在之后的展示当前用户信息、修改用户信息之前，获取当前用户登录态，以便对该用户进行权限校验</h5></li></ul><h2 id="展示当前用户信息"><a href="#展示当前用户信息" class="headerlink" title="展示当前用户信息"></a>展示当前用户信息</h2><ul><li><h5 id="我们要在多个页面上-获取当前用户登录态-来校验权限，所以我们先把这个方法封装起来"><a href="#我们要在多个页面上-获取当前用户登录态-来校验权限，所以我们先把这个方法封装起来" class="headerlink" title="我们要在多个页面上 获取当前用户登录态 来校验权限，所以我们先把这个方法封装起来"></a>我们要在多个页面上 获取当前用户登录态 来校验权限，所以我们先把这个方法封装起来</h5></li><li><h5 id="在-service-user-ts-下实现"><a href="#在-service-user-ts-下实现" class="headerlink" title="在 service/user.ts 下实现"></a>在 service/user.ts 下实现</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> myAxios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../plugins/myAxios&quot;</span>;<br><br><span class="hljs-comment">// 获取当前登录用户</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getCurrentUser</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> myAxios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user/currentUser&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><h5 id="那么这个方法就是封装好的-getCurrentUser-方法了"><a href="#那么这个方法就是封装好的-getCurrentUser-方法了" class="headerlink" title="那么这个方法就是封装好的 getCurrentUser() 方法了"></a>那么这个方法就是封装好的 getCurrentUser() 方法了</h5></li><li><h5 id="接下来，在UserPage下写一个钩子函数，获取当前用户并成功展示"><a href="#接下来，在UserPage下写一个钩子函数，获取当前用户并成功展示" class="headerlink" title="接下来，在UserPage下写一个钩子函数，获取当前用户并成功展示"></a>接下来，在UserPage下写一个钩子函数，获取当前用户并成功展示</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; onMounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; showSuccessToast, showFailToast &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vant&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; getCurrentUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../service/user&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> user = <span class="hljs-title function_">ref</span>();<br><span class="hljs-comment">// 钩子函数</span><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-comment">// 发送获取当前登录用户请求</span><br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getCurrentUser</span>();<br><br>  <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>) &#123;<br>    <span class="hljs-title function_">showSuccessToast</span>(<span class="hljs-string">&quot;获取用户信息成功&quot;</span>);<br>    user.<span class="hljs-property">value</span> = res.<span class="hljs-property">data</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">showFailToast</span>(<span class="hljs-string">&quot;获取用户信息失败&quot;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><h5 id="顺便优化了表单显示效果：当获取到-user-数据就显示表单信息，否则显示空白页面-Empty"><a href="#顺便优化了表单显示效果：当获取到-user-数据就显示表单信息，否则显示空白页面-Empty" class="headerlink" title="顺便优化了表单显示效果：当获取到 user 数据就显示表单信息，否则显示空白页面 Empty"></a>顺便优化了表单显示效果：当获取到 user 数据就显示表单信息，否则显示空白页面 Empty</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div v-if=&quot;user&quot;&gt;<br>    &lt;van-cell<br>      title=&quot;账号&quot;<br>      is-link<br>      to=&quot;/user/edit&quot;<br>      :value=&quot;user.userAccount&quot;<br>      @click=&quot;toEdit(&#x27;userAccount&#x27;, &#x27;账号&#x27;, user.userAccount)&quot;<br>    /&gt;vu<br>    &lt;van-cell<br>      title=&quot;昵称&quot;<br>      is-link<br>      to=&quot;/user/edit&quot;<br>      :value=&quot;user.username&quot;<br>      @click=&quot;toEdit(&#x27;username&#x27;, &#x27;昵称&#x27;, user.username)&quot;<br>    /&gt;<br>    &lt;van-cell<br>      title=&quot;头像&quot;<br>      is-link<br>      to=&quot;/user/edit&quot;<br>      :value=&quot;user.avatarUrl&quot;<br>      @click=&quot;toEdit(&#x27;avatarUrl&#x27;, &#x27;头像&#x27;, user.avatarUrl)&quot;<br>    /&gt;<br>    &lt;van-cell<br>      title=&quot;性别&quot;<br>      is-link<br>      to=&quot;/user/edit&quot;<br>      :value=&quot;user.gender&quot;<br>      @click=&quot;toEdit(&#x27;gender&#x27;, &#x27;性别&#x27;, user.gender)&quot;<br>    /&gt;<br>    &lt;van-cell<br>      title=&quot;电话&quot;<br>      is-link<br>      to=&quot;/user/edit&quot;<br>      :value=&quot;user.phone&quot;<br>      @click=&quot;toEdit(&#x27;phone&#x27;, &#x27;电话&#x27;, user.phone)&quot;<br>    /&gt;<br>    &lt;van-cell<br>      title=&quot;邮箱&quot;<br>      is-link<br>      to=&quot;/user/edit&quot;<br>      :value=&quot;user.email&quot;<br>      @click=&quot;toEdit(&#x27;email&#x27;, &#x27;邮箱&#x27;, user.email)&quot;<br>    /&gt;<br>    &lt;van-cell<br>      title=&quot;星球编号&quot;<br>      is-link<br>      to=&quot;/user/edit&quot;<br>      :value=&quot;user.planetCode&quot;<br>      @click=&quot;toEdit(&#x27;planetCode&#x27;, &#x27;星球编号&#x27;, user.planetCode)&quot;<br>    /&gt;<br>    &lt;van-cell<br>      title=&quot;注册时间&quot;<br>      is-link<br>      to=&quot;/user/edit&quot;<br>      :value=&quot;user.createTime&quot;<br>      @click=&quot;toEdit(&#x27;createTime&#x27;, &#x27;注册时间&#x27;, user.createTime)&quot;<br>    /&gt;<br>     &lt;van-empty v-else description=&quot;获取用户信息失败&quot; /&gt;<br>  &lt;/div&gt;<br></code></pre></td></tr></table></figure><h2 id="发送修改信息请求"><a href="#发送修改信息请求" class="headerlink" title="发送修改信息请求"></a>发送修改信息请求</h2><ul><li><h5 id="之前我们实现过-UserPage页-的数据传输到-UserEditPage页"><a href="#之前我们实现过-UserPage页-的数据传输到-UserEditPage页" class="headerlink" title="之前我们实现过 UserPage页 的数据传输到 UserEditPage页"></a>之前我们实现过 UserPage页 的数据传输到 UserEditPage页</h5></li><li><h5 id="这次实现成功修改用户信息"><a href="#这次实现成功修改用户信息" class="headerlink" title="这次实现成功修改用户信息"></a>这次实现成功修改用户信息</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSubmit</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">values: <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> currentUser = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getCurrentUser</span>();<br>  <span class="hljs-comment">//提交之前做校验</span><br>  <span class="hljs-keyword">if</span> (currentUser.<span class="hljs-property">data</span>) &#123;<br>    <span class="hljs-comment">// 发送用户修改请求</span><br>    <span class="hljs-keyword">const</span> res = myAxios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/user/update&quot;</span>, &#123;<br>      <span class="hljs-attr">id</span>: currentUser.<span class="hljs-property">data</span>.<span class="hljs-property">id</span>,<br>      [editUser.<span class="hljs-property">value</span>.<span class="hljs-property">editKey</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>]: editUser.<span class="hljs-property">value</span>.<span class="hljs-property">currentValue</span>,<br>    &#125;);<br>    <br>   <span class="hljs-keyword">if</span> (res.<span class="hljs-property">code</span> === <span class="hljs-number">0</span> &amp;&amp; res.<span class="hljs-property">data</span>) &#123;<br>     <span class="hljs-title function_">showSuccessToast</span>(<span class="hljs-string">&quot;修改成功&quot;</span>);<br>     router.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;/user&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><h5 id="同样的，执行修改之前我们又获取了一把用户登录态，并将该用户-id-连同-修改字段-一并发送至后端，这样后端就可以鉴权了"><a href="#同样的，执行修改之前我们又获取了一把用户登录态，并将该用户-id-连同-修改字段-一并发送至后端，这样后端就可以鉴权了" class="headerlink" title="同样的，执行修改之前我们又获取了一把用户登录态，并将该用户 id 连同 修改字段 一并发送至后端，这样后端就可以鉴权了"></a>同样的，执行修改之前我们又获取了一把用户登录态，并将该用户 id 连同 修改字段 一并发送至后端，这样后端就可以鉴权了</h5></li></ul><h2 id="ok，到目前为止，前后端基本打通了——是吗？"><a href="#ok，到目前为止，前后端基本打通了——是吗？" class="headerlink" title="ok，到目前为止，前后端基本打通了——是吗？"></a>ok，到目前为止，前后端基本打通了——是吗？</h2><ul><li><h5 id="axios-发送请求时，默认不会携带cookie，这就导致了：你登录成功了，你的登录态也在后端写进cookie了，但是之后axios发送请求获取当前登录用户信息，由于没有cookie，是拿不到的"><a href="#axios-发送请求时，默认不会携带cookie，这就导致了：你登录成功了，你的登录态也在后端写进cookie了，但是之后axios发送请求获取当前登录用户信息，由于没有cookie，是拿不到的" class="headerlink" title="axios 发送请求时，默认不会携带cookie，这就导致了：你登录成功了，你的登录态也在后端写进cookie了，但是之后axios发送请求获取当前登录用户信息，由于没有cookie，是拿不到的"></a>axios 发送请求时，默认不会携带cookie，这就导致了：你登录成功了，你的登录态也在后端写进cookie了，但是之后axios发送请求获取当前登录用户信息，由于没有cookie，是拿不到的</h5></li><li><h5 id="拿不到当前登录用户信息，剩下的用户信息展示、信息修改就都是扯淡了"><a href="#拿不到当前登录用户信息，剩下的用户信息展示、信息修改就都是扯淡了" class="headerlink" title="拿不到当前登录用户信息，剩下的用户信息展示、信息修改就都是扯淡了"></a>拿不到当前登录用户信息，剩下的用户信息展示、信息修改就都是扯淡了</h5></li><li><h5 id="这是为什么呢？因为我们前后端分离，虽然前后端服务器都在本地，但前端端口号：7070-后端端口号：8081"><a href="#这是为什么呢？因为我们前后端分离，虽然前后端服务器都在本地，但前端端口号：7070-后端端口号：8081" class="headerlink" title="这是为什么呢？因为我们前后端分离，虽然前后端服务器都在本地，但前端端口号：7070  后端端口号：8081"></a>这是为什么呢？因为我们前后端分离，虽然前后端服务器都在本地，但前端端口号：7070  后端端口号：8081</h5></li><li><h5 id="两个相同域名-但不同端口的服务器-在请求响应，这就是浏览器上的跨域问题：解决跨域问题引起的axios无法正确携带cookie"><a href="#两个相同域名-但不同端口的服务器-在请求响应，这就是浏览器上的跨域问题：解决跨域问题引起的axios无法正确携带cookie" class="headerlink" title="两个相同域名 但不同端口的服务器 在请求响应，这就是浏览器上的跨域问题：解决跨域问题引起的axios无法正确携带cookie"></a>两个相同域名 但不同端口的服务器 在请求响应，这就是浏览器上的跨域问题：解决跨域问题引起的axios无法正确携带cookie</h5></li><li><h5 id="如何解决？这里有最简单的解决方法"><a href="#如何解决？这里有最简单的解决方法" class="headerlink" title="如何解决？这里有最简单的解决方法"></a>如何解决？这里有最简单的解决方法</h5></li><li><h5 id="前端-MyAxios-ts-加一行代码-——-withCredentials-true"><a href="#前端-MyAxios-ts-加一行代码-——-withCredentials-true" class="headerlink" title="前端   MyAxios.ts 加一行代码 —— withCredentials: true"></a>前端   MyAxios.ts 加一行代码 —— withCredentials: true</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> myAxios = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;http://localhost:8081/api&quot;</span>,<br>  <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><h5 id="后端-controller-加一行代码-——-CrossOrigin"><a href="#后端-controller-加一行代码-——-CrossOrigin" class="headerlink" title="后端 controller 加一行代码 —— @CrossOrigin"></a>后端 controller 加一行代码 —— @CrossOrigin</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>......................<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="到这里正常来讲问题就应该解决了，但如果这时你发现你前端所有的请求都报错的话，那说明：前端axios是允许携带cookie了，但后端服务器不接受"><a href="#到这里正常来讲问题就应该解决了，但如果这时你发现你前端所有的请求都报错的话，那说明：前端axios是允许携带cookie了，但后端服务器不接受" class="headerlink" title="到这里正常来讲问题就应该解决了，但如果这时你发现你前端所有的请求都报错的话，那说明：前端axios是允许携带cookie了，但后端服务器不接受"></a>到这里正常来讲问题就应该解决了，但如果这时你发现你前端所有的请求都报错的话，那说明：前端axios是允许携带cookie了，但后端服务器不接受</h5></li><li><h5 id="CrossOrigin没有起作用"><a href="#CrossOrigin没有起作用" class="headerlink" title="@CrossOrigin没有起作用"></a>@CrossOrigin没有起作用</h5></li><li><h5 id="那就试试第二种解决方案吧："><a href="#那就试试第二种解决方案吧：" class="headerlink" title="那就试试第二种解决方案吧："></a>那就试试第二种解决方案吧：</h5></li><li><h5 id="config-WebConfig-下编写拦截器"><a href="#config-WebConfig-下编写拦截器" class="headerlink" title="config/WebConfig 下编写拦截器"></a>config/WebConfig 下编写拦截器</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.memory.usercenter.config;<br><br><span class="hljs-keyword">import</span> com.memory.usercenter.common.JacksonObjectMapper;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.http.converter.HttpMessageConverter;<br><span class="hljs-keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Web配置类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加Web项目的拦截器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-comment">// 对所有访问路径，都通过MyInterceptor类型的拦截器进行拦截</span><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterceptor</span>()).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);<br>        <span class="hljs-comment">//放行登录页，登陆操作，静态资源</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 允许跨域请求</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .allowedOrigins(<span class="hljs-string">&quot;http://localhost:7070&quot;</span>, <span class="hljs-string">&quot;http://localhost:8000&quot;</span>)<br>                .allowCredentials(<span class="hljs-literal">true</span>)<br>                .allowedMethods(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>)<br>                .maxAge(<span class="hljs-number">3600</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><h5 id="这个拦截器的重点是："><a href="#这个拦截器的重点是：" class="headerlink" title="这个拦截器的重点是："></a>这个拦截器的重点是：</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 允许访问的请求地址 - 这里是 伙伴匹配 和 用户中心</span><br>.allowedOrigins(<span class="hljs-string">&quot;http://localhost:7070&quot;</span>, <span class="hljs-string">&quot;http://localhost:8000&quot;</span>)<br><span class="hljs-comment">// 允许携带cookie的请求</span><br>.allowCredentials(<span class="hljs-literal">true</span>)                   <br></code></pre></td></tr></table></figure><ul><li><h5 id="好！这样问题就完美解决了！"><a href="#好！这样问题就完美解决了！" class="headerlink" title="好！这样问题就完美解决了！"></a>好！这样问题就完美解决了！</h5></li><li><h5 id="但是我这边还有问题，前端请求仍然报错，最终我怀疑是我的前端域名有问题"><a href="#但是我这边还有问题，前端请求仍然报错，最终我怀疑是我的前端域名有问题" class="headerlink" title="但是我这边还有问题，前端请求仍然报错，最终我怀疑是我的前端域名有问题"></a>但是我这边还有问题，前端请求仍然报错，最终我怀疑是我的前端域名有问题</h5></li><li><h5 id="我的域名一直是http-127-0-0-1-7070，于是我这样干了："><a href="#我的域名一直是http-127-0-0-1-7070，于是我这样干了：" class="headerlink" title="我的域名一直是http://127.0.0.1:7070，于是我这样干了："></a>我的域名一直是<a href="http://127.0.0.1:7070，于是我这样干了：">http://127.0.0.1:7070，于是我这样干了：</a></h5></li><li><h5 id="vite-config-ts下："><a href="#vite-config-ts下：" class="headerlink" title="vite.config.ts下："></a>vite.config.ts下：</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> dns <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dns&quot;</span>;<br>dns.<span class="hljs-title function_">setDefaultResultOrder</span>(<span class="hljs-string">&quot;verbatim&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><h5 id="成功把域名修改为http-localhost-7070了，于是一切都成功了"><a href="#成功把域名修改为http-localhost-7070了，于是一切都成功了" class="headerlink" title="成功把域名修改为http://localhost:7070了，于是一切都成功了"></a>成功把域名修改为<a href="http://localhost:7070了，于是一切都成功了">http://localhost:7070了，于是一切都成功了</a></h5></li><li><h5 id="当然我也试过这么改，没什么用"><a href="#当然我也试过这么改，没什么用" class="headerlink" title="当然我也试过这么改，没什么用"></a>当然我也试过这么改，没什么用</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-attr">server</span>: &#123;<br><span class="hljs-attr">host</span>: <span class="hljs-string">&quot;localhost&quot;</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">7070</span>,<br>  &#125;,<br></code></pre></td></tr></table></figure><ul><li><h5 id="好了，以上就是跨域axios携带cookie的解决办法"><a href="#好了，以上就是跨域axios携带cookie的解决办法" class="headerlink" title="好了，以上就是跨域axios携带cookie的解决办法"></a>好了，以上就是跨域axios携带cookie的解决办法</h5></li><li><h5 id="最后还有个小BUG，就是后端接收到前端发送的id时，由于id是long型，在传输过程中可能会有精度丢失，导致前后端的id不一致，这里的解决办法在之前的raggie-take-out里也用过，那便是："><a href="#最后还有个小BUG，就是后端接收到前端发送的id时，由于id是long型，在传输过程中可能会有精度丢失，导致前后端的id不一致，这里的解决办法在之前的raggie-take-out里也用过，那便是：" class="headerlink" title="最后还有个小BUG，就是后端接收到前端发送的id时，由于id是long型，在传输过程中可能会有精度丢失，导致前后端的id不一致，这里的解决办法在之前的raggie_take_out里也用过，那便是："></a>最后还有个小BUG，就是后端接收到前端发送的id时，由于id是long型，在传输过程中可能会有精度丢失，导致前后端的id不一致，这里的解决办法在之前的raggie_take_out里也用过，那便是：</h5></li><li><h5 id="提供对象转换器JacksonObjectMapper-common-基于Jackson进行Java到json数据的转换"><a href="#提供对象转换器JacksonObjectMapper-common-基于Jackson进行Java到json数据的转换" class="headerlink" title="提供对象转换器JacksonObjectMapper   common   基于Jackson进行Java到json数据的转换"></a>提供对象转换器JacksonObjectMapper   common   基于Jackson进行Java到json数据的转换</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.memory.usercenter.common;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.<span class="hljs-keyword">module</span>.SimpleModule;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;<br><br><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span><br><span class="hljs-comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span><br><span class="hljs-comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JacksonObjectMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectMapper</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_DATE_FORMAT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_TIME_FORMAT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HH:mm:ss&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JacksonObjectMapper</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-comment">//收到未知属性时不报异常</span><br>        <span class="hljs-built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="hljs-literal">false</span>);<br><br>        <span class="hljs-comment">//反序列化时，属性不存在的兼容处理</span><br>        <span class="hljs-built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);<br><br><br>        <span class="hljs-type">SimpleModule</span> <span class="hljs-variable">simpleModule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleModule</span>()<br>                .addDeserializer(LocalDateTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))<br>                .addDeserializer(LocalDate.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))<br>                .addDeserializer(LocalTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))<br><br>                .addSerializer(BigInteger.class, ToStringSerializer.instance)<br>                .addSerializer(Long.class, ToStringSerializer.instance)<br>                .addSerializer(LocalDateTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))<br>                .addSerializer(LocalDate.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))<br>                .addSerializer(LocalTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));<br><br>        <span class="hljs-comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span><br>        <span class="hljs-built_in">this</span>.registerModule(simpleModule);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="在WebMvcConfig配置类中扩展Spring-mvc的消息处理器"><a href="#在WebMvcConfig配置类中扩展Spring-mvc的消息处理器" class="headerlink" title="在WebMvcConfig配置类中扩展Spring mvc的消息处理器"></a>在WebMvcConfig配置类中扩展Spring mvc的消息处理器</h5></li><li><h5 id="在此消息转换器中使用提供的对象转换器进行Java对象到json数据的转换"><a href="#在此消息转换器中使用提供的对象转换器进行Java对象到json数据的转换" class="headerlink" title="在此消息转换器中使用提供的对象转换器进行Java对象到json数据的转换"></a>在此消息转换器中使用提供的对象转换器进行Java对象到json数据的转换</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 扩展消息转换器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> converters converters</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">extendMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;扩展消息转换器...&quot;</span>);<br>        <span class="hljs-comment">//创建消息转换器</span><br>        <span class="hljs-type">MappingJackson2HttpMessageConverter</span> <span class="hljs-variable">messageConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span>();<br>        <span class="hljs-comment">//设置具体的对象映射器</span><br>        messageConverter.setObjectMapper(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JacksonObjectMapper</span>());<br>        <span class="hljs-comment">//通过索引设置,让自己的转换器放在最前面,否则默认的jackson转换器会在最前面,用不上我们设置的转换器</span><br>        converters.add(<span class="hljs-number">0</span>, messageConverter);<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="这样就解决了long型数据精度丢失的问题了"><a href="#这样就解决了long型数据精度丢失的问题了" class="headerlink" title="这样就解决了long型数据精度丢失的问题了"></a>这样就解决了long型数据精度丢失的问题了</h5></li></ul><h2 id="导入用户数据"><a href="#导入用户数据" class="headerlink" title="导入用户数据"></a>导入用户数据</h2><ul><li><h5 id="第一种：Export-data-to-file导出数据（CSV格式），再Export-data-from-file导入数据-适用于快速导入少量的数据"><a href="#第一种：Export-data-to-file导出数据（CSV格式），再Export-data-from-file导入数据-适用于快速导入少量的数据" class="headerlink" title="第一种：Export data to file导出数据（CSV格式），再Export data from file导入数据    适用于快速导入少量的数据"></a>第一种：Export data to file导出数据（CSV格式），再Export data from file导入数据    适用于快速导入少量的数据</h5></li><li><h5 id="第二种就是用编程的方式批量插入数据了"><a href="#第二种就是用编程的方式批量插入数据了" class="headerlink" title="第二种就是用编程的方式批量插入数据了"></a>第二种就是用编程的方式批量插入数据了</h5></li><li><h5 id="先简单地写下代码实现方法吧："><a href="#先简单地写下代码实现方法吧：" class="headerlink" title="先简单地写下代码实现方法吧："></a>先简单地写下代码实现方法吧：</h5></li><li><h5 id="在once-InsertUser下编写："><a href="#在once-InsertUser下编写：" class="headerlink" title="在once/InsertUser下编写："></a>在once/InsertUser下编写：</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InsertUser</span> &#123;<br>   ....................<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-comment">// 项目启动后, 每隔5秒就执行一次该方法</span><br>    <span class="hljs-meta">@Scheduled(fixedDelay = 5000)</span><br><span class="hljs-comment">//  @Scheduled(initialDelay = 5000, fixedDelay = Long.MAX_VALUE)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doInsertUsers</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br>        System.out.println(<span class="hljs-string">&quot;go go go go&quot;</span>);<br>        <span class="hljs-comment">// 计时开始</span><br>        stopWatch.start();<br>        <span class="hljs-comment">// 插入数据条数</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INSERT_NUM</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; INSERT_NUM; i++) &#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>            user.setUserAccount(<span class="hljs-string">&quot;memory&quot;</span>);<br>            user.setUsername(<span class="hljs-string">&quot;邓哈哈&quot;</span>);<br>            user.setUserPassword(<span class="hljs-string">&quot;12345678&quot;</span>);<br>            user.setAvatarUrl(<span class="hljs-string">&quot;&quot;</span>);<br>            user.setGender(<span class="hljs-string">&quot;&quot;</span>);<br>            user.setPhone(<span class="hljs-string">&quot;18889889898&quot;</span>);<br>            user.setEmail(<span class="hljs-string">&quot;3348407547@qq.com&quot;</span>);<br>            user.setUserStatus(<span class="hljs-number">0</span>);<br>            user.setUserRole(<span class="hljs-number">1</span>);<br>            user.setPlanetCode(<span class="hljs-string">&quot;17625&quot;</span>);<br>            user.setTags(<span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-comment">// 插入数据</span><br>            userService.save(user);<br>        &#125;<br>        <span class="hljs-comment">// 计时结束</span><br>        stopWatch.stop();<br>        <span class="hljs-comment">// 计算整个插入过程耗费的时间</span><br>        System.out.println(stopWatch.getTotalTimeMillis());<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="最后在项目启动类上写下："><a href="#最后在项目启动类上写下：" class="headerlink" title="最后在项目启动类上写下："></a>最后在项目启动类上写下：</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableScheduling</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="启动项目！每隔5秒就会插入1000条用户数据"><a href="#启动项目！每隔5秒就会插入1000条用户数据" class="headerlink" title="启动项目！每隔5秒就会插入1000条用户数据~"></a>启动项目！每隔5秒就会插入1000条用户数据~</h5></li><li><h5 id="然后我们写个测试类，在测试类中测试批量插入数据"><a href="#然后我们写个测试类，在测试类中测试批量插入数据" class="headerlink" title="然后我们写个测试类，在测试类中测试批量插入数据"></a>然后我们写个测试类，在测试类中测试批量插入数据</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InsertUserTest</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doInsertUsers1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br>        System.out.println(<span class="hljs-string">&quot;go go go go&quot;</span>);<br>        stopWatch.start();<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INSERT_NUM</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; INSERT_NUM; i++) &#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>            user.setUserAccount(<span class="hljs-string">&quot;memory&quot;</span>);<br>            user.setUsername(<span class="hljs-string">&quot;邓哈哈&quot;</span>);<br>            user.setUserPassword(<span class="hljs-string">&quot;12345678&quot;</span>);<br>            user.setAvatarUrl(<span class="hljs-string">&quot;&quot;</span>);<br>            user.setGender(<span class="hljs-string">&quot;&quot;</span>);<br>            user.setPhone(<span class="hljs-string">&quot;18889889898&quot;</span>);<br>            user.setEmail(<span class="hljs-string">&quot;3348407547@qq.com&quot;</span>);<br>            user.setUserStatus(<span class="hljs-number">0</span>);<br>            user.setUserRole(<span class="hljs-number">1</span>);<br>            user.setPlanetCode(<span class="hljs-string">&quot;17625&quot;</span>);<br>            user.setTags(<span class="hljs-string">&quot;&quot;</span>);<br><br>            userService.save(user);<br>        &#125;<br><br>        stopWatch.stop();<br>        System.out.println(stopWatch.getTotalTimeMillis());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="我们采取批量插入的方式，一次性插入多条记录，减少建立和释放数据库连接的次数，提高插入效率"><a href="#我们采取批量插入的方式，一次性插入多条记录，减少建立和释放数据库连接的次数，提高插入效率" class="headerlink" title="我们采取批量插入的方式，一次性插入多条记录，减少建立和释放数据库连接的次数，提高插入效率"></a>我们采取批量插入的方式，一次性插入多条记录，减少建立和释放数据库连接的次数，提高插入效率</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 批量插入数据</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doInsertUsers2</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br>       System.out.println(<span class="hljs-string">&quot;go go go go&quot;</span>);<br>       stopWatch.start();<br><br>       ArrayList&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>       <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INSERT_NUM</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; INSERT_NUM; i++) &#123;<br>           <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>           user.setUserAccount(<span class="hljs-string">&quot;memory&quot;</span>);<br>           user.setUsername(<span class="hljs-string">&quot;邓哈哈&quot;</span>);<br>           user.setUserPassword(<span class="hljs-string">&quot;12345678&quot;</span>);<br>           user.setAvatarUrl(<span class="hljs-string">&quot;&quot;</span>);<br>           user.setGender(<span class="hljs-string">&quot;&quot;</span>);<br>           user.setPhone(<span class="hljs-string">&quot;18889889898&quot;</span>);<br>           user.setEmail(<span class="hljs-string">&quot;3348407547@qq.com&quot;</span>);<br>           user.setUserStatus(<span class="hljs-number">0</span>);<br>           user.setUserRole(<span class="hljs-number">1</span>);<br>           user.setPlanetCode(<span class="hljs-string">&quot;17625&quot;</span>);<br>           user.setTags(<span class="hljs-string">&quot;&quot;</span>);<br>           userList.add(user);<br>       &#125;<br>       userService.saveBatch(userList, <span class="hljs-number">100</span>);<br><br>       stopWatch.stop();<br>       System.out.println(stopWatch.getTotalTimeMillis());<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="我们也可以采用并发的方式批量插入数据，效率更高"><a href="#我们也可以采用并发的方式批量插入数据，效率更高" class="headerlink" title="我们也可以采用并发的方式批量插入数据，效率更高"></a>我们也可以采用并发的方式批量插入数据，效率更高</h5></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 并发批量插入数据</span><br><span class="hljs-comment">  */</span><br> @<span class="hljs-title class_">Test</span><br> public <span class="hljs-keyword">void</span> <span class="hljs-title function_">doConcurrencyInsertUsers</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-comment">// new一个StopWatch对象</span><br>     <span class="hljs-title class_">StopWatch</span> stopWatch = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br>     <span class="hljs-comment">// 计时开始</span><br>     stopWatch.<span class="hljs-title function_">start</span>();<br>     <span class="hljs-comment">// 每条线程插入1000条</span><br>     int batchSize = <span class="hljs-number">1000</span>;<br>     int j = <span class="hljs-number">0</span>;<br>     <span class="hljs-comment">// 创建一个异步任务集合</span><br>     <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">CompletableFuture</span>&lt;<span class="hljs-title class_">Void</span>&gt;&gt; futureList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>     <span class="hljs-comment">// 开10条线程</span><br>     <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>         <span class="hljs-comment">// 每条线程下new一个userList</span><br>         <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">User</span>&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>         <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>             j++;<br>             <span class="hljs-title class_">User</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>             user.<span class="hljs-title function_">setUserAccount</span>(<span class="hljs-string">&quot;memory&quot;</span>);<br>             user.<span class="hljs-title function_">setUsername</span>(<span class="hljs-string">&quot;邓哈哈&quot;</span>);<br>             user.<span class="hljs-title function_">setUserPassword</span>(<span class="hljs-string">&quot;12345678&quot;</span>);<br>             user.<span class="hljs-title function_">setAvatarUrl</span>(<span class="hljs-string">&quot;&quot;</span>);<br>             user.<span class="hljs-title function_">setGender</span>(<span class="hljs-string">&quot;&quot;</span>);<br>             user.<span class="hljs-title function_">setPhone</span>(<span class="hljs-string">&quot;18889889898&quot;</span>);<br>             user.<span class="hljs-title function_">setEmail</span>(<span class="hljs-string">&quot;3348407547@qq.com&quot;</span>);<br>             user.<span class="hljs-title function_">setUserStatus</span>(<span class="hljs-number">0</span>);<br>             user.<span class="hljs-title function_">setUserRole</span>(<span class="hljs-number">1</span>);<br>             user.<span class="hljs-title function_">setPlanetCode</span>(<span class="hljs-string">&quot;17625&quot;</span>);<br>             user.<span class="hljs-title function_">setTags</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br>             userList.<span class="hljs-title function_">add</span>(user);<br>             <span class="hljs-comment">// 当该线程插满1000条数据，便退出该线程循环</span><br>             <span class="hljs-keyword">if</span> (j % batchSize == <span class="hljs-number">0</span>) &#123;<br>                 <span class="hljs-keyword">break</span>;<br>             &#125;<br>         &#125;<br>         <span class="hljs-comment">// 异步条件下, 执行批量插入</span><br>         <span class="hljs-title class_">CompletableFuture</span>&lt;<span class="hljs-title class_">Void</span>&gt; future = <span class="hljs-title class_">CompletableFuture</span>.<span class="hljs-title function_">runAsync</span>(() -&gt; &#123;<br>             <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;threadName: &quot;</span> + <span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">currentThread</span>().<span class="hljs-title function_">getName</span>());<br>             userService.<span class="hljs-title function_">saveBatch</span>(userList, batchSize);<br>         &#125;);<br>         <span class="hljs-comment">// 将该任务存储到异步任务集合当中</span><br>         futureList.<span class="hljs-title function_">add</span>(future);<br>     &#125;<br>     <span class="hljs-comment">// 结束所有异步任务</span><br>     <span class="hljs-title class_">CompletableFuture</span>.<span class="hljs-title function_">allOf</span>(futureList.<span class="hljs-title function_">toArray</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CompletableFuture</span>[]&#123;&#125;)).<span class="hljs-title function_">join</span>();<br>     <span class="hljs-comment">// 计时结束</span><br>     stopWatch.<span class="hljs-title function_">stop</span>();<br>     <span class="hljs-comment">// 计算插入所用总时间</span><br>     <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(stopWatch.<span class="hljs-title function_">getTotalTimeMillis</span>());<br> &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="到此为止，批量导入用户数据我们就实现了"><a href="#到此为止，批量导入用户数据我们就实现了" class="headerlink" title="到此为止，批量导入用户数据我们就实现了"></a>到此为止，批量导入用户数据我们就实现了</h5></li><li><h5 id="接下来我们优化了批量插入的数据：1-账户非空且唯一-2-密码-加密-3-标签字符串-4-星球编号非空且唯一"><a href="#接下来我们优化了批量插入的数据：1-账户非空且唯一-2-密码-加密-3-标签字符串-4-星球编号非空且唯一" class="headerlink" title="接下来我们优化了批量插入的数据：1.账户非空且唯一  2.密码 加密  3.标签字符串  4.星球编号非空且唯一"></a>接下来我们优化了批量插入的数据：1.账户非空且唯一  2.密码 加密  3.标签字符串  4.星球编号非空且唯一</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUserAccount(<span class="hljs-string">&quot;memory&quot;</span> + <span class="hljs-string">&quot;_&quot;</span> + (UUID.randomUUID() + <span class="hljs-string">&quot;&quot;</span>).substring(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>));<br>    user.setUsername(<span class="hljs-string">&quot;邓哈哈&quot;</span>);<br><span class="hljs-comment">//  user.setUsername(&quot;邓哇哇&quot;);</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> DigestUtils.md5DigestAsHex((SALT + <span class="hljs-number">12345678</span>).getBytes());<br>    user.setUserPassword(password);<br>    user.setAvatarUrl(<span class="hljs-string">&quot;https://fastly.jsdelivr.net/npm/@vant/assets/ipad.jpeg&quot;</span>);<br>    user.setGender(<span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-comment">//  user.setGender(&quot;0&quot;);</span><br>    user.setPhone(<span class="hljs-string">&quot;18535854763&quot;</span>);<br>    user.setEmail(<span class="hljs-string">&quot;3348407547@qq.com&quot;</span>);<br>    user.setUserStatus(<span class="hljs-number">0</span>);<br>    user.setUserRole(<span class="hljs-number">0</span>);<br>    user.setPlanetCode(<span class="hljs-string">&quot;17625&quot;</span>);<br>    user.setTags(<span class="hljs-string">&quot;[\&quot;男\&quot;,\&quot;Java\&quot;,\&quot;Python\&quot;,\&quot;在校本科\&quot;,\&quot;开朗\&quot;,\&quot;努力中\&quot;]&quot;</span>);<br><span class="hljs-comment">//  user.setTags(&quot;[\&quot;女\&quot;,\&quot;Vue\&quot;,\&quot;Python\&quot;,\&quot;在校本科\&quot;,\&quot;发呆\&quot;,\&quot;emo中\&quot;]&quot;);</span><br><br></code></pre></td></tr></table></figure><ul><li><h5 id="接下来我们要开发主页了"><a href="#接下来我们要开发主页了" class="headerlink" title="接下来我们要开发主页了"></a>接下来我们要开发主页了</h5></li><li><h5 id="现阶段思路很简单，主页能够展示所有用户信息就行"><a href="#现阶段思路很简单，主页能够展示所有用户信息就行" class="headerlink" title="现阶段思路很简单，主页能够展示所有用户信息就行"></a>现阶段思路很简单，主页能够展示所有用户信息就行</h5></li></ul><h2 id="开发查询全部用户接口"><a href="#开发查询全部用户接口" class="headerlink" title="开发查询全部用户接口"></a>开发查询全部用户接口</h2><ul><li><h5 id="service-层"><a href="#service-层" class="headerlink" title="service 层"></a>service 层</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 展示所有用户信息</span><br><span class="hljs-comment">    * 分页查询</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> currentPage 当前页</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> pageSize    每页显示数</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> 用户列表</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> Page&lt;User&gt; <span class="hljs-title function_">selectPage</span><span class="hljs-params">(<span class="hljs-type">long</span> currentPage, <span class="hljs-type">long</span> pageSize)</span> &#123;<br>       LambdaQueryWrapper&lt;User&gt; lqw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>       Page&lt;User&gt; userPage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(currentPage, pageSize);<br><br>       <span class="hljs-keyword">return</span> userMapper.selectPage(userPage, lqw);<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="controller-层"><a href="#controller-层" class="headerlink" title="controller 层"></a>controller 层</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据标签查询用户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用户列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/recommend&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;Page&lt;User&gt;&gt; <span class="hljs-title function_">recommend</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> <span class="hljs-type">long</span> currentPage, <span class="hljs-type">long</span> pageSize)</span> &#123;<br>        Page&lt;User&gt; userList = userService.selectPage(currentPage, pageSize);<br>        <span class="hljs-keyword">return</span> ResultUtils.success(userList);<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="config-WebConfig-MP分页插件"><a href="#config-WebConfig-MP分页插件" class="headerlink" title="config    WebConfig    MP分页插件"></a>config    WebConfig    MP分页插件</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 分页插件（官网最新）</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>      interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<br>      <span class="hljs-keyword">return</span> interceptor;<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="接下来就是开发主页了"><a href="#接下来就是开发主页了" class="headerlink" title="接下来就是开发主页了"></a>接下来就是开发主页了</h5></li></ul><h2 id="前端主页页面开发"><a href="#前端主页页面开发" class="headerlink" title="前端主页页面开发"></a>前端主页页面开发</h2><ul><li><h5 id="使用组件快速开发页面-（跟UserListPage页大同小异）"><a href="#使用组件快速开发页面-（跟UserListPage页大同小异）" class="headerlink" title="使用组件快速开发页面 （跟UserListPage页大同小异）"></a>使用组件快速开发页面 （跟UserListPage页大同小异）</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div id=&quot;content&quot; style=&quot;padding-bottom: 30px&quot;&gt;<br>    &lt;!-- 用户信息展示 --&gt;<br>    &lt;van-card<br>      v-for=&quot;user in userList&quot;<br>      :tag=&quot;`$&#123;user.gender&#125;`&quot;<br>      :title=&quot;`$&#123;user.userAccount&#125; $&#123;user.username&#125; $&#123;user.planetCode&#125;`&quot;<br>      :desc=&quot;user.profile&quot;<br>      :thumb=&quot;`$&#123;user.avatarUrl&#125;`&quot;<br>    &gt;<br>    &lt;!-- 标签展示 --&gt;<br>      &lt;template #tags&gt;<br>        &lt;van-tag<br>          plain<br>          type=&quot;primary&quot;<br>          v-for=&quot;tag in user.tags&quot;<br>          style=&quot;margin-right: 3px; margin-top: 3px&quot;<br>        &gt;<br>          &#123;&#123; tag &#125;&#125;<br>        &lt;/van-tag&gt;<br>      &lt;/template&gt;<br>      <br>      &lt;template #footer&gt;<br>        &lt;van-button size=&quot;mini&quot;&gt;联系俺&lt;/van-button&gt;<br>      &lt;/template&gt;<br>    &lt;/van-card&gt;<br>    &lt;!-- 无用户信息展示 --&gt;<br>    &lt;van-empty v-if=&quot;!userList&quot; description=&quot;获取用户信息失败&quot; /&gt;<br>    &lt;!-- 分页插件 --&gt;<br>    &lt;van-pagination<br>      v-model=&quot;currentPage&quot; <br>      :total-items=&quot;total&quot;<br>      :items-per-page=&quot;pageSize&quot;<br>      force-ellipses<br>      @change=&quot;change&quot;<br>    /&gt;<br>  &lt;/div&gt;<br></code></pre></td></tr></table></figure><ul><li><h5 id="页面发送请求到后端接口"><a href="#页面发送请求到后端接口" class="headerlink" title="页面发送请求到后端接口"></a>页面发送请求到后端接口</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;script setup lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; onMounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; userType &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../models/user&quot;</span>;<br><span class="hljs-keyword">import</span> myAxios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../plugins/myAxios&quot;</span>;<br><br><span class="hljs-keyword">const</span> userList = <span class="hljs-title function_">ref</span>([]);<br><br><span class="hljs-comment">// 当前页码</span><br><span class="hljs-keyword">const</span> currentPage = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>);<br><span class="hljs-comment">// 每页显示数</span><br><span class="hljs-keyword">let</span> pageSize = <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 总记录数</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">total</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getPage</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">currentPage: <span class="hljs-built_in">number</span></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 发送请求, 获取用户数据列表</span><br>  <span class="hljs-keyword">const</span> userListData = <span class="hljs-keyword">await</span> myAxios<br>    .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user/recommend&quot;</span>, &#123;<br>      <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">currentPage</span>: currentPage,<br>        <span class="hljs-attr">pageSize</span>: pageSize,<br>      &#125;,<br>    &#125;)<br>    <span class="hljs-comment">// 响应</span><br>    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>      <span class="hljs-comment">// 返回响应数据（用户列表）</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>);<br>      total = response.<span class="hljs-property">data</span>?.<span class="hljs-property">total</span>;<br>      pageSize = response.<span class="hljs-property">data</span>?.<span class="hljs-property">size</span>;<br>      <span class="hljs-keyword">return</span> response.<span class="hljs-property">data</span>?.<span class="hljs-property">records</span>;<br>    &#125;)<br>    <span class="hljs-comment">// 抛异常</span><br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>    &#125;);<br>  <span class="hljs-comment">// 成功拿到用户数据列表(不为空)</span><br>  <span class="hljs-keyword">if</span> (userListData) &#123;<br>    <span class="hljs-comment">// 遍历用户数据列表</span><br>    userListData.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">user: userType</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 将gender的 &quot;1&quot;/&quot;0&quot; 渲染成 &quot;男&quot;/&quot;女&quot;</span><br>      <span class="hljs-keyword">if</span> (user.<span class="hljs-property">gender</span> === <span class="hljs-string">&quot;1&quot;</span>) user.<span class="hljs-property">gender</span> = <span class="hljs-string">&quot;男&quot;</span>;<br>      <span class="hljs-keyword">if</span> (user.<span class="hljs-property">gender</span> === <span class="hljs-string">&quot;0&quot;</span>) user.<span class="hljs-property">gender</span> = <span class="hljs-string">&quot;女&quot;</span>;<br>      <span class="hljs-comment">// JSON字符串序列化为列表</span><br>      <span class="hljs-keyword">if</span> (user.<span class="hljs-property">tags</span>) user.<span class="hljs-property">tags</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(user.<span class="hljs-property">tags</span>);<br>    &#125;);<br>    <span class="hljs-comment">// 处理过后的用户列表</span><br>    userList.<span class="hljs-property">value</span> = userListData;<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 用户列表, 钩子函数</span><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">getPage</span>(currentPage.<span class="hljs-property">value</span>);<br>&#125;);<br><br><span class="hljs-comment">// 改变页码</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">change</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">getPage</span>(currentPage.<span class="hljs-property">value</span>);<br>&#125;;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><ul><li><h5 id="这块儿逻辑注释已经写得很清楚了，不过还是简单介绍一下吧："><a href="#这块儿逻辑注释已经写得很清楚了，不过还是简单介绍一下吧：" class="headerlink" title="这块儿逻辑注释已经写得很清楚了，不过还是简单介绍一下吧："></a>这块儿逻辑注释已经写得很清楚了，不过还是简单介绍一下吧：</h5></li><li><h5 id="axios请求，携带currentPage和pageSize发送至后端，响应到对应用户列表"><a href="#axios请求，携带currentPage和pageSize发送至后端，响应到对应用户列表" class="headerlink" title="axios请求，携带currentPage和pageSize发送至后端，响应到对应用户列表"></a>axios请求，携带currentPage和pageSize发送至后端，响应到对应用户列表</h5></li><li><h5 id="之前MyAxios封装过返回值：response-data"><a href="#之前MyAxios封装过返回值：response-data" class="headerlink" title="之前MyAxios封装过返回值：response.data"></a>之前MyAxios封装过返回值：response.data</h5></li><li><h5 id="需注意到，我们使用了vant的分页组件"><a href="#需注意到，我们使用了vant的分页组件" class="headerlink" title="需注意到，我们使用了vant的分页组件"></a>需注意到，我们使用了vant的分页组件</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 分页插件 --&gt;<br>   &lt;van-pagination<br>     v-model=&quot;currentPage&quot; -- 当前页码<br>     :total-items=&quot;total&quot; -- 记录总数<br>     :items-per-page=&quot;pageSize&quot; -- 每页记录数<br>     force-ellipses<br>     @change=&quot;change&quot; -- 改变页码<br>   /&gt;<br></code></pre></td></tr></table></figure><ul><li><h5 id="有了这个组件，通过change方法，可以很方便地改变当前页码currentPage，同时执行查询，可以查到每页数据"><a href="#有了这个组件，通过change方法，可以很方便地改变当前页码currentPage，同时执行查询，可以查到每页数据" class="headerlink" title="有了这个组件，通过change方法，可以很方便地改变当前页码currentPage，同时执行查询，可以查到每页数据"></a>有了这个组件，通过change方法，可以很方便地改变当前页码currentPage，同时执行查询，可以查到每页数据</h5></li><li><h5 id="组件其他属性也都标明了，可以控制总记录数、每页记录数"><a href="#组件其他属性也都标明了，可以控制总记录数、每页记录数" class="headerlink" title="组件其他属性也都标明了，可以控制总记录数、每页记录数"></a>组件其他属性也都标明了，可以控制总记录数、每页记录数</h5></li><li><h5 id="这里我们使用response-data-records、response-data-size、response-data-total可分别获取：每页数据记录、每页数据容量、总记录数"><a href="#这里我们使用response-data-records、response-data-size、response-data-total可分别获取：每页数据记录、每页数据容量、总记录数" class="headerlink" title="这里我们使用response.data?.records、response.data?.size、response.data?.total可分别获取：每页数据记录、每页数据容量、总记录数"></a>这里我们使用response.data?.records、response.data?.size、response.data?.total可分别获取：每页数据记录、每页数据容量、总记录数</h5></li><li><h5 id="当然，组件上的总记录数total就可以拿到了，pageSize这边是固定死的，每页10条，暂不支持灵活改变每页显示数"><a href="#当然，组件上的总记录数total就可以拿到了，pageSize这边是固定死的，每页10条，暂不支持灵活改变每页显示数" class="headerlink" title="当然，组件上的总记录数total就可以拿到了，pageSize这边是固定死的，每页10条，暂不支持灵活改变每页显示数"></a>当然，组件上的总记录数total就可以拿到了，pageSize这边是固定死的，每页10条，暂不支持灵活改变每页显示数</h5></li><li><h5 id="以上是对这段逻辑实现的粗略介绍，如有疑问还请研读代码，实现过程是十分清晰的"><a href="#以上是对这段逻辑实现的粗略介绍，如有疑问还请研读代码，实现过程是十分清晰的" class="headerlink" title="以上是对这段逻辑实现的粗略介绍，如有疑问还请研读代码，实现过程是十分清晰的"></a>以上是对这段逻辑实现的粗略介绍，如有疑问还请研读代码，实现过程是十分清晰的</h5></li></ul><h1 id="Redis缓存"><a href="#Redis缓存" class="headerlink" title="Redis缓存"></a>Redis缓存</h1><ul><li><h5 id="之前我们给数据库批量插入了大量数据，并且在主页根据展示出所有用户信息"><a href="#之前我们给数据库批量插入了大量数据，并且在主页根据展示出所有用户信息" class="headerlink" title="之前我们给数据库批量插入了大量数据，并且在主页根据展示出所有用户信息"></a>之前我们给数据库批量插入了大量数据，并且在主页根据展示出所有用户信息</h5></li><li><h5 id="为了提高查询效率，我们还采用了分页查询的方式"><a href="#为了提高查询效率，我们还采用了分页查询的方式" class="headerlink" title="为了提高查询效率，我们还采用了分页查询的方式"></a>为了提高查询效率，我们还采用了分页查询的方式</h5></li><li><h5 id="但这种解决办法并不彻底，频繁查询数据库还是很低效，所以我们使用Redis技术来解决查询效率低下的问题"><a href="#但这种解决办法并不彻底，频繁查询数据库还是很低效，所以我们使用Redis技术来解决查询效率低下的问题" class="headerlink" title="但这种解决办法并不彻底，频繁查询数据库还是很低效，所以我们使用Redis技术来解决查询效率低下的问题"></a>但这种解决办法并不彻底，频繁查询数据库还是很低效，所以我们使用Redis技术来解决查询效率低下的问题</h5></li></ul><h4 id="Redis的引入和测试"><a href="#Redis的引入和测试" class="headerlink" title="Redis的引入和测试"></a>Redis的引入和测试</h4><ul><li><h5 id="之前在解决Session共享的时候已经做过了："><a href="#之前在解决Session共享的时候已经做过了：" class="headerlink" title="之前在解决Session共享的时候已经做过了："></a>之前在解决Session共享的时候已经做过了：</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- https:<span class="hljs-comment">//mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis --&gt;</span><br>     &lt;dependency&gt;<br>         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>         &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;<br>         &lt;version&gt;<span class="hljs-number">2.6</span><span class="hljs-number">.4</span>&lt;/version&gt;<br>     &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment"># session 失效时间(分钟)</span><br>  <span class="hljs-attr">session:</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">86640</span><br>    <span class="hljs-attr">store-type:</span> <span class="hljs-string">redis</span><br>  <span class="hljs-comment"># redis 配置</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="引入了Redis，二话不说先测增删改查，接下来小小地测试一把（test-redis-RedisTest）："><a href="#引入了Redis，二话不说先测增删改查，接下来小小地测试一把（test-redis-RedisTest）：" class="headerlink" title="引入了Redis，二话不说先测增删改查，接下来小小地测试一把（test/redis/RedisTest）："></a>引入了Redis，二话不说先测增删改查，接下来小小地测试一把（test/redis/RedisTest）：</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTest</span> &#123;<br>   <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">StringRedisTemplate</span> <span class="hljs-variable">stringRedisTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisTemplate</span>();<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;memory&quot;</span>, <span class="hljs-string">&quot;邓哈哈&quot;</span>);<br><span class="hljs-comment">//        stringRedisTemplate.opsForValue().set(&quot;memory&quot;, 18);</span><br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;memory2&quot;</span>, <span class="hljs-number">9</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">memory</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;memory&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 增</span><br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;memoryString&quot;</span>, <span class="hljs-string">&quot;dog&quot;</span>);<br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;memoryInt&quot;</span>, <span class="hljs-number">1</span>);<br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;memoryDouble&quot;</span>, <span class="hljs-number">3.0</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(<span class="hljs-number">9999L</span>);<br>        user.setUserAccount(<span class="hljs-string">&quot;memoryc7b93cb1b3&quot;</span>);<br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;memoryUser&quot;</span>, user);<br>        <span class="hljs-comment">// 查</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(<span class="hljs-string">&quot;memoryString&quot;</span>);<br>        Assertions.assertTrue(<span class="hljs-string">&quot;dog&quot;</span>.equals(dog));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">anInt</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(<span class="hljs-string">&quot;memoryInt&quot;</span>);<br>        Assertions.assertTrue(<span class="hljs-number">1</span> == (Integer) anInt);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">anDouble</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(<span class="hljs-string">&quot;memoryDouble&quot;</span>);<br>        Assertions.assertTrue(<span class="hljs-number">3.0</span> == (Double) anDouble);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">memoryUser</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(<span class="hljs-string">&quot;memoryUser&quot;</span>);<br>        log.info(memoryUser + <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 删</span><br>        redisTemplate.delete(<span class="hljs-string">&quot;memoryInt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="增删改查没有问题"><a href="#增删改查没有问题" class="headerlink" title="增删改查没有问题"></a>增删改查没有问题</h5></li><li><h5 id="这里存在这样的问题：RedisTemplate-底层的序列化方式，会导致存入的序列化后的value值成为乱码"><a href="#这里存在这样的问题：RedisTemplate-底层的序列化方式，会导致存入的序列化后的value值成为乱码" class="headerlink" title="这里存在这样的问题：RedisTemplate 底层的序列化方式，会导致存入的序列化后的value值成为乱码"></a>这里存在这样的问题：RedisTemplate 底层的序列化方式，会导致存入的序列化后的value值成为乱码</h5></li><li><h5 id="StringRedisTemplate-继承了-RedisTemplate-有效解决了这个问题，但只能存放-lt-String，String-gt"><a href="#StringRedisTemplate-继承了-RedisTemplate-有效解决了这个问题，但只能存放-lt-String，String-gt" class="headerlink" title="StringRedisTemplate 继承了 RedisTemplate 有效解决了这个问题，但只能存放&lt;String，String&gt;"></a>StringRedisTemplate 继承了 RedisTemplate 有效解决了这个问题，但只能存放&lt;String，String&gt;</h5></li><li><h5 id="综上，我们在使用Redis缓存技术时，可以自己自定义（封装一个）RedisTemplate"><a href="#综上，我们在使用Redis缓存技术时，可以自己自定义（封装一个）RedisTemplate" class="headerlink" title="综上，我们在使用Redis缓存技术时，可以自己自定义（封装一个）RedisTemplate"></a>综上，我们在使用Redis缓存技术时，可以自己自定义（封装一个）RedisTemplate</h5></li></ul><h4 id="自定义-RedisTemplate-lt-String-Object-gt-config-RedisTemplateConfig"><a href="#自定义-RedisTemplate-lt-String-Object-gt-config-RedisTemplateConfig" class="headerlink" title="自定义 RedisTemplate&lt;String, Object&gt;    (config/RedisTemplateConfig)"></a>自定义 RedisTemplate&lt;String, Object&gt;    (config/RedisTemplateConfig)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTemplateConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span> &#123;<br>        <span class="hljs-comment">// 1.创建RedisTemplate对象</span><br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        <span class="hljs-comment">// 2.设置连接工厂</span><br>        redisTemplate.setConnectionFactory(connectionFactory);<br>        <span class="hljs-comment">// 3.设置Key的序列化</span><br>        redisTemplate.setKeySerializer(RedisSerializer.string());<br>        <span class="hljs-comment">// 4.创建JSON序列化工具</span><br>        <span class="hljs-type">GenericJackson2JsonRedisSerializer</span> <span class="hljs-variable">jsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>();<br>        <span class="hljs-comment">// 5.设置value的序列化</span><br>        redisTemplate.setValueSerializer(jsonRedisSerializer);<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="接下来，就要修改原分页查询用户信息的逻辑代码了"><a href="#接下来，就要修改原分页查询用户信息的逻辑代码了" class="headerlink" title="接下来，就要修改原分页查询用户信息的逻辑代码了"></a>接下来，就要修改原分页查询用户信息的逻辑代码了</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 展示所有用户信息</span><br><span class="hljs-comment">    * Redis缓存</span><br><span class="hljs-comment">    * 分页查询</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> currentPage 当前页</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> pageSize    每页显示数</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> 用户列表</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> Page&lt;User&gt; <span class="hljs-title function_">selectPage</span><span class="hljs-params">(<span class="hljs-type">long</span> currentPage, <span class="hljs-type">long</span> pageSize, HttpServletRequest request)</span> &#123;<br>       <span class="hljs-comment">// 获取当前登录用户</span><br>       <span class="hljs-type">User</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> getLoginUser(request);<br>       <span class="hljs-comment">// 拿到当前登录用户的key(每个用户都有各自对应的key)</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">redisKey</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;memory:user:recommend:%s&quot;</span>, loginUser.getId());<br>       <span class="hljs-comment">// 查缓存</span><br>       Page&lt;User&gt; userPage = (Page&lt;User&gt;) redisTemplate.opsForValue().get(redisKey);<br>       <span class="hljs-comment">// 缓存未中, 则返回用户信息</span><br>       <span class="hljs-keyword">if</span> (userPage != <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">return</span> userPage;<br>       &#125;<br>       <span class="hljs-comment">// 缓存未命中, 查询数据库</span><br>       LambdaQueryWrapper&lt;User&gt; lqw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>       userPage = userMapper.selectPage(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(currentPage, pageSize), lqw);<br>       <span class="hljs-comment">// 将查询到的用户信息写到缓存中</span><br>       <span class="hljs-keyword">try</span> &#123;<br>           redisTemplate.opsForValue().set(redisKey, userPage, <span class="hljs-number">30000</span>, TimeUnit.MILLISECONDS);<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           log.error(<span class="hljs-string">&quot;redis set key error&quot;</span>, e);<br>       &#125;<br>       <span class="hljs-comment">// 返回用户数据</span><br>       <span class="hljs-keyword">return</span> userPage;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="那首次查询是不是不走缓存，只能走数据库了？那我们就要实现缓存预热，定时缓存"><a href="#那首次查询是不是不走缓存，只能走数据库了？那我们就要实现缓存预热，定时缓存" class="headerlink" title="那首次查询是不是不走缓存，只能走数据库了？那我们就要实现缓存预热，定时缓存"></a>那首次查询是不是不走缓存，只能走数据库了？那我们就要实现缓存预热，定时缓存</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 邓哈哈</span><br><span class="hljs-comment"> * 2023/4/15 15:22</span><br><span class="hljs-comment"> * Function: 缓存预热</span><br><span class="hljs-comment"> * Version 1.0</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PreCacheJob</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br>    <span class="hljs-comment">// 重点用户id(提供推送的用户id)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;Long&gt; mainUserList = List.of(<span class="hljs-number">1L</span>);<br>    <span class="hljs-comment">// 每天执行，预热推荐用户</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 * * * *  *&quot;)</span>   <span class="hljs-comment">//自己设置时间测试</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doCacheRecommendUser2</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// 遍历每个重点用户</span><br>      <span class="hljs-keyword">for</span> (Long userId : mainUserList) &#123;<br>           QueryWrapper&lt;User&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>           <span class="hljs-comment">// 分页查询用户信息</span><br>           Page&lt;User&gt; userPage = userService.page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>), qw);<br>           <span class="hljs-comment">// 为每个重点用户设置预查询锁</span><br>           <span class="hljs-type">String</span> <span class="hljs-variable">redisKey</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;memory:user:recommend:%s&quot;</span>, userId);<br>           <span class="hljs-comment">//写缓存,30s过期</span><br>           <span class="hljs-keyword">try</span> &#123;<br>               redisTemplate.opsForValue().set(redisKey, userPage, <span class="hljs-number">30000</span>, TimeUnit.MILLISECONDS);<br>           &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>               log.error(<span class="hljs-string">&quot;redis set key error&quot;</span>, e);<br>           &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><ul><li><h5 id="问题来了，在实际工作中，我们面对的往往是集群服务器，难道在某一刻每台服务器都要执行预热缓存用户吗？"><a href="#问题来了，在实际工作中，我们面对的往往是集群服务器，难道在某一刻每台服务器都要执行预热缓存用户吗？" class="headerlink" title="问题来了，在实际工作中，我们面对的往往是集群服务器，难道在某一刻每台服务器都要执行预热缓存用户吗？"></a>问题来了，在实际工作中，我们面对的往往是集群服务器，难道在某一刻每台服务器都要执行预热缓存用户吗？</h5></li><li><h5 id="显然不需要。我们只需要一台服务器成功缓存到用户就行了。"><a href="#显然不需要。我们只需要一台服务器成功缓存到用户就行了。" class="headerlink" title="显然不需要。我们只需要一台服务器成功缓存到用户就行了。"></a>显然不需要。我们只需要一台服务器成功缓存到用户就行了。</h5></li><li><h5 id="要控制定时任务在同一时间只有-1-个服务器能执行。（怎么做？）"><a href="#要控制定时任务在同一时间只有-1-个服务器能执行。（怎么做？）" class="headerlink" title="要控制定时任务在同一时间只有 1 个服务器能执行。（怎么做？）"></a>要控制定时任务在同一时间只有 1 个服务器能执行。（怎么做？）</h5></li><li><p>分离定时任务程序和主程序，只在 1 个服务器运行定时任务。成本太大</p></li><li><p>写死配置，每个服务器都执行定时任务，但是只有 ip 符合配置的服务器才真实执行业务逻辑，其他的直接返回。成本最低；但是我们的 IP 可能是不固定的，把 IP 写的太死了</p></li><li><p>动态配置，配置是可以轻松的、很方便地更新的（<strong>代码无需重启</strong>），但是只有 ip 符合配置的服务器才真实执行业务逻辑。问题：服务器多了、IP 不可控还是很麻烦，还是要人工修改</p></li><li><ul><li>数据库</li><li>Redis</li><li>配置中心（Nacos、Apollo、Spring Cloud Config）</li></ul></li><li><p>分布式锁，只有抢到锁的服务器才能执行业务逻辑。坏处：增加成本；好处：不用手动配置，多少个服务器都一样。</p></li><li><h5 id="单机就会存在单点故障。"><a href="#单机就会存在单点故障。" class="headerlink" title="单机就会存在单点故障。"></a>单机就会存在单点故障。</h5></li><li><h5 id="多的概念在这里不再赘述，可以去看鱼皮的项目笔记，分布式锁实现原理以及注意事项讲的很清楚"><a href="#多的概念在这里不再赘述，可以去看鱼皮的项目笔记，分布式锁实现原理以及注意事项讲的很清楚" class="headerlink" title="多的概念在这里不再赘述，可以去看鱼皮的项目笔记，分布式锁实现原理以及注意事项讲的很清楚"></a>多的概念在这里不再赘述，可以去看鱼皮的项目笔记，分布式锁实现原理以及注意事项讲的很清楚</h5></li></ul><h1 id="Redisson-实现分布式锁"><a href="#Redisson-实现分布式锁" class="headerlink" title="Redisson 实现分布式锁"></a>Redisson 实现分布式锁</h1><h4 id="Java-客户端，数据网格"><a href="#Java-客户端，数据网格" class="headerlink" title="Java 客户端，数据网格"></a>Java 客户端，数据网格</h4><h4 id="实现了很多-Java-里支持的接口和数据结构"><a href="#实现了很多-Java-里支持的接口和数据结构" class="headerlink" title="实现了很多 Java 里支持的接口和数据结构"></a>实现了很多 Java 里支持的接口和数据结构</h4><ul><li><h5 id="Redisson-是一个-java-操作-Redis-的客户端"><a href="#Redisson-是一个-java-操作-Redis-的客户端" class="headerlink" title="Redisson 是一个 java 操作 Redis 的客户端"></a>Redisson 是一个 java 操作 Redis 的客户端</h5></li><li><h5 id="提供了大量的分布式数据集来简化对-Redis-的操作和使用，可以让开发者像使用本地集合一样使用-Redis，完全感知不到-Redis-的存在。"><a href="#提供了大量的分布式数据集来简化对-Redis-的操作和使用，可以让开发者像使用本地集合一样使用-Redis，完全感知不到-Redis-的存在。" class="headerlink" title="提供了大量的分布式数据集来简化对 Redis 的操作和使用，可以让开发者像使用本地集合一样使用 Redis，完全感知不到 Redis 的存在。"></a>提供了大量的分布式数据集来简化对 Redis 的操作和使用，可以让开发者像使用本地集合一样使用 Redis，完全感知不到 Redis 的存在。</h5></li><li><h5 id="那我们就使用redission来快速实现分布式锁控制吧"><a href="#那我们就使用redission来快速实现分布式锁控制吧" class="headerlink" title="那我们就使用redission来快速实现分布式锁控制吧"></a>那我们就使用redission来快速实现分布式锁控制吧</h5></li><li><h5 id="导入相关依赖"><a href="#导入相关依赖" class="headerlink" title="导入相关依赖"></a>导入相关依赖</h5></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--redission--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.19.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="完成相关配置-config-RedissionConfig-java"><a href="#完成相关配置-config-RedissionConfig-java" class="headerlink" title="完成相关配置    config/RedissionConfig.java"></a>完成相关配置    config/RedissionConfig.java</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.redis&quot;)</span><br><span class="hljs-meta">@Data</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissionConfig</span> &#123;<br>    <span class="hljs-keyword">private</span> String host;<br><br>    <span class="hljs-keyword">private</span> String port;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 创建配置</span><br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">redisAddress</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;redis://%s:%s&quot;</span>, host, port);<br>        <span class="hljs-comment">//  使用单个Redis，没有开集群 useClusterServers()  设置地址和使用库</span><br>        config.useSingleServer().setAddress(redisAddress).setDatabase(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">// 2. 创建实例</span><br>        <span class="hljs-type">RedissonClient</span> <span class="hljs-variable">redisson</span> <span class="hljs-operator">=</span> Redisson.create(config);<br>        <span class="hljs-keyword">return</span> redisson;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="快速测试-test-RedisTest"><a href="#快速测试-test-RedisTest" class="headerlink" title="快速测试    test/RedisTest"></a>快速测试    test/RedisTest</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonTest</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// list，数据存在本地 JVM 内存中</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;yupi&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;list:&quot;</span> + list.get(<span class="hljs-number">0</span>));<br><br>        list.remove(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">// 数据存在 redis 的内存中</span><br>        RList&lt;String&gt; rList = redissonClient.getList(<span class="hljs-string">&quot;test-list&quot;</span>);<br>        rList.add(<span class="hljs-string">&quot;yupi&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;rlist:&quot;</span> + rList.get(<span class="hljs-number">0</span>));<br><span class="hljs-comment">// rList.remove(0);</span><br><br>        <span class="hljs-comment">// map</span><br>        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;yupi&quot;</span>, <span class="hljs-number">10</span>);<br>        map.get(<span class="hljs-string">&quot;yupi&quot;</span>);<br><br>        RMap&lt;Object, Object&gt; map1 = redissonClient.getMap(<span class="hljs-string">&quot;test-map&quot;</span>);<br>        map1.put(<span class="hljs-string">&quot;memory&quot;</span>, <span class="hljs-number">12</span>);<br>        map1.put(<span class="hljs-string">&quot;memory2&quot;</span>, <span class="hljs-number">12</span>);<br>        map1.put(<span class="hljs-string">&quot;memory3&quot;</span>, <span class="hljs-number">12</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="改造定时执行任务，用分布式锁实现，以下是实现逻辑："><a href="#改造定时执行任务，用分布式锁实现，以下是实现逻辑：" class="headerlink" title="改造定时执行任务，用分布式锁实现，以下是实现逻辑："></a>改造定时执行任务，用分布式锁实现，以下是实现逻辑：</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 邓哈哈</span><br><span class="hljs-comment"> * 2023/4/15 15:22</span><br><span class="hljs-comment"> * Function: 缓存预热</span><br><span class="hljs-comment"> * Version 1.0</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PreCacheJob</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedissonClient redissonClient;<br>    <span class="hljs-comment">// 重点用户id(提供推送的用户id)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;Long&gt; mainUserList = List.of(<span class="hljs-number">1L</span>);<br>    <span class="hljs-comment">// 每天执行，预热推荐用户</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 * * * *  *&quot;)</span>   <span class="hljs-comment">//自己设置时间测试</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doCacheRecommendUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 设置分布式锁</span><br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;memory:preCacheJob:doCache:lock&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 如果抢锁成功</span><br>            <span class="hljs-keyword">if</span> (lock.tryLock(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, TimeUnit.MILLISECONDS)) &#123;<br>                <span class="hljs-comment">// 遍历每个重点用户</span><br>                <span class="hljs-keyword">for</span> (Long userId : mainUserList) &#123;<br>                    QueryWrapper&lt;User&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>                    <span class="hljs-comment">// 分页查询用户信息</span><br>                    Page&lt;User&gt; userPage = userService.page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>), qw);<br>                    <span class="hljs-comment">// 为每个重点用户设置预查询锁</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">redisKey</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;memory:user:recommend:%s&quot;</span>, userId);<br>                    <span class="hljs-comment">//写缓存,30s过期</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        redisTemplate.opsForValue().set(redisKey, userPage, <span class="hljs-number">30000</span>, TimeUnit.MILLISECONDS);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        log.error(<span class="hljs-string">&quot;redis set key error&quot;</span>, e);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            log.info(<span class="hljs-string">&quot;error = &quot;</span> + e);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 如果该分布式锁是自己持有的</span><br>            <span class="hljs-keyword">if</span> (lock.isHeldByCurrentThread()) &#123;<br>                log.info(String.format(<span class="hljs-string">&quot;unlock: %s&quot;</span>, Thread.currentThread().getId()));<br>                <span class="hljs-comment">// 释放锁</span><br>                lock.unlock();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><h5 id="这个逻辑就很清晰了，我们多开几个服务器测试一把"><a href="#这个逻辑就很清晰了，我们多开几个服务器测试一把" class="headerlink" title="这个逻辑就很清晰了，我们多开几个服务器测试一把"></a>这个逻辑就很清晰了，我们多开几个服务器测试一把</h5></li><li><h5 id="下次再更新这块儿吧，还有很多坑呢"><a href="#下次再更新这块儿吧，还有很多坑呢" class="headerlink" title="下次再更新这块儿吧，还有很多坑呢"></a>下次再更新这块儿吧，还有很多坑呢</h5></li></ul><h2 id="实现组队功能"><a href="#实现组队功能" class="headerlink" title="实现组队功能"></a>实现组队功能</h2><ul><li><h5 id="队伍表"><a href="#队伍表" class="headerlink" title="队伍表"></a>队伍表</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">create table <span class="hljs-title function_">team</span><br><span class="hljs-params">(</span><br><span class="hljs-params">    id          bigint auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span> primary key,</span><br><span class="hljs-params">    name        varchar(<span class="hljs-number">256</span>)</span>                       not <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;队伍名称&#x27;</span>,<br>    description <span class="hljs-title function_">varchar</span><span class="hljs-params">(<span class="hljs-number">1024</span>)</span>                      <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;描述&#x27;</span>,<br>    max_num     <span class="hljs-type">int</span>      <span class="hljs-keyword">default</span> <span class="hljs-number">1</span>                 not <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;最大人数&#x27;</span>,<br>    expire_time datetime                           <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;过期时间&#x27;</span>,<br>    user_id     bigint comment <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>    status      <span class="hljs-type">int</span>      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 not <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;0 - 公开，1 - 私有，2 - 加密&#x27;</span>,<br>    password    <span class="hljs-title function_">varchar</span><span class="hljs-params">(<span class="hljs-number">512</span>)</span>                       <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br><br>    create_time datetime <span class="hljs-keyword">default</span> CURRENT_TIMESTAMP <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    update_time datetime <span class="hljs-keyword">default</span> CURRENT_TIMESTAMP <span class="hljs-literal">null</span> on update CURRENT_TIMESTAMP,<br>    is_delete   tinyint  <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 not <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;是否删除&#x27;</span><br>)<br>    comment <span class="hljs-string">&#x27;队伍&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li><h5 id="队伍-用户表"><a href="#队伍-用户表" class="headerlink" title="队伍-用户表"></a>队伍-用户表</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">create table <span class="hljs-title function_">user_team</span><br><span class="hljs-params">(</span><br><span class="hljs-params">    id          bigint auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span></span><br><span class="hljs-params">        primary key,</span><br><span class="hljs-params">    user_id     bigint comment <span class="hljs-string">&#x27;用户id&#x27;</span>,</span><br><span class="hljs-params">    team_id     bigint comment <span class="hljs-string">&#x27;队伍id&#x27;</span>,</span><br><span class="hljs-params">    join_time   datetime                           <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;加入时间&#x27;</span>,</span><br><span class="hljs-params">    create_time datetime <span class="hljs-keyword">default</span> CURRENT_TIMESTAMP <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,</span><br><span class="hljs-params">    update_time datetime <span class="hljs-keyword">default</span> CURRENT_TIMESTAMP <span class="hljs-literal">null</span> on update CURRENT_TIMESTAMP,</span><br><span class="hljs-params">    is_delete   tinyint  <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 not <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;是否删除&#x27;</span></span><br><span class="hljs-params">)</span><br>    comment <span class="hljs-string">&#x27;用户队伍关系&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li><h5 id="首先快速开发相关接口，之后再根据业务逻辑优化"><a href="#首先快速开发相关接口，之后再根据业务逻辑优化" class="headerlink" title="首先快速开发相关接口，之后再根据业务逻辑优化"></a>首先快速开发相关接口，之后再根据业务逻辑优化</h5><ul><li><h5 id="添加队伍"><a href="#添加队伍" class="headerlink" title="添加队伍"></a>添加队伍</h5></li><li><h5 id="删除队伍"><a href="#删除队伍" class="headerlink" title="删除队伍"></a>删除队伍</h5></li><li><h5 id="修改队伍"><a href="#修改队伍" class="headerlink" title="修改队伍"></a>修改队伍</h5></li><li><h5 id="按队伍id查找队伍"><a href="#按队伍id查找队伍" class="headerlink" title="按队伍id查找队伍"></a>按队伍id查找队伍</h5></li><li><h5 id="查找全部队伍"><a href="#查找全部队伍" class="headerlink" title="查找全部队伍"></a>查找全部队伍</h5></li></ul></li><li><h5 id="咱这建表速度还是很快滴"><a href="#咱这建表速度还是很快滴" class="headerlink" title="咱这建表速度还是很快滴~"></a>咱这建表速度还是很快滴~</h5></li><li><h5 id="再然后借助MybatisX-Generator快速生成domain、mapper、service和相关注意事项等就不说了"><a href="#再然后借助MybatisX-Generator快速生成domain、mapper、service和相关注意事项等就不说了" class="headerlink" title="再然后借助MybatisX-Generator快速生成domain、mapper、service和相关注意事项等就不说了"></a>再然后借助MybatisX-Generator快速生成domain、mapper、service和相关注意事项等就不说了</h5></li></ul><h3 id="新增队伍"><a href="#新增队伍" class="headerlink" title="新增队伍"></a>新增队伍</h3><ul><li><h5 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 新增队伍</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> teamAddRequest 队伍</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> 队伍id</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-meta">@Transactional</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">teamAdd</span><span class="hljs-params">(TeamAddRequest teamAddRequest, HttpServletRequest request)</span> &#123;<br>       <span class="hljs-type">Team</span> <span class="hljs-variable">team</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Team</span>();<br>       BeanUtils.copyProperties(teamAddRequest, team);<br><br>       <span class="hljs-comment">// 1.是否登录，未登录不允许创建</span><br>       <span class="hljs-type">User</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> getLoginUser(request);<br>       <span class="hljs-keyword">if</span> (loginUser == <span class="hljs-literal">null</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NOT_REGISTER);<br><br>       <span class="hljs-comment">// 2.队伍人数 &gt; 1 且 &lt;= 20</span><br>       <span class="hljs-type">Integer</span> <span class="hljs-variable">maxNum</span> <span class="hljs-operator">=</span> team.getMaxNum();<br>       <span class="hljs-keyword">if</span> (maxNum &lt; <span class="hljs-number">1</span> || maxNum &gt; <span class="hljs-number">20</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;队伍人数不符合要求&quot;</span>, <span class="hljs-number">70001</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>       <span class="hljs-comment">// 3.队伍标题 &lt;= 20</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> team.getName();<br>       <span class="hljs-keyword">if</span> (StringUtils.isBlank(name) || name.length() &gt; <span class="hljs-number">20</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;队伍标题不符合要求&quot;</span>, <span class="hljs-number">70002</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>       <span class="hljs-comment">// 4.描述 &lt;= 512</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">description</span> <span class="hljs-operator">=</span> team.getDescription();<br>       <span class="hljs-keyword">if</span> (StringUtils.isBlank(description) || description.length() &gt; <span class="hljs-number">512</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;队伍描述不符合要求&quot;</span>, <span class="hljs-number">70003</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>       <span class="hljs-comment">// 5.status 是否公开（int）不传默认为 0（公开）</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> Optional.ofNullable(team.getStatus()).orElse(<span class="hljs-number">0</span>);<br>       <span class="hljs-type">TeamStatusEnum</span> <span class="hljs-variable">statusEnum</span> <span class="hljs-operator">=</span> TeamStatusEnum.getEnumByValue(status);<br>       <span class="hljs-keyword">if</span> (statusEnum == <span class="hljs-literal">null</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;队伍状态不符合要求&quot;</span>, <span class="hljs-number">70004</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>       <span class="hljs-comment">// 6.如果 status 是加密状态，一定要有密码，且密码 &lt;= 32</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> team.getPassword();<br>       <span class="hljs-keyword">if</span> (TeamStatusEnum.SECRET.equals(statusEnum)) &#123;<br>           <span class="hljs-keyword">if</span> (StringUtils.isBlank(password) || password.length() &gt; <span class="hljs-number">32</span>)<br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;队伍密码不符合要求&quot;</span>, <span class="hljs-number">70005</span>, <span class="hljs-string">&quot;&quot;</span>);<br>       &#125;<br>       <span class="hljs-comment">// 7.当前时间 &gt; 超时时间</span><br>       <span class="hljs-type">Date</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> team.getExpireTime();<br>       <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().after(expireTime))<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;超时时间不符合要求&quot;</span>, <span class="hljs-number">70006</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>       <span class="hljs-comment">// 8. 校验用户最多创建 5 个队伍</span><br>       <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> loginUser.getId();<br>       QueryWrapper&lt;Team&gt; lqw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>       lqw.eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId);<br>       <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.count(lqw);<br>       <span class="hljs-keyword">if</span> (count &gt;= <span class="hljs-number">5</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;无法创建新的队伍&quot;</span>, <span class="hljs-number">70007</span>, <span class="hljs-string">&quot;该用户创建队伍数量超出限制&quot;</span>);<br><br>       <span class="hljs-comment">// 9.插入队伍信息到队伍表</span><br>       team.setId(<span class="hljs-literal">null</span>);<br>       team.setUserId(userId);<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">teamSave</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.save(team);<br><br>       <span class="hljs-comment">// 10.插入用户 =&gt; 队伍关系到关系表</span><br>       <span class="hljs-type">UserTeam</span> <span class="hljs-variable">userTeam</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserTeam</span>();<br>       userTeam.setUserId(userId);<br>       userTeam.setTeamId(team.getId());<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">userTeamSave</span> <span class="hljs-operator">=</span> userTeamService.save(userTeam);<br><br>       <span class="hljs-keyword">return</span> teamSave &amp;&amp; userTeamSave;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="这里status校验要留意，封装一个-constant-TeamStatuaEnum"><a href="#这里status校验要留意，封装一个-constant-TeamStatuaEnum" class="headerlink" title="这里status校验要留意，封装一个 constant/TeamStatuaEnum"></a>这里status校验要留意，封装一个 constant/TeamStatuaEnum</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 邓哈哈</span><br><span class="hljs-comment"> * 2023/4/20 10:36</span><br><span class="hljs-comment"> * Function: 队伍状态枚举</span><br><span class="hljs-comment"> * Version 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">TeamStatusEnum</span> &#123;<br><br>    PUBLIC(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;公开&quot;</span>),<br>    PRIVATE(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;私有&quot;</span>),<br>    SECRET(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;加密&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-keyword">private</span> String text;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断用户状态</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 用户状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 存在与否</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TeamStatusEnum <span class="hljs-title function_">getEnumByValue</span><span class="hljs-params">(Integer value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        TeamStatusEnum[] values = TeamStatusEnum.values();<br>        <span class="hljs-keyword">for</span> (TeamStatusEnum teamStatusEnum : values) &#123;<br>            <span class="hljs-keyword">if</span> (teamStatusEnum.getValue() == value) &#123;<br>                <span class="hljs-keyword">return</span> teamStatusEnum;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    TeamStatusEnum(<span class="hljs-type">int</span> value, String text) &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>        <span class="hljs-built_in">this</span>.text = text;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getText</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> text;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setText</span><span class="hljs-params">(String text)</span> &#123;<br>        <span class="hljs-built_in">this</span>.text = text;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="提醒一下，Enum枚举类不支持-Data注解哦"><a href="#提醒一下，Enum枚举类不支持-Data注解哦" class="headerlink" title="提醒一下，Enum枚举类不支持@Data注解哦"></a>提醒一下，Enum枚举类不支持@Data注解哦</h5></li><li><h5 id="再封装一个-model-request-TeamAddRequest，前端人员无需自行筛选填写哪些字段，这里还涉及到了-BeanUtils-的用法"><a href="#再封装一个-model-request-TeamAddRequest，前端人员无需自行筛选填写哪些字段，这里还涉及到了-BeanUtils-的用法" class="headerlink" title="再封装一个 /model/request/TeamAddRequest，前端人员无需自行筛选填写哪些字段，这里还涉及到了 BeanUtils 的用法"></a>再封装一个 /model/request/TeamAddRequest，前端人员无需自行筛选填写哪些字段，这里还涉及到了 BeanUtils 的用法</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 邓哈哈</span><br><span class="hljs-comment"> * 2023/4/20 14:22</span><br><span class="hljs-comment"> * Function: 队伍创建接受类</span><br><span class="hljs-comment"> * Version 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TeamAddRequest</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 队伍名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 描述</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String description;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最大人数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer maxNum;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 过期时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date expireTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 0 - 公开，1 - 私有，2 - 加密</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer status;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 密码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span><br>   <span class="hljs-keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="hljs-title function_">teamAdd</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> TeamAddRequest teamAddRequest, HttpServletRequest request)</span> &#123;<br>       <span class="hljs-comment">// controller对参数的校验</span><br>       <span class="hljs-keyword">if</span> (teamAddRequest == <span class="hljs-literal">null</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.PARMS_ERROR);<br><br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">teamAdd</span> <span class="hljs-operator">=</span> teamService.teamAdd(teamAddRequest, request);<br>       <span class="hljs-keyword">return</span> ResultUtils.success(teamAdd);<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="完成了，新增队伍功能暂时告一段落"><a href="#完成了，新增队伍功能暂时告一段落" class="headerlink" title="完成了，新增队伍功能暂时告一段落"></a>完成了，新增队伍功能暂时告一段落</h5></li></ul><h2 id="阶段性问题"><a href="#阶段性问题" class="headerlink" title="阶段性问题"></a>阶段性问题</h2><ol><li><h5 id="使用-Swagger-接口文档快速测试，这里访问文档还报错了，在启动类上加了-EnableSwagger2WebMvc-就解决了"><a href="#使用-Swagger-接口文档快速测试，这里访问文档还报错了，在启动类上加了-EnableSwagger2WebMvc-就解决了" class="headerlink" title="使用 Swagger 接口文档快速测试，这里访问文档还报错了，在启动类上加了 @EnableSwagger2WebMvc 就解决了"></a>使用 Swagger 接口文档快速测试，这里访问文档还报错了，在启动类上加了 @EnableSwagger2WebMvc 就解决了</h5></li><li><h5 id="奶奶的想启动个前端登陆一下还他妈报错启动失败，看了一下是我的node没了（鬼删的？）导致npm环境变量没配好"><a href="#奶奶的想启动个前端登陆一下还他妈报错启动失败，看了一下是我的node没了（鬼删的？）导致npm环境变量没配好" class="headerlink" title="奶奶的想启动个前端登陆一下还他妈报错启动失败，看了一下是我的node没了（鬼删的？）导致npm环境变量没配好"></a>奶奶的想启动个前端登陆一下还他妈报错启动失败，看了一下是我的node没了（鬼删的？）导致npm环境变量没配好</h5></li><li><h5 id="看了眼环境变量，真几把乱，我就纳闷了我记得很整洁来着，很快就搞好了"><a href="#看了眼环境变量，真几把乱，我就纳闷了我记得很整洁来着，很快就搞好了" class="headerlink" title="看了眼环境变量，真几把乱，我就纳闷了我记得很整洁来着，很快就搞好了"></a>看了眼环境变量，真几把乱，我就纳闷了我记得很整洁来着，很快就搞好了</h5></li><li><h5 id="重新捋了一遍通用返回对象，新增了新的异常对象（ErrorCode-errorCode，String-description）"><a href="#重新捋了一遍通用返回对象，新增了新的异常对象（ErrorCode-errorCode，String-description）" class="headerlink" title="重新捋了一遍通用返回对象，新增了新的异常对象（ErrorCode errorCode，String description）"></a>重新捋了一遍通用返回对象，新增了新的异常对象（ErrorCode errorCode，String description）</h5><h5 id="实现思路可以看下通用返回对象-Xmind，具体代码还请跳转至用户中心-开发文档，内容已同步更新"><a href="#实现思路可以看下通用返回对象-Xmind，具体代码还请跳转至用户中心-开发文档，内容已同步更新" class="headerlink" title="实现思路可以看下通用返回对象.Xmind，具体代码还请跳转至用户中心-开发文档，内容已同步更新"></a>实现思路可以看下通用返回对象.Xmind，具体代码还请跳转至用户中心-开发文档，内容已同步更新</h5></li><li><h5 id="改了下npm环境变量还手贱删除了nodejs，俺的个人博客都被搞垮啦，之后会总结个人博客部署流程的"><a href="#改了下npm环境变量还手贱删除了nodejs，俺的个人博客都被搞垮啦，之后会总结个人博客部署流程的" class="headerlink" title="改了下npm环境变量还手贱删除了nodejs，俺的个人博客都被搞垮啦，之后会总结个人博客部署流程的"></a>改了下npm环境变量还手贱删除了nodejs，俺的个人博客都被搞垮啦，之后会总结个人博客部署流程的</h5></li><li><h5 id="team表添加了join-num字段，存储当前队伍已加人数，记得同步修改更新xml、mapper、domain"><a href="#team表添加了join-num字段，存储当前队伍已加人数，记得同步修改更新xml、mapper、domain" class="headerlink" title="team表添加了join_num字段，存储当前队伍已加人数，记得同步修改更新xml、mapper、domain"></a>team表添加了join_num字段，存储当前队伍已加人数，记得同步修改更新xml、mapper、domain</h5></li></ol><h3 id="查询队伍"><a href="#查询队伍" class="headerlink" title="查询队伍"></a>查询队伍</h3><ul><li><h5 id="service层-1"><a href="#service层-1" class="headerlink" title="service层"></a>service层</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询队伍(分页查询)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> teamQuery 查询参数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 符合条件的队伍</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Page&lt;Team&gt; <span class="hljs-title function_">teamList</span><span class="hljs-params">(TeamQuery teamQuery)</span> &#123;<br>    <span class="hljs-type">Team</span> <span class="hljs-variable">team</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Team</span>();<br>    BeanUtils.copyProperties(teamQuery, team);<br>    QueryWrapper&lt;Team&gt; tqw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    <span class="hljs-comment">// 根据队伍名查询</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> teamQuery.getName();<br>    <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(name) &amp;&amp; name.length() &lt;= <span class="hljs-number">20</span>)<br>        tqw.like(<span class="hljs-string">&quot;name&quot;</span>, name);<br><br>    <span class="hljs-comment">// 根据队伍描述查询</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">description</span> <span class="hljs-operator">=</span> teamQuery.getDescription();<br>    <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(description) &amp;&amp; description.length() &lt;= <span class="hljs-number">512</span>)<br>        tqw.like(<span class="hljs-string">&quot;description&quot;</span>, description);<br><br>    <span class="hljs-comment">// 根据队长id查询</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> teamQuery.getUserId();<br>    <span class="hljs-keyword">if</span> (userId != <span class="hljs-literal">null</span> &amp;&amp; userId &gt; <span class="hljs-number">0</span>)<br>        tqw.eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId);<br><br>    <span class="hljs-comment">// 根据最大人数查询</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">maxNum</span> <span class="hljs-operator">=</span> teamQuery.getMaxNum();<br>    <span class="hljs-keyword">if</span> (maxNum != <span class="hljs-literal">null</span> &amp;&amp; maxNum &gt; <span class="hljs-number">0</span>)<br>        tqw.eq(<span class="hljs-string">&quot;max_num&quot;</span>, maxNum);<br><br>    <span class="hljs-comment">// 根据队伍状态查询</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> teamQuery.getStatus();<br>    <span class="hljs-type">TeamStatusEnum</span> <span class="hljs-variable">statusEnum</span> <span class="hljs-operator">=</span> TeamStatusEnum.getEnumByValue(status);<br>    <span class="hljs-keyword">if</span> (statusEnum != <span class="hljs-literal">null</span>)<br>        tqw.like(<span class="hljs-string">&quot;status&quot;</span>, status);<br><br>    <span class="hljs-keyword">return</span> teamMapper.selectPage(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>), tqw);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="逻辑还是很简单的，前端传param参数，后端接口封装一个队伍查询信息类，再依次对每个字段校验，最后分页查询实现"><a href="#逻辑还是很简单的，前端传param参数，后端接口封装一个队伍查询信息类，再依次对每个字段校验，最后分页查询实现" class="headerlink" title="逻辑还是很简单的，前端传param参数，后端接口封装一个队伍查询信息类，再依次对每个字段校验，最后分页查询实现"></a>逻辑还是很简单的，前端传param参数，后端接口封装一个队伍查询信息类，再依次对每个字段校验，最后分页查询实现</h5></li><li><h5 id="这里还遇到一个问题，我写成这样：QueryWrapper-tqw-new-QueryWrapper-lt-gt-team-它的SQL查询语句就默认自带了-where-name-导致-twq-like-“name”-name-失效了，搞了半天才发现"><a href="#这里还遇到一个问题，我写成这样：QueryWrapper-tqw-new-QueryWrapper-lt-gt-team-它的SQL查询语句就默认自带了-where-name-导致-twq-like-“name”-name-失效了，搞了半天才发现" class="headerlink" title="这里还遇到一个问题，我写成这样：QueryWrapper tqw = new QueryWrapper&lt;&gt;(team)   它的SQL查询语句就默认自带了 where name = ? 导致 twq.like(“name”, name) 失效了，搞了半天才发现"></a>这里还遇到一个问题，我写成这样：QueryWrapper<Team> tqw = new QueryWrapper&lt;&gt;(team)   它的SQL查询语句就默认自带了 where name = ? 导致 twq.like(“name”, name) 失效了，搞了半天才发现</h5></li><li><h5 id="controller层-1"><a href="#controller层-1" class="headerlink" title="controller层"></a>controller层</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 查询队伍</span><br><span class="hljs-comment">    * 分页查询</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> teamQuery 查询队伍参数</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> 队伍列表</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@GetMapping(&quot;/list/page&quot;)</span><br>   <span class="hljs-keyword">public</span> BaseResponse&lt;Page&lt;Team&gt;&gt; <span class="hljs-title function_">teamList</span><span class="hljs-params">(TeamQuery teamQuery)</span> &#123;<br>       <span class="hljs-comment">// controller对参数的校验</span><br><br>       Page&lt;Team&gt; teamPage = teamService.teamList(teamQuery);<br>       <span class="hljs-keyword">return</span> ResultUtils.success(teamPage);<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="修改队伍-1"><a href="#修改队伍-1" class="headerlink" title="修改队伍"></a>修改队伍</h3><h3 id="用户加入队伍"><a href="#用户加入队伍" class="headerlink" title="用户加入队伍"></a>用户加入队伍</h3><h3 id="用户退出队伍"><a href="#用户退出队伍" class="headerlink" title="用户退出队伍"></a>用户退出队伍</h3><h3 id="队长解散队伍"><a href="#队长解散队伍" class="headerlink" title="队长解散队伍"></a>队长解散队伍</h3>]]></content>
    
    
    <categories>
      
      <category>project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
      <tag>开发经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>导读</title>
    <link href="/blog/2023/03/23/%E5%AF%BC%E8%AF%BB/"/>
    <url>/blog/2023/03/23/%E5%AF%BC%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令</title>
    <link href="/blog/2023/03/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/blog/2023/03/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="通用格式"><a href="#通用格式" class="headerlink" title="通用格式"></a>通用格式</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">command <span class="hljs-selector-attr">[-options]</span> <span class="hljs-selector-attr">[parameter]</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">command : 命令本身<br>-options : 选项[可选] <br>parameter : 参数[可选]<br></code></pre></td></tr></table></figure><h5 id="ls-列出目录"><a href="#ls-列出目录" class="headerlink" title="ls - 列出目录"></a>ls - 列出目录</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">ls [<span class="hljs-operator">-</span>a <span class="hljs-operator">-</span>l <span class="hljs-operator">-</span>h] [Linux路径]<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">-a : 列出全部文件, 包含隐藏的文件/文件夹<br>-l : 纵向形式排列信息<br>-h : 列出文件大小, 与-<span class="hljs-type">l</span>配合使用<br></code></pre></td></tr></table></figure><h5 id="cd-切换工作目录-Change-Directory"><a href="#cd-切换工作目录-Change-Directory" class="headerlink" title="cd - 切换工作目录  (Change Directory)"></a>cd - 切换工作目录  (Change Directory)</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span><span class="hljs-meta"> [Linux路径]</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd   回到用户的HOME目录 <span class="hljs-regexp">/home/m</span>emory<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/ 回到根目录 /</span><br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">注:  / 表示根目录 <br>~/ 表示 <span class="hljs-string">/home/memory</span> <br>    <span class="hljs-string">./</span> 表示当前目录<br>    <span class="hljs-string">../</span> 表示上一级目录<br></code></pre></td></tr></table></figure><h5 id="pwd-查看当前工作目录-Print-Work-Directory"><a href="#pwd-查看当前工作目录-Print-Work-Directory" class="headerlink" title="pwd - 查看当前工作目录  (Print Work Directory)"></a>pwd - 查看当前工作目录  (Print Work Directory)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span> 无选项 无参数<br></code></pre></td></tr></table></figure><h5 id="mkdir-创建目录-Make-Directory"><a href="#mkdir-创建目录-Make-Directory" class="headerlink" title="mkdir - 创建目录  (Make Directory)"></a>mkdir - 创建目录  (Make Directory)</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir [-p] Linux路径<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">-p : 选填, 可创建多级目录<br>Linux路径 : 必填<br></code></pre></td></tr></table></figure><h4 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h4><ul><li><h5 id="touch-创建文件"><a href="#touch-创建文件" class="headerlink" title="touch - 创建文件"></a>touch - 创建文件</h5></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> Linux路径<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">无选项 参数必填 <br></code></pre></td></tr></table></figure><ul><li><h5 id="cat-查看文件内容"><a href="#cat-查看文件内容" class="headerlink" title="cat - 查看文件内容"></a>cat - 查看文件内容</h5></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> Linux路径<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">无选项 参数必填<br></code></pre></td></tr></table></figure><ul><li><h5 id="more-查看文件内容-可翻页查看-空格翻页-q退出"><a href="#more-查看文件内容-可翻页查看-空格翻页-q退出" class="headerlink" title="more - 查看文件内容  (可翻页查看, 空格翻页, q退出)"></a>more - 查看文件内容  (可翻页查看, 空格翻页, q退出)</h5></li></ul><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">more</span> Linux路径<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">无选项 参数必填<br></code></pre></td></tr></table></figure><ul><li><h5 id="cp-复制文件-文件夹-copy"><a href="#cp-复制文件-文件夹-copy" class="headerlink" title="cp - 复制文件/文件夹  (copy)"></a>cp - 复制文件/文件夹  (copy)</h5></li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">cp</span> [-r] 参数一 参数二<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">-r : 可选, 复制文件夹时使用<br>参数一 : <span class="hljs-type">Linux</span>路径, 表示被复制的文件或文件夹<br>参数二 : <span class="hljs-type">Linux</span>路径, 表示要复制去的地方<br></code></pre></td></tr></table></figure><h5 id="rm-删除文件-文件夹-remove"><a href="#rm-删除文件-文件夹-remove" class="headerlink" title="rm - 删除文件/文件夹  (remove)"></a>rm - 删除文件/文件夹  (remove)</h5><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">rm [-r -f] 参数一 参数二 ......<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">-r : 删除文件夹时使用<br>-f : 强制删除 (<span class="hljs-type">force</span>)<br>参数 : 要删除的文件/文件夹路径<br></code></pre></td></tr></table></figure><h5 id="mv-移动文件-文件夹-move"><a href="#mv-移动文件-文件夹-move" class="headerlink" title="mv - 移动文件/文件夹 (move)"></a>mv - 移动文件/文件夹 (move)</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">move 参数一 参数二<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">参数一 : <span class="hljs-type">Linux</span>路径, 表示被移动的文件或文件夹<br>参数二 : <span class="hljs-type">Linux</span>路径, 表示移动去的地方, <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>经验</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL从入门到入土</title>
    <link href="/blog/2023/03/22/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <url>/blog/2023/03/22/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</url>
    
    <content type="html"><![CDATA[<p>注：本文整理自网友的优秀学习笔记，结合了自己的学习经验，可供日常学习参考和使用</p><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="通用语法及分类"><a href="#通用语法及分类" class="headerlink" title="通用语法及分类"></a>通用语法及分类</h2><ul><li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li><li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL: 数据查询语言，用来查询数据库中表的记录</li><li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li></ul><h3 id="DDL（数据定义语言）"><a href="#DDL（数据定义语言）" class="headerlink" title="DDL（数据定义语言）"></a>DDL（数据定义语言）</h3><p>数据定义语言</p><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li></ul><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p><p>创建表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE 表名(<br>字段1 字段1类型 [COMMENT 字段1注释],<br>字段2 字段2类型 [COMMENT 字段2注释],<br>字段3 字段3类型 [COMMENT 字段3注释],<br>...<br>字段n 字段n类型 [COMMENT 字段n注释]<br>)[ COMMENT 表注释 ];<br></code></pre></td></tr></table></figure><p><strong>最后一个字段后面没有逗号</strong></p><p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code></p><p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code></p><p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p><p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p><p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p><h3 id="DML（数据操作语言）"><a href="#DML（数据操作语言）" class="headerlink" title="DML（数据操作语言）"></a>DML（数据操作语言）</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p><p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>字符串和日期类型数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内</li></ul><h4 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p><p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p><h3 id="DQL（数据查询语言）"><a href="#DQL（数据查询语言）" class="headerlink" title="DQL（数据查询语言）"></a>DQL（数据查询语言）</h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>字段列表<br>FROM<br>表名字段<br>WHERE<br>条件列表<br>GROUP BY<br>分组字段列表<br>HAVING<br>分组后的条件列表<br>ORDER BY<br>排序字段列表<br>LIMIT<br>分页参数<br></code></pre></td></tr></table></figure><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p><p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p><p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p><p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code><br>/ 之后的_不作为通配符</p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p><p>条件：</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 &#124;&#124;</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 年龄等于30<br>select * from employee where age = 30;<br>-- 年龄小于30<br>select * from employee where age &lt; 30;<br>-- 小于等于<br>select * from employee where age &lt;= 30;<br>-- 没有身份证<br>select * from employee where idcard is null or idcard = &#x27;&#x27;;<br>-- 有身份证<br>select * from employee where idcard;<br>select * from employee where idcard is not null;<br>-- 不等于<br>select * from employee where age != 30;<br>-- 年龄在20到30之间<br>select * from employee where age between 20 and 30;<br>select * from employee where age &gt;= 20 and age &lt;= 30;<br>-- 下面语句不报错，但查不到任何信息<br>select * from employee where age between 30 and 20;<br>-- 性别为女且年龄小于30<br>select * from employee where age &lt; 30 and gender = &#x27;女&#x27;;<br>-- 年龄等于25或30或35<br>select * from employee where age = 25 or age = 30 or age = 35;<br>select * from employee where age in (25, 30, 35);<br>-- 姓名为两个字<br>select * from employee where name like &#x27;__&#x27;;<br>-- 身份证最后为X<br>select * from employee where idcard like &#x27;%X&#x27;;<br></code></pre></td></tr></table></figure><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p>常见聚合函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p><p>where 和 having 的区别：</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）<br>select count(*) from employee group by gender;<br>-- 根据性别分组，统计男性和女性数量<br>select gender, count(*) from employee group by gender;<br>-- 根据性别分组，统计男性和女性的平均年龄<br>select gender, avg(age) from employee group by gender;<br>-- 年龄小于45，并根据工作地址分组<br>select workaddress, count(*) from employee where age &lt; 45 group by workaddress;<br>-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址<br>select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;<br></code></pre></td></tr></table></figure><h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li></ul><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p><p>排序方式：</p><ul><li>ASC: 升序（默认）</li><li>DESC: 降序</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 根据年龄升序排序<br>SELECT * FROM employee ORDER BY age ASC;<br>SELECT * FROM employee ORDER BY age;<br>-- 两字段排序，根据年龄升序排序，入职时间降序排序<br>SELECT * FROM employee ORDER BY age ASC, entrydate DESC;<br></code></pre></td></tr></table></figure><h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询第一页数据，展示10条<br>SELECT * FROM employee LIMIT 0, 10;<br>-- 查询第二页<br>SELECT * FROM employee LIMIT 10, 10;<br></code></pre></td></tr></table></figure><h5 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li></ul><h4 id="DQL执行顺序"><a href="#DQL执行顺序" class="headerlink" title="DQL执行顺序"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>查询用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">USER mysql;<br>SELECT * FROM user;<br></code></pre></td></tr></table></figure><p>创建用户:<br><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p><p>修改用户密码：<br><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p><p>删除用户：<br><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建用户test，只能在当前主机localhost访问<br>create user &#x27;test&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;<br>-- 创建用户test，能在任意主机访问<br>create user &#x27;test&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;<br>create user &#x27;test&#x27; identified by &#x27;123456&#x27;;<br>-- 修改密码<br>alter user &#x27;test&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;1234&#x27;;<br>-- 删除用户<br>drop user &#x27;test&#x27;@&#x27;localhost&#x27;;<br></code></pre></td></tr></table></figure><h5 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>主机名可以使用 % 通配</li></ul><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>常用权限：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table><p>更多权限请看<a href="#%E6%9D%83%E9%99%90%E4%B8%80%E8%A7%88%E8%A1%A8" title="权限一览表">权限一览表</a></p><p>查询权限：<br><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p><h5 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多个权限用逗号分隔</li><li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>字符串函数</li><li>数值函数</li><li>日期函数</li><li>流程函数</li></ul><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串全部转为大写</td></tr><tr><td>LPAD(str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str, n, pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 拼接<br>SELECT CONCAT(&#x27;Hello&#x27;, &#x27;World&#x27;);<br>-- 小写<br>SELECT LOWER(&#x27;Hello&#x27;);<br>-- 大写<br>SELECT UPPER(&#x27;Hello&#x27;);<br>-- 左填充<br>SELECT LPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);<br>-- 右填充<br>SELECT RPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);<br>-- 去除空格<br>SELECT TRIM(&#x27; Hello World &#x27;);<br>-- 切片（起始索引为1）<br>SELECT SUBSTRING(&#x27;Hello World&#x27;, 1, 5);<br></code></pre></td></tr></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回x/y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数x的四舍五入值，保留y位小数</td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- DATE_ADD<br>SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);<br></code></pre></td></tr></table></figure><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果val1为true，返回res1，… 否则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select<br>name,<br>(case when age &gt; 30 then &#x27;中年&#x27; else &#x27;青年&#x27; end)<br>from employee;<br>select<br>name,<br>(case workaddress when &#x27;北京市&#x27; then &#x27;一线城市&#x27; when &#x27;上海市&#x27; then &#x27;一线城市&#x27; else &#x27;二线城市&#x27; end) as &#x27;工作地址&#x27;<br>from employee;<br></code></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>分类：</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.1版本后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><p>约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。</p><h3 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h3><table><thead><tr><th>约束条件</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>PRIMARY KEY</td></tr><tr><td>自动增长</td><td>AUTO_INCREMENT</td></tr><tr><td>不为空</td><td>NOT NULL</td></tr><tr><td>唯一</td><td>UNIQUE</td></tr><tr><td>逻辑条件</td><td>CHECK</td></tr><tr><td>默认值</td><td>DEFAULT</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table user(<br>id int primary key auto_increment,<br>name varchar(10) not null unique,<br>age int check(age &gt; 0 and age &lt; 120),<br>status char(1) default &#x27;1&#x27;,<br>gender char(1)<br>);<br></code></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>添加外键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE 表名(<br>字段名 字段类型,<br>...<br>[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)<br>);<br>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);<br><br>-- 例子<br>alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);<br></code></pre></td></tr></table></figure><p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p><h4 id="删除-更新行为"><a href="#删除-更新行为" class="headerlink" title="删除/更新行为"></a>删除/更新行为</h4><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）</td></tr><tr><td>RESTRICT</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）</td></tr><tr><td>CASCADE</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td></tr></tbody></table><p>更改删除/更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p><blockquote><p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p></blockquote><p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分</p><p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p><p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p><p>显式性能比隐式高</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询员工姓名，及关联的部门的名称<br>-- 隐式<br>select e.name, d.name from employee as e, dept as d where e.dept = d.id;<br>-- 显式<br>select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;<br></code></pre></td></tr></table></figure><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据</p><p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 左<br>select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;<br>select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样<br>-- 右<br>select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;<br></code></pre></td></tr></table></figure><p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</p><h3 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p><p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p><p>自连接查询，可以是内连接查询，也可以是外连接查询</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询员工及其所属领导的名字<br>select a.name, b.name from employee a, employee b where a.manager = b.id;<br>-- 没有领导的也查询出来<br>select a.name, b.name from employee a left join employee b on a.manager = b.id;<br></code></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong></p><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;=</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询销售部所有员工<br>select id from dept where name = &#x27;销售部&#x27;;<br>-- 根据销售部部门ID，查询员工信息<br>select * from employee where dept = 4;<br>-- 合并（子查询）<br>select * from employee where dept = (select id from dept where name = &#x27;销售部&#x27;);<br><br>-- 查询xxx入职之后的员工信息<br>select * from employee where entrydate &gt; (select entrydate from employee where name = &#x27;xxx&#x27;);<br></code></pre></td></tr></table></figure><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。</p><p>常用操作符：</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询销售部和市场部的所有员工信息<br>select * from employee where dept in (select id from dept where name = &#x27;销售部&#x27; or name = &#x27;市场部&#x27;);<br>-- 查询比财务部所有人工资都高的员工信息<br>select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &#x27;财务部&#x27;));<br>-- 查询比研发部任意一人工资高的员工信息<br>select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = &#x27;研发部&#x27;));<br></code></pre></td></tr></table></figure><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：=, &lt;, &gt;, IN, NOT IN</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询与xxx的薪资及直属领导相同的员工信息<br>select * from employee where (salary, manager) = (12500, 1);<br>select * from employee where (salary, manager) = (select salary, manager from employee where name = &#x27;xxx&#x27;);<br></code></pre></td></tr></table></figure><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询与xxx1，xxx2的职位和薪资相同的员工<br>select * from employee where (job, salary) in (select job, salary from employee where name = &#x27;xxx1&#x27; or name = &#x27;xxx2&#x27;);<br>-- 查询入职日期是2006-01-01之后的员工，及其部门信息<br>select e.*, d.* from (select * from employee where entrydate &gt; &#x27;2006-01-01&#x27;) as e left join dept as d on e.dept = d.id;<br></code></pre></td></tr></table></figure><h3 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询 union, union all"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 字段列表 FROM 表A ...<br>UNION [ALL]<br>SELECT 字段列表 FROM 表B ...<br></code></pre></td></tr></table></figure><h4 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>UNION ALL 会有重复结果，UNION 不会</li><li>联合查询比使用or效率高，不会使索引失效</li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 1. 查询张三账户余额<br>select * from account where name = &#x27;张三&#x27;;<br>-- 2. 将张三账户余额-1000<br>update account set money = money - 1000 where name = &#x27;张三&#x27;;<br>-- 此语句出错后张三钱减少但是李四钱没有增加<br>模拟sql语句错误<br>-- 3. 将李四账户余额+1000<br>update account set money = money + 1000 where name = &#x27;李四&#x27;;<br><br>-- 查看事务提交方式<br>SELECT @@AUTOCOMMIT;<br>-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效<br>SET @@AUTOCOMMIT = 0;<br>-- 提交事务<br>COMMIT;<br>-- 回滚事务<br>ROLLBACK;<br><br>-- 设置手动提交后上面代码改为：<br>select * from account where name = &#x27;张三&#x27;;<br>update account set money = money - 1000 where name = &#x27;张三&#x27;;<br>update account set money = money + 1000 where name = &#x27;李四&#x27;;<br>commit;<br></code></pre></td></tr></table></figure><p>操作方式二：</p><p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p><p>操作实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">start transaction;<br>select * from account where name = &#x27;张三&#x27;;<br>update account set money = money - 1000 where name = &#x27;张三&#x27;;<br>update account set money = money + 1000 where name = &#x27;李四&#x27;;<br>commit;<br></code></pre></td></tr></table></figure><h3 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><blockquote><p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a> </p></blockquote><p>并发事务隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>√表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MySQL体系结构：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png" alt="结构图" title="结构图"><br><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png" alt="层级描述" title="层级描述"></p><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是InnoDB。</p><p>相关操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询建表语句<br>show create table account;<br>-- 建表时指定存储引擎<br>CREATE TABLE 表名(<br>...<br>) ENGINE=INNODB;<br>-- 查看当前数据库支持的存储引擎<br>show engines;<br></code></pre></td></tr></table></figure><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p><p>特点：</p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li></ul><p>文件：</p><ul><li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p><p>知识点：</p><p>查看 Mysql 变量：<br><code>show variables like &#39;innodb_file_per_table&#39;;</code></p><p>从idb文件提取表结构数据：<br>（在cmd运行）<br><code>ibd2sdi xxx.ibd</code></p><p>InnoDB 逻辑存储结构：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png" alt="InnoDB逻辑存储结构" title="InnoDB逻辑存储结构"></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p>特点：</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li><li>xxx.MYD: 存储数据</li><li>xxx.MYI: 存储索引</li></ul><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p><p>特点：</p><ul><li>存放在内存中，速度快</li><li>hash索引（默认）</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li></ul><h3 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h3><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code><br>例：<code>show global status like &#39;Com_______&#39;</code></p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：<br>    # 开启慢查询日志开关<br>    slow_query_log=1<br>    # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志<br>    long_query_time=2<br>更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log</p><p>查看慢查询日志开关状态：<br><code>show variables like &#39;slow_query_log&#39;;</code></p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过set语句在session/global级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定query_id的SQL语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定query_id的SQL语句CPU的使用情况<br><code>show profile cpu for query query_id;</code></p><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：<br>    # 直接在select语句之前加上关键字 explain / desc<br>    EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p><p>EXPLAIN 各字段含义：</p><ul><li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</li><li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等</li><li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li><li>possible_key：可能应用在这张表上的索引，一个或多个</li><li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li><li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li><li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li><li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p><p>优缺点：</p><p>优点：</p><ul><li>提高数据检索效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><p>缺点：</p><ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li></ul><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree</td><td>最常见的索引类型，大部分引擎都支持B+树索引</td></tr><tr><td>Hash</td><td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-Tree(空间索引)</td><td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-Text(全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td></tr></tbody></table><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-Tree索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p><img src="https://dhc.pythonanywhere.com/media/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png" alt="二叉树" title="二叉树"></p><p>二叉树的缺点可以用红黑树来解决：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png" alt="红黑树" title="红黑树"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p><p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png" alt="B-Tree结构" title="B-Tree结构"></p><blockquote><p>B-Tree 的数据插入过程动画参照：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p></blockquote><h4 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h4><p>结构图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png" alt="B+Tree结构图" title="B+Tree结构图"></p><blockquote><p>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p></blockquote><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png" alt="MySQL B+Tree 结构图" title="MySQL B+Tree 结构图"></p><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png" alt="Hash索引原理图" title="Hash索引原理图"></p><p>特点：</p><ul><li>Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li></ul><p>存储引擎支持：</p><ul><li>Memory</li><li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><ol><li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li></ol><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li></ul><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>演示图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png" alt="大致原理" title="大致原理"><br><img src="https://dhc.pythonanywhere.com/media/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png" alt="演示图" title="演示图"></p><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li></ul><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from user where id = 10;<br>select * from user where name = &#x27;Arm&#x27;;<br>-- 备注：id为主键，name字段创建的有索引<br></code></pre></td></tr></table></figure><p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p><p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p><p>答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。</p><p>如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p><p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p><p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p><p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引<br>create index idx_user_name on tb_user(name);<br>-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引<br>create unique index idx_user_phone on tb_user (phone);<br>-- 为profession, age, status创建联合索引<br>create index idx_user_pro_age_stat on tb_user(profession, age, status);<br>-- 为email建立合适的索引来提升查询效率<br>create index idx_user_email on tb_user(email);<br><br>-- 删除索引<br>drop index idx_user_email on tb_user;<br></code></pre></td></tr></table></figure><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p><p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;=或者&lt;=来规避索引失效问题。</p><h4 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h4><ol><li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li><li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li><li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</li><li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li><li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li></ol><h4 id="SQL-提示"><a href="#SQL-提示" class="headerlink" title="SQL 提示"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p><p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。</p><h4 id="覆盖索引-amp-回表查询"><a href="#覆盖索引-amp-回表查询" class="headerlink" title="覆盖索引&amp;回表查询"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p><p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p><p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p><p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p><p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p><p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select count(distinct email) / count(*) from tb_user;<br>select count(distinct substring(email, 1, 5)) / count(*) from tb_user;<br></code></pre></td></tr></table></figure><p>show index 里面的sub_part可以看到接取的长度</p><h4 id="单列索引-amp-联合索引"><a href="#单列索引-amp-联合索引" class="headerlink" title="单列索引&amp;联合索引"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p><p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;韩信&#39;;</code><br>这句只会用到phone索引字段</p><h5 id="注意事项-8"><a href="#注意事项-8" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li></ul><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>普通插入：</p><ol><li>采用批量插入（一次插入的数据不建议超过1000条）</li><li>手动提交事务</li><li>主键顺序插入</li></ol><p>大批量插入：<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）<br>mysql --local-infile -u root -p<br># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关<br>set global local_infile = 1;<br>select @@local_infile;<br># 执行load指令将准备好的数据，加载到表结构中<br>load data local infile &#x27;/root/sql1.log&#x27; into table &#x27;tb_user&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;<br></code></pre></td></tr></table></figure><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p><p>页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p><p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p><blockquote><p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p></blockquote><p>主键设计原则：</p><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li><li>业务操作时，避免对主键的修改</li></ul><h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p><p>总结：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li><li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li></ul><h3 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h3><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p><h3 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 此语句耗时很长<br>select * from tb_sku limit 9000000, 10;<br>-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询<br>select id from tb_sku order by id limit 9000000, 10;<br>-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit<br>-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);<br>-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度<br>select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;<br></code></pre></td></tr></table></figure><h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis</p><p>count的几种用法：</p><ul><li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</li><li>用法：count(*)、count(主键)、count(字段)、count(1)</li><li>count(主键)跟count(*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(*)一样；count(null)返回0</li></ul><p>各种用法的性能：</p><ul><li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p><h3 id="update优化（避免行锁升级为表锁）"><a href="#update优化（避免行锁升级为表锁）" class="headerlink" title="update优化（避免行锁升级为表锁）"></a>update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p><p>如以下两条语句：<br><code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行；<br><code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><table><thead><tr><th>类型名称</th><th>取值范围</th><th>大小</th></tr></thead><tbody><tr><td>TINYINT</td><td>-128〜127</td><td>1个字节</td></tr><tr><td>SMALLINT</td><td>-32768〜32767</td><td>2个宇节</td></tr><tr><td>MEDIUMINT</td><td>-8388608〜8388607</td><td>3个字节</td></tr><tr><td>INT (INTEGHR)</td><td>-2147483648〜2147483647</td><td>4个字节</td></tr><tr><td>BIGINT</td><td>-9223372036854775808〜9223372036854775807</td><td>8个字节</td></tr></tbody></table><p>无符号在数据类型后加 unsigned 关键字。</p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>FLOAT</td><td>单精度浮点数</td><td>4 个字节</td></tr><tr><td>DOUBLE</td><td>双精度浮点数</td><td>8 个字节</td></tr><tr><td>DECIMAL (M, D)，DEC</td><td>压缩的“严格”定点数</td><td>M+2 个字节</td></tr></tbody></table><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><table><thead><tr><th>类型名称</th><th>日期格式</th><th>日期范围</th><th>存储需求</th></tr></thead><tbody><tr><td>YEAR</td><td>YYYY</td><td>1901 ~ 2155</td><td>1 个字节</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td><td>3 个字节</td></tr><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01 ~ 9999-12-3</td><td>3 个字节</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8 个字节</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD HH:MM:SS</td><td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td>4 个字节</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度非二进制字符串</td><td>M 字节，1&lt;=M&lt;=255</td></tr><tr><td>VARCHAR(M)</td><td>变长非二进制字符串</td><td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td></tr><tr><td>TINYTEXT</td><td>非常小的非二进制字符串</td><td>L+1字节，在此，L&lt;2^8</td></tr><tr><td>TEXT</td><td>小的非二进制字符串</td><td>L+2字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMTEXT</td><td>中等大小的非二进制字符串</td><td>L+3字节，在此，L&lt;2^24</td></tr><tr><td>LONGTEXT</td><td>大的非二进制字符串</td><td>L+4字节，在此，L&lt;2^32</td></tr><tr><td>ENUM</td><td>枚举类型，只能有一个枚举字符串值</td><td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td></tr><tr><td>SET</td><td>一个设置，字符串对象可以有零个或 多个SET成员</td><td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td></tr></tbody></table><h2 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>BIT(M)</td><td>位字段类型</td><td>大约 (M+7)/8 字节</td></tr><tr><td>BINARY(M)</td><td>固定长度二进制字符串</td><td>M 字节</td></tr><tr><td>VARBINARY (M)</td><td>可变长度二进制字符串</td><td>M+1 字节</td></tr><tr><td>TINYBLOB (M)</td><td>非常小的BLOB</td><td>L+1 字节，在此，L&lt;2^8</td></tr><tr><td>BLOB (M)</td><td>小 BLOB</td><td>L+2 字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMBLOB (M)</td><td>中等大小的BLOB</td><td>L+3 字节，在此，L&lt;2^24</td></tr><tr><td>LONGBLOB (M)</td><td>非常大的BLOB</td><td>L+4 字节，在此，L&lt;2^32</td></tr></tbody></table><h1 id="权限一览表"><a href="#权限一览表" class="headerlink" title="权限一览表"></a>权限一览表</h1><blockquote><p>具体权限的作用详见<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html" title="官方文档">官方文档</a></p></blockquote><p>GRANT 和 REVOKE 允许的静态权限</p><table><thead><tr><th align="left">Privilege</th><th align="left">Grant Table Column</th><th align="left">Context</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all"><code>ALL [PRIVILEGES]</code></a></td><td align="left">Synonym for “all privileges”</td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter"><code>ALTER</code></a></td><td align="left"><code>Alter_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine"><code>ALTER ROUTINE</code></a></td><td align="left"><code>Alter_routine_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create"><code>CREATE</code></a></td><td align="left"><code>Create_priv</code></td><td align="left">Databases, tables, or indexes</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role"><code>CREATE ROLE</code></a></td><td align="left"><code>Create_role_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine"><code>CREATE ROUTINE</code></a></td><td align="left"><code>Create_routine_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace"><code>CREATE TABLESPACE</code></a></td><td align="left"><code>Create_tablespace_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables"><code>CREATE TEMPORARY TABLES</code></a></td><td align="left"><code>Create_tmp_table_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user"><code>CREATE USER</code></a></td><td align="left"><code>Create_user_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view"><code>CREATE VIEW</code></a></td><td align="left"><code>Create_view_priv</code></td><td align="left">Views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete"><code>DELETE</code></a></td><td align="left"><code>Delete_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop"><code>DROP</code></a></td><td align="left"><code>Drop_priv</code></td><td align="left">Databases, tables, or views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role"><code>DROP ROLE</code></a></td><td align="left"><code>Drop_role_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event"><code>EVENT</code></a></td><td align="left"><code>Event_priv</code></td><td align="left">Databases</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute"><code>EXECUTE</code></a></td><td align="left"><code>Execute_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file"><code>FILE</code></a></td><td align="left"><code>File_priv</code></td><td align="left">File access on server host</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option"><code>GRANT OPTION</code></a></td><td align="left"><code>Grant_priv</code></td><td align="left">Databases, tables, or stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index"><code>INDEX</code></a></td><td align="left"><code>Index_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert"><code>INSERT</code></a></td><td align="left"><code>Insert_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables"><code>LOCK TABLES</code></a></td><td align="left"><code>Lock_tables_priv</code></td><td align="left">Databases</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process"><code>PROCESS</code></a></td><td align="left"><code>Process_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy"><code>PROXY</code></a></td><td align="left">See <code>proxies_priv</code> table</td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references"><code>REFERENCES</code></a></td><td align="left"><code>References_priv</code></td><td align="left">Databases or tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload"><code>RELOAD</code></a></td><td align="left"><code>Reload_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client"><code>REPLICATION CLIENT</code></a></td><td align="left"><code>Repl_client_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave"><code>REPLICATION SLAVE</code></a></td><td align="left"><code>Repl_slave_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select"><code>SELECT</code></a></td><td align="left"><code>Select_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases"><code>SHOW DATABASES</code></a></td><td align="left"><code>Show_db_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view"><code>SHOW VIEW</code></a></td><td align="left"><code>Show_view_priv</code></td><td align="left">Views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown"><code>SHUTDOWN</code></a></td><td align="left"><code>Shutdown_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super"><code>SUPER</code></a></td><td align="left"><code>Super_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger"><code>TRIGGER</code></a></td><td align="left"><code>Trigger_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update"><code>UPDATE</code></a></td><td align="left"><code>Update_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage"><code>USAGE</code></a></td><td align="left">Synonym for “no privileges”</td><td align="left">Server administration</td></tr></tbody></table><p>GRANT 和 REVOKE 允许的动态权限</p><table><thead><tr><th align="left">Privilege</th><th align="left">Context</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin"><code>APPLICATION_PASSWORD_ADMIN</code></a></td><td align="left">Dual password administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt"><code>AUDIT_ABORT_EXEMPT</code></a></td><td align="left">Allow queries blocked by audit log filter</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin"><code>AUDIT_ADMIN</code></a></td><td align="left">Audit log administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td><td align="left">Authentication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin"><code>BACKUP_ADMIN</code></a></td><td align="left">Backup administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin"><code>BINLOG_ADMIN</code></a></td><td align="left">Backup and Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td><td align="left">Backup and Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin"><code>CLONE_ADMIN</code></a></td><td align="left">Clone administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin"><code>CONNECTION_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin"><code>ENCRYPTION_KEY_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin"><code>FIREWALL_ADMIN</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt"><code>FIREWALL_EXEMPT</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user"><code>FIREWALL_USER</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs"><code>FLUSH_OPTIMIZER_COSTS</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status"><code>FLUSH_STATUS</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables"><code>FLUSH_TABLES</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources"><code>FLUSH_USER_RESOURCES</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin"><code>GROUP_REPLICATION_ADMIN</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream"><code>GROUP_REPLICATION_STREAM</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td><td align="left">Redo log archiving administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user"><code>NDB_STORED_USER</code></a></td><td align="left">NDB Cluster</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin"><code>PASSWORDLESS_USER_ADMIN</code></a></td><td align="left">Authentication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier"><code>REPLICATION_APPLIER</code></a></td><td align="left"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin"><code>REPLICATION_SLAVE_ADMIN</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin"><code>RESOURCE_GROUP_ADMIN</code></a></td><td align="left">Resource group administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user"><code>RESOURCE_GROUP_USER</code></a></td><td align="left">Resource group administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin"><code>ROLE_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin"><code>SESSION_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id"><code>SET_USER_ID</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine"><code>SHOW_ROUTINE</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user"><code>SYSTEM_USER</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin"><code>SYSTEM_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin"><code>TABLE_ENCRYPTION_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin"><code>VERSION_TOKEN_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin"><code>XA_RECOVER_ADMIN</code></a></td><td align="left">Server administration</td></tr></tbody></table><h1 id="图形化界面工具"><a href="#图形化界面工具" class="headerlink" title="图形化界面工具"></a>图形化界面工具</h1><ul><li>Workbench(免费): <a href="http://dev.mysql.com/downloads/workbench/">http://dev.mysql.com/downloads/workbench/</a></li><li>navicat(收费，试用版30天): <a href="https://www.navicat.com/en/download/navicat-for-mysql">https://www.navicat.com/en/download/navicat-for-mysql</a></li><li>Sequel Pro(开源免费，仅支持Mac OS): <a href="http://www.sequelpro.com/">http://www.sequelpro.com/</a></li><li>HeidiSQL(免费): <a href="http://www.heidisql.com/">http://www.heidisql.com/</a></li><li>phpMyAdmin(免费): <a href="https://www.phpmyadmin.net/">https://www.phpmyadmin.net/</a></li><li>SQLyog: <a href="https://sqlyog.en.softonic.com/">https://sqlyog.en.softonic.com/</a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><ol><li>在SQL语句之后加上<code>\G</code>会将结果的表格形式转换成行文本形式</li><li>查看Mysql数据库占用空间：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT table_schema &quot;Database Name&quot;<br>     , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;<br>FROM information_schema.TABLES<br>GROUP BY table_schema;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>游戏打包</title>
    <link href="/blog/2023/03/19/%E6%B8%B8%E6%88%8F%E6%89%93%E5%8C%85/"/>
    <url>/blog/2023/03/19/%E6%B8%B8%E6%88%8F%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a><!--本文内容均转载自黑马程序员-阿玮老师的游戏打包教程--></h3><h1 id="主要实现步骤"><a href="#主要实现步骤" class="headerlink" title="主要实现步骤"></a>主要实现步骤</h1><p>1，   将代码打包成jar包。</p><p>2，   整合资源文件</p><p>3，   将jar包打包成exe</p><p>4，   将jdk、资源文件、jar包转换后的exe三者再次打包成最终的exe。</p><h1 id="准备软件"><a href="#准备软件" class="headerlink" title="准备软件"></a>准备软件</h1><p>1，   Idea：将代</p><p>码打包成jar包（java形式的压缩包）</p><p>2，   exe4j：将jar包转换成exe的工具。</p><p>3，   innosetup：将游戏用到的图片，Java的运行环境和第二步打包的代码，组合成最终的安装程序。</p><p><strong>备注1：</strong>exe4j和innosetup安装非常简单，傻瓜式下一步即可。</p><p><strong>备注2：</strong>exe4j支持的JDK版本是8~11，其他版本的JDK不行，所以我也给大家提供了JDK11版本。</p><p><strong>备注3：</strong>64位的操作系统用exe4j_windows-x64_6_0_2.exe</p><p>32位的操作系统用exe4j_windows_6_0_2.exe</p><p><strong>备注4：</strong>打开我的电脑，右键空白处，点击属性，在弹出界面的中央就能查看自己电脑是64位的还是32位的。</p><h1 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h1><ol><li>jdk 下载安装 <a href="https://www.oracle.com/java/technologies/downloads/#java11-windows"></a></li><li>exe4j 链接：<a href="https://pan.baidu.com/s/1LS4VhUFfj5Hcl3qLeCg8kA">https://pan.baidu.com/s/1LS4VhUFfj5Hcl3qLeCg8kA</a><br>提取码：ZSZS</li><li>innosetup 链接：<a href="https://pan.baidu.com/s/1zo29xYryY3oiY4x3naGtRQ?pwd=ibu0">https://pan.baidu.com/s/1zo29xYryY3oiY4x3naGtRQ?pwd=ibu0</a><br>提取码：ibu0</li></ol><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><p>1，     确保idea已经安装完毕</p><p>2，     安装exe4j</p><p>3，     安装innosetup</p><p>傻瓜式安装，直接下一步即可，但是要记住安装路径。</p><h1 id="代码改写："><a href="#代码改写：" class="headerlink" title="代码改写："></a>代码改写：</h1><p>代码中所有图片用到的路径需要把模块名删除，改写之后如下：</p><p>在不同的情况下，相对路径的相对位置是不一样的。</p><p><img src="D:\blog\blog\themes\hexo-theme-fluid\source\img\passage\游戏打包"></p><h1 id="打包步骤："><a href="#打包步骤：" class="headerlink" title="打包步骤："></a>打包步骤：</h1><h2 id="第一步：代码打包成jar包"><a href="#第一步：代码打包成jar包" class="headerlink" title="第一步：代码打包成jar包"></a>第一步：代码打包成jar包</h2><p>1，   点击File，再点Project Structure。</p><p>2，   点击Artifaces。</p><p>3，   下方图片箭头指向位置应为空白，如果有其他内容，可以选中之后，点击减号删除。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image003.png" alt="img"></p><p>4，   选中左侧的Artifacts ，</p><p>点击中间上方位置的+ </p><p>点击JAR</p><p>点击From modules with dependencies…</p><p>如下图所示：</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image004.png" alt="img"></p><p>5，   Module：选择要打包的项目。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image005.png" alt="img"></p><p>6，Main Class：点击红框最后的那个小图标，项目中是哪个main方法所在的类去启动项目，这里就选择哪个类。我的项目是由app里面的main方法启动的，所以我就选择App</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image006.png" alt="img"></p><p>7，设置 META-INF/MANIFEST.MF。</p><p>点击箭头指向的图标进行设置。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image007.png" alt="img"></p><p>8，选择当前模块</p><p>点击OK</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image008.png" alt="img"></p><p>9，   此时这里的路径就是模块所在路径，点击OK。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image009.png" alt="img"></p><p>10， 如果没有弹框报错，第十步可以跳过，直接看十一步。</p><p>如果出现弹框报错，表示当前模块下已存在META-INF文件夹了。可以在本地找到已存在的META-INF文件夹，右键点击DELETE删除即可。</p><p>查找方式如下：</p><p>右键模块点击open in</p><p>点击Explorer</p><p>在模块里面找到META-INF文件删除即可。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image011.jpg" alt="img"></p><p>11， 如果没有报错，就出现一个puzzlegame：jar的提示。</p><p>点击右下角的OK。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image013.jpg" alt="img"></p><p>12， 在idea主界面上方，点击Build里面的Build Artifacts。</p><p>如果是灰色的不能按，请确定在上面第一步~第九步有没有配置好jar包的信息。</p><p>如果已经配置好了jar的信息，此处就可以正常点击。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image014.png" alt="img"></p><p>13， 在主界面正中央。</p><p>选择puzzlegame:jar。</p><p>再选择Build。</p><p>idea会帮我们生成jar包。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image015.png" alt="img"></p><p>14， 等页面右下角的进度条结束，jar就已经生成完毕。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image017.jpg" alt="img"></p><p>15， 点击File，再点Project Structure。</p><p>点击Artifaces。</p><p>在下图红色框中的路径下，可以找到生成好的jar包。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image019.jpg" alt="img"></p><h2 id="第二步：整合资源文件"><a href="#第二步：整合资源文件" class="headerlink" title="第二步：整合资源文件"></a>第二步：整合资源文件</h2><p>1，   将第一步创建好的jar包拷贝到桌面上。</p><p>2，   在桌面上新建一个文件夹resource。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image020.png" alt="img"></p><p>3，   将《拼图游戏》中的image文件夹粘贴到resource文件夹当中。</p><p>此时在桌面中的resource文件夹下的image文件夹下，就会看到游戏里面用到的所有图片。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image021.png" alt="img"></p><h2 id="第三步：将jar包打包成exe"><a href="#第三步：将jar包打包成exe" class="headerlink" title="第三步：将jar包打包成exe"></a>第三步：将jar包打包成exe</h2><p>1，   双击打开安装好的exe4j.exe，注册软件。</p><p>点击下面的Enter License</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image023.jpg" alt="img"></p><p>2，   输入用户名，公司名和注册码后点击ok</p><p>用户名，公司名随便填，最好都是小写字母。</p><p>注册码：L-g782dn2d-1f1yqxx1rv1sqd</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image024.png" alt="img"></p><p>3，   注册完毕之后点击右下角的next</p><p>备注：exe4j.exe只识别JDK8到JDK11，如果安装时出现弹框报错，请检查JDK版本，资料文件夹中给大家提供了JDK11，有需要可以安装。（黑马程序员阿玮老师出品）</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image026.jpg" alt="img"></p><p>4，   选择JAVA转EXE。</p><p>点击右下角的next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image028.jpg" alt="img"></p><p>5，   输入名称puzzlegame</p><p>输出保存exe的路径，建议选择到桌面上。</p><p>点击右下角的next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image030.jpg" alt="img"></p><p>6，   选择以图形界面的形式启动游戏</p><p>输入应用名称，puzzlegame</p><p>点击高级设置Advanced Options，选择32-bit or 64-bit</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image032.jpg" alt="img"></p><p>7，   勾选Generate 64-bit executable</p><p>表示要生成64位的exe安装包，如果未勾选默认生成32位的安装包。</p><p>点击右下角next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image034.jpg" alt="img"></p><p>8，    然后一直下一步，一直出现如下界面</p><p>在本界面开始jar包并以及配置启动类。（黑马程序员阿玮老师出品）</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image036.jpg" alt="img"></p><p>9，    第一行，VM参数配置的地方加上：-Dfile.encoding=utf-8</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image037.png" alt="img"></p><p>10， 点击右侧绿色的+，添加jar包</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image039.jpg" alt="img"></p><p>11， 添加jar包</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image040.png" alt="img"></p><p>12， 选择桌面上的puzzlegame.jar。</p><p>点击下面的打开。（黑马程序员阿玮老师出品）</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image042.jpg" alt="img"></p><p>13， 检查路径，如果无误点击右下角的OK</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image044.jpg" alt="img"></p><p>14， 选择项目启动类</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image046.jpg" alt="img"></p><p>15， 因为程序主入口main方法写在App类中，所有选择app，并点击OK。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image048.jpg" alt="img"></p><p>16， 本页面中，一共修改了三处。</p><p>三处全部操作完毕。点击右下角的next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image050.jpg" alt="img"></p><p>17， 填写最小启动的JDK版本。输入1.8</p><p>配置exe加载的JDK，选择第一个。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image052.jpg" alt="img"></p><p>18， 点击+</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image054.png" alt="https://img-blog.csdnimg.cn/20200204003959383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3NzAxMzgx,size_16,color_FFFFFF,t_70"></p><p>19， 选择Directory</p><p>下面输入.\jdk</p><p><strong>（注意：输入点杠jdk，都要是英文状态下输入）</strong></p><p>点击OK</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image055.png" alt="img"></p><p>20， 再次点击+</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image057.jpg" alt="img"></p><p>21， 选择Directory</p><p>下面输入.\image</p><p><strong>（输入点杠image，都要是英文状态下输入）</strong></p><p>点击OK</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image058.png" alt="img"></p><p>22， 点击右下角的next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image060.jpg" alt="img"></p><p>23， 选择Client VM</p><p>点击右下角的next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image062.png" alt="https://img-blog.csdnimg.cn/20200204004404491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3NzAxMzgx,size_16,color_FFFFFF,t_70"></p><p>24， 然后一直下一步，最终出现如下界面</p><p>点击右下角的Exit退出。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image064.jpg" alt="img"></p><p>25， 点击Exit后，会提升是否需要保存刚刚的配置信息，可以点击Yes，并选择一个路径进行保存。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image066.jpg" alt="img"></p><p>26， 如果第三步选择的exe保存的路径是桌面，那么在桌面上</p><p>就能看到生成的puzzlegame.exe文件了。</p><p>四个文件分别为：</p><p>左一：刚刚用jar生成的exe文件。</p><p>左二：idea生成的jar包</p><p>左三：游戏用到的资源图片</p><p>左四：刚刚用exe4J设置完毕之后保存的信息。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image067.png" alt="img"></p><h2 id="第四步：将jdk、资源文件、jar包转换后的exe三者再次打包成最终的exe。"><a href="#第四步：将jdk、资源文件、jar包转换后的exe三者再次打包成最终的exe。" class="headerlink" title="第四步：将jdk、资源文件、jar包转换后的exe三者再次打包成最终的exe。"></a>第四步：将jdk、资源文件、jar包转换后的exe三者再次打包成最终的exe。</h2><p>刚刚，我们仅仅是把java代码变成了exe。下面我们要把游戏中依赖的资源文件，也就是使用到的所有图片，还有JDK三者再次打包成最终的exe，这样在没有jdk电脑环境下也能运行。</p><p>1，打开inno setup</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image069.jpg" alt="img"></p><p>2，在欢迎页面点击右下角的关闭</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image070.png" alt="img"></p><p>4，   点击左上角的File</p><p>再点击NEW</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image071.png" alt="img"></p><p>5，   点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image072.png" alt="img"></p><p>6，   输入应用名称puzzlegame</p><p>点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image073.png" alt="img"></p><p>7，   不修改任何东西，直接点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image074.png" alt="img"></p><p>8，   点击这里，选择桌面上已经生成好的puzzlegame.exe</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image075.png" alt="img"></p><p>9，   点击Add folder</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image076.png" alt="img"></p><p>10， 选择桌面的resource，再点击确定。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image077.png" alt="img"></p><p>11， 如果出现下面弹框，则点击是。</p><p>如果没有出现也没有任何关系。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image078.png" alt="img"></p><p>12， 再点击 Add file(s)…</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image079.png" alt="img"></p><p>13， 选中桌面的puzzlegame.exe，再次添加一次。</p><p>点击下面的打开。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image081.jpg" alt="img"></p><p>14， 在本页面中一共设置了三处地方。</p><p>全部设置完毕，点击next。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image082.png" alt="img"></p><p>15， 默认不用选择，点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image083.png" alt="img"></p><p>16， 默认不用选择，点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image084.png" alt="img"></p><p>17， 选择语言，还是默认，点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image085.png" alt="img"></p><p>18， 选择输出路径，还是选择桌面。</p><p>输入最终安装包的名字，不能跟已有的puzzlegame重名。</p><p>所以我写setup，再点击右下角next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image086.png" alt="img"></p><p>19， 默认点击next</p><p>有部分同学电脑不显示这一步，也没有关系。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image087.png" alt="img"></p><p>20， 完成，点击finish</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image088.png" alt="img"></p><p>21， 配置到最后一步了，脚本文件，到这里会弹出问你是否马</p><p>上编译，选择否，先把脚本写好再自己编译。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image089.png" alt="img"></p><p>22， 上面红色箭头处添加一行脚本。</p><p>#define MyJdkName “jdk”</p><p>添加前：<img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image090.png" alt="img"></p><p>23， 添加完毕之后，如下图所示</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image092.jpg" alt="img"></p><p>24， 往下拉，把有红色框起来的这一行删掉</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image094.jpg" alt="img"></p><p>25， 在上一步删除位置添加一段行的文字</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">Source: <span class="hljs-string">&quot;自己本地JDK路径\*&quot;</span>; DestDir: <span class="hljs-string">&quot;&#123;app&#125;\&#123;#MyJdkName&#125;&quot;</span>; Flags: ignoreversion recursesubdirs createallsubdirs<br></code></pre></td></tr></table></figure><p><strong>千万注意：这段文字不要直接复制。根据自己电脑中JDK的安装位置进行修改，添加完毕之后如下图</strong></p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image096.jpg" alt="img"></p><p>26， 点击上方的绿色按钮开始编译。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image097.png" alt="https://img-blog.csdnimg.cn/20200204010100205.png"></p><p>27， 此时会询问，是否需要保存。</p><p>可以点击是，选择一个位置保存一下刚刚修改之后的结果。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image098.png" alt="img"></p><p>28，  然后等待绿色滚动条结束</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image100.jpg" alt="img"></p><p>29， 当绿色滚动条结束后，会自动安装setup.exe文件。</p><p>此时可以点击否，先不安装。</p><p>在桌面上，会多了一个setup.exe文件和一个后缀名为iss的文件</p><p>setup.exe：打包成功的游戏安装包。</p><p>iss文件：就是刚刚设置的脚本文件。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image101.png" alt="img"></p><p>30， 现在就可以把这个exe文件发给你的好基友了，他的电脑</p><p>上不需要安装JDK，直接双击这个安装包就可以玩游戏了。</p><p>在安装的时候可以选择安装路径。</p><p>还可以在桌面生成快捷方式。</p><h1 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h1><p>1，   安装完毕之后，可以到安装目录去找puzzlegame.exe</p><p>双击就可以玩游戏了。刚刚桌面上的5个文件可以全部删除。以后双击puzzlegame.exe就可以玩游戏了。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image102.png" alt="img"></p><p>2，   如果游戏运行之后，有效果但是无图片，或者部分图片无</p><p>法加载。如下图所示：此时背景图片无法加载。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image103.png" alt="img"></p><p>3，   修改步骤一：</p><p>检查安装目录下image文件夹中是否有该图片。如果没有将缺少的图片粘贴进去重新运行游戏。（黑马程序员阿玮老师出品）</p><p>修改步骤二：</p><p>检查代码，图片的路径需要把模块名删掉。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image104.jpg" alt="img"></p><p>4，代码修改后，需要重新生成exe安装包，重新安装游戏。</p>]]></content>
    
    
    <categories>
      
      <category>project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL安装配置</title>
    <link href="/blog/2023/03/19/MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/blog/2023/03/19/MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL安装配置一条龙教程"><a href="#MySQL安装配置一条龙教程" class="headerlink" title="MySQL安装配置一条龙教程"></a>MySQL安装配置一条龙教程</h1><ul><li><h2 id="安装MySQL服务"><a href="#安装MySQL服务" class="headerlink" title="安装MySQL服务"></a>安装MySQL服务</h2><ul><li><p>视频资源   <a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx/?p=3&share_source=copy_web&vd_source=41484c3c23d7dc1caf838d6574365b27">MySQL安装教程-黑马程序员</a></p></li><li><p>文档笔记  （去年暑假自己随手记的，具体操作注意事项还是建议跟着上面的视频走一遍）</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.下载 安装解压<br>https:<span class="hljs-regexp">//</span>downloads.mysql.com<span class="hljs-regexp">/archives/</span>community/<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">2.1</span>.添加环境变量<br><span class="hljs-comment">(1)</span>新建MYSQL_HOME变量,变量名: D:\softWare\mysql\mysql<span class="hljs-number">-5.7</span><span class="hljs-number">.19</span>-wi<span class="hljs-symbol">nx64</span><br><span class="hljs-comment">(2)</span>Path环境变量:<span class="hljs-meta">%</span> MYSQL_HOME<span class="hljs-meta">%</span>\bi<span class="hljs-symbol">n</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">2.2</span>.新建配置文件<br>在路径D:\softWare\mysql\mysql<span class="hljs-number">-5.7</span><span class="hljs-number">.19</span>-winx64下创建my.ini,配置如下内容:<br>[mysql]<br><span class="hljs-keyword">default</span>-<span class="hljs-type">character</span>-<span class="hljs-keyword">set</span>=utf8<br>[mysqld]<br><span class="hljs-type">character</span>-<span class="hljs-keyword">set</span>-<span class="hljs-keyword">server</span>=utf8<br><span class="hljs-keyword">default</span>-<span class="hljs-keyword">storage</span>-engine=INNODB<br>sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">3</span>.初始化MySQL，生成date<br><span class="hljs-attribute">mysqld</span> -–initialize-insecure <br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">4</span>.注册MySQL服务<br><span class="hljs-attribute">mysqld</span> -install<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">5</span>.启动MySQL服务<br><span class="hljs-attribute">C</span>:\WINDOWS\system32&gt;net start mysql <br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">6</span>.设置账户密码<br><span class="hljs-attribute">mysqladmin</span> -u 用户名 -p 密码  (这里的用户名就是root了,之后可以创建新用户)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">7</span>.后期修改账户密码<br><span class="hljs-attribute">mysqladmin</span> -u用户名 -p旧密码 password 新密码<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">3</span>.登录MySQL<br>Mysql -u root -<span class="hljs-selector-tag">p</span>密码<br></code></pre></td></tr></table></figure><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-number">4.</span>登出MySQL <br>mysql&gt; <span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-number">5</span>.关闭MySQL服务<br><span class="hljs-symbol">C:</span>\WINDOWS\system32&gt;net <span class="hljs-keyword">stop</span> mysql<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">6.卸载MySQL<br>C:\WINDOWS\system32&gt;mysqld -<span class="hljs-built_in">remove</span> mysql<br></code></pre></td></tr></table></figure></li><li><h2 id="安装可视化软件"><a href="#安装可视化软件" class="headerlink" title="安装可视化软件"></a>安装可视化软件</h2></li><li><p>可视化软件有很多，比如Navicat，sqlyog等，都是为了方便操作数据库，咱就选一个简单好用还免费的</p></li></ul><ol><li><p><a href="https://blog.csdn.net/cong666555/article/details/128399011">安装sqlyog</a>  可以跟着这篇文章操作</p></li><li><p>连接本地数据库</p></li></ol><ol><li><a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx/?p=10&share_source=copy_web&vd_source=41484c3c23d7dc1caf838d6574365b27">Navicat连接本地数据库-黑马程序员</a>     跟着视频操作就行，他用的是Navicat，其实都一样</li></ol><h4 id="MySQL修改密码解决方案-连接MySQL时-出现报错-Access-denied-for-user-‘root‘-’localhost’-using-password-YES"><a href="#MySQL修改密码解决方案-连接MySQL时-出现报错-Access-denied-for-user-‘root‘-’localhost’-using-password-YES" class="headerlink" title="MySQL修改密码解决方案 |  连接MySQL时, 出现报错: Access denied for user ‘root‘@’localhost’ (using password: YES)"></a>MySQL修改密码解决方案 |  连接MySQL时, 出现报错: Access denied for user ‘root‘@’localhost’ (using password: YES)</h4><h6 id="1-打开mysql-cmd"><a href="#1-打开mysql-cmd" class="headerlink" title="1.打开mysql cmd"></a>1.打开mysql cmd</h6><h6 id="2-执行语句"><a href="#2-执行语句" class="headerlink" title="2.执行语句"></a>2.执行语句</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27; PASSWORD EXPIRE NEVER; #修改加密规则<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;password&#x27;; #更新一下用户的密码<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">FLUSH PRIVILEGES; #刷新权限<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;123fzw&#x27;; #重置密码<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用户中心开发文档</title>
    <link href="/blog/2023/03/17/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/"/>
    <url>/blog/2023/03/17/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="本文档记录了用户中心开发的基本流程，-包含了前期的框架搭建、数据库设计，以及后期的后端接口实现、前端页面开发，实现了基础的登录注册功能，以及查看在线用户状态和删除用户的功能（管理员）"><a href="#本文档记录了用户中心开发的基本流程，-包含了前期的框架搭建、数据库设计，以及后期的后端接口实现、前端页面开发，实现了基础的登录注册功能，以及查看在线用户状态和删除用户的功能（管理员）" class="headerlink" title="本文档记录了用户中心开发的基本流程， 包含了前期的框架搭建、数据库设计，以及后期的后端接口实现、前端页面开发，实现了基础的登录注册功能，以及查看在线用户状态和删除用户的功能（管理员）"></a><code>本文档记录了用户中心开发的基本流程， 包含了前期的框架搭建、数据库设计，以及后期的后端接口实现、前端页面开发，实现了基础的登录注册功能，以及查看在线用户状态和删除用户的功能（管理员）</code></h3><h1 id="开发项目前的分析"><a href="#开发项目前的分析" class="headerlink" title="开发项目前的分析"></a>开发项目前的分析</h1><h2 id="企业做项目流程"><a href="#企业做项目流程" class="headerlink" title="企业做项目流程"></a>企业做项目流程</h2><h4 id="需求分析-gt-设计（概要设计、详细设计）-gt-技术选型-gt"><a href="#需求分析-gt-设计（概要设计、详细设计）-gt-技术选型-gt" class="headerlink" title="需求分析 =&gt; 设计（概要设计、详细设计）=&gt; 技术选型 =&gt; "></a><code>需求分析 =&gt; 设计（概要设计、详细设计）=&gt; 技术选型 =&gt; </code></h4><h4 id="初始化-引⼊需要的技术-gt-写-Demo-gt-写代码（实现业务逻辑）-gt"><a href="#初始化-引⼊需要的技术-gt-写-Demo-gt-写代码（实现业务逻辑）-gt" class="headerlink" title="初始化 / 引⼊需要的技术 =&gt; 写 Demo =&gt; 写代码（实现业务逻辑） =&gt;"></a><code>初始化 / 引⼊需要的技术 =&gt; 写 Demo =&gt; 写代码（实现业务逻辑） =&gt;</code></h4><h4 id="测试（单元测试）-gt-代码提-交-代码评审-gt-部署-gt-发布"><a href="#测试（单元测试）-gt-代码提-交-代码评审-gt-部署-gt-发布" class="headerlink" title=" 测试（单元测试）=&gt; 代码提 交 / 代码评审 =&gt; 部署=&gt; 发布"></a><code> 测试（单元测试）=&gt; 代码提 交 / 代码评审 =&gt; 部署=&gt; 发布</code></h4><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>登录 / 注册  </li><li>⽤户管理（仅管理员可⻅）对⽤户的查询或者修改</li><li> ⽤户校验（ 仅星球⽤户 ）</li></ol><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><h5 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h5><p>三件套 + React + 组件库 Ant Design + Umi + Ant Design Pro（现成的管理系统）</p><h5 id="后端："><a href="#后端：" class="headerlink" title="后端："></a>后端：</h5><ul><li> java </li><li>spring（依赖注⼊框架，帮助你管理 Java 对象，集成⼀些其他的内容） </li><li>springmvc（web 框架，提供接⼝访问、restful接⼝等能⼒） </li><li>mybatis（Java 操作数据库的框架，持久层框架，对 jdbc 的封装）</li><li>mybatis-plus（对 mybatis 的增强，不⽤写 sql 也能实现增删改查）</li><li> springboot（快速启动 / 快速集成项⽬。不⽤⾃⼰管理 spring 配置，不⽤⾃⼰整合各种框架）</li><li> junit 单元测试库 </li><li>mysql</li></ul><h2 id="部署：服务器-容器（平台）"><a href="#部署：服务器-容器（平台）" class="headerlink" title="部署：服务器 / 容器（平台）"></a>部署：服务器 / 容器（平台）</h2><h1 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h1><h3 id="前端框架搭建"><a href="#前端框架搭建" class="headerlink" title="前端框架搭建"></a>前端框架搭建</h3><h5 id="搭建AntDesignPro脚手架"><a href="#搭建AntDesignPro脚手架" class="headerlink" title="搭建AntDesignPro脚手架"></a><a href="https://blog.csdn.net/Lcq_best/article/details/125569667">搭建AntDesignPro脚手架</a></h5><h3 id="后端框架搭建"><a href="#后端框架搭建" class="headerlink" title="后端框架搭建"></a>后端框架搭建</h3><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">create table <span class="hljs-title function_">user</span><br><span class="hljs-params">(</span><br><span class="hljs-params">    id            bigint                                 not <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;id&#x27;</span> primary key,</span><br><span class="hljs-params">    user_account  varchar(<span class="hljs-number">256</span>)</span>                           <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;账号&#x27;</span>,<br>    username      <span class="hljs-title function_">varchar</span><span class="hljs-params">(<span class="hljs-number">256</span>)</span>                           <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;昵称&#x27;</span>,<br>    user_password <span class="hljs-title function_">varchar</span><span class="hljs-params">(<span class="hljs-number">128</span>)</span>                           not <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br>    avatar_url    <span class="hljs-title function_">varchar</span><span class="hljs-params">(<span class="hljs-number">512</span>)</span>                           <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;头像&#x27;</span>,<br>    gender        <span class="hljs-title function_">varchar</span><span class="hljs-params">(<span class="hljs-number">128</span>)</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span>               <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>    phone         <span class="hljs-title function_">varchar</span><span class="hljs-params">(<span class="hljs-number">128</span>)</span>                           <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;电话&#x27;</span>,<br>    email         <span class="hljs-title function_">varchar</span><span class="hljs-params">(<span class="hljs-number">128</span>)</span>                           <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>    user_status   <span class="hljs-type">int</span>          <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 not <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;状态 0 - 正常&#x27;</span>,<br>    create_time   datetime     <span class="hljs-keyword">default</span> CURRENT_TIMESTAMP not <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    update_time   datetime     <span class="hljs-keyword">default</span> CURRENT_TIMESTAMP not <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    is_delete     tinyint      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;是否删除 0 - 正常&#x27;</span>,<br>    user_role     <span class="hljs-title function_">int</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span>       <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 not <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;用户权限 0 - 管理员 1 - 普通用户&#x27;</span>,<br>    planet_code   <span class="hljs-title function_">varchar</span><span class="hljs-params">(<span class="hljs-number">512</span>)</span>                           not <span class="hljs-literal">null</span> comment <span class="hljs-string">&#x27;星球编号&#x27;</span><br>)<br>    comment <span class="hljs-string">&#x27;用户&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li><h5 id="MybatisX插件快速生成domain-entity-service-以及-serviceImpl"><a href="#MybatisX插件快速生成domain-entity-service-以及-serviceImpl" class="headerlink" title="MybatisX插件快速生成domain entity service 以及 serviceImpl"></a>MybatisX插件快速生成domain entity service 以及 serviceImpl</h5><ul><li>选择生成目录</li></ul><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230324211359229.png" alt="image-20230324211359229"></p><ul><li>生成选项</li></ul><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230324211329077.png" alt="image-20230324211329077"></p></li><li><h5 id="application-yaml-项目配置文件"><a href="#application-yaml-项目配置文件" class="headerlink" title="application.yaml 项目配置文件"></a>application.yaml 项目配置文件</h5><ul><li><h5 id="连接到数据库"><a href="#连接到数据库" class="headerlink" title="连接到数据库"></a>连接到数据库</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"># DataSource Config<br>datasource:<br>  driver-class-name: com.mysql.cj.jdbc.Driver<br>  url: jdbc:mysql:<span class="hljs-comment">//localhost:3306/memory</span><br>  username: root<br>  password: Dw990831<br></code></pre></td></tr></table></figure><ul><li><h5 id="项目名称"><a href="#项目名称" class="headerlink" title="项目名称"></a>项目名称</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">spring:<br>  # Project name<br>  application:<br>    name: user-center<br></code></pre></td></tr></table></figure><ul><li><h5 id="项目端口-项目所有API路径上下文"><a href="#项目端口-项目所有API路径上下文" class="headerlink" title="项目端口 | 项目所有API路径上下文"></a>项目端口 | 项目所有API路径上下文</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"># 端口<br>server:<br>  port: <span class="hljs-number">8081</span><br>  servlet:<br>    context-path: /api<br></code></pre></td></tr></table></figure><ul><li><h5 id="逻辑删除-MybatisPlus提供"><a href="#逻辑删除-MybatisPlus提供" class="headerlink" title="逻辑删除(MybatisPlus提供)"></a>逻辑删除(MybatisPlus提供)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"># 逻辑删除<br>mybatis-plus:<br>  global-config:<br>    db-config:<br>      logic-delete-field: isDelete # 全局逻辑删除的实体字段名(since <span class="hljs-number">3.3</span><span class="hljs-number">.0</span>,配置后可以忽略不配置步骤<span class="hljs-number">2</span>)<br>      logic-delete-value: <span class="hljs-number">1</span> # 逻辑已删除值(默认为 <span class="hljs-number">1</span>)<br>      logic-not-delete-value: <span class="hljs-number">0</span> # 逻辑未删除值(默认为 <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li><h5 id="session"><a href="#session" class="headerlink" title="session"></a>session</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">  # session存活时间 一天<br>session:<br>  timeout: <span class="hljs-number">86640</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h1><h5 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h5><h2 id="登录-校验"><a href="#登录-校验" class="headerlink" title="登录+校验"></a>登录+校验</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User <span class="hljs-title function_">userLogin</span><span class="hljs-params">(String userAccount, String userPassword, HttpServletRequest request)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>public User user<span class="hljs-constructor">Login(String <span class="hljs-params">userAccount</span>, String <span class="hljs-params">userPassword</span>, HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br>    <span class="hljs-comment">// 1.校验</span><br>    <span class="hljs-comment">// 1.1.账户, 密码不能为空</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>)</span>)<br>        return null;<br><br>    <span class="hljs-comment">// 1.2.账户不小于4位</span><br>    <span class="hljs-keyword">if</span> (userAccount.length<span class="hljs-literal">()</span> &lt; <span class="hljs-number">4</span>)<br>        return null;<br><br>    <span class="hljs-comment">// 1.3.用户密码不小于8位</span><br>    <span class="hljs-keyword">if</span> (userPassword.length<span class="hljs-literal">()</span> &lt; <span class="hljs-number">8</span>)<br>        return null;<br><br>    <span class="hljs-comment">// 1.4.账户不包含特殊字符</span><br>    String pattern = <span class="hljs-string">&quot;.*[\\s`~!@#$%^&amp;*()+=|&#123;&#125;&#x27;:;&#x27;,\\[\\].&lt;&gt;/?~！@#￥%……&amp;*（）——+|&#123;&#125;【】‘；：”“’。，、？\\\\]+.*&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Pattern</span>.</span></span>matches(pattern, userAccount))<br>        return null;<br><br>    <span class="hljs-comment">// 1.5.检验该用户是否注册</span><br>    User user = <span class="hljs-keyword">new</span> <span class="hljs-constructor">User()</span>;<br><br>    user.set<span class="hljs-constructor">UserAccount(<span class="hljs-params">userAccount</span>)</span>;<br><br>    String encryptPassword = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigestUtils</span>.</span></span>md5<span class="hljs-constructor">DigestAsHex((SALT + <span class="hljs-params">userPassword</span>)</span>.get<span class="hljs-constructor">Bytes()</span>);<br>    user.set<span class="hljs-constructor">UserPassword(<span class="hljs-params">encryptPassword</span>)</span>;<br><br>    QueryWrapper&lt;User&gt; qw = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;<span class="hljs-literal">()</span>;<br>    qw.eq(<span class="hljs-string">&quot;user_account&quot;</span>, userAccount).eq(<span class="hljs-string">&quot;user_password&quot;</span>, encryptPassword);<br>    User one = this.get<span class="hljs-constructor">One(<span class="hljs-params">qw</span>)</span>;<br><br>    <span class="hljs-comment">// 1.5.1.用户未注册(包含了MP自带的逻辑删除校验)</span><br>    <span class="hljs-keyword">if</span> (one<span class="hljs-operator"> == </span>null)<br>        return null;<br><br>    <span class="hljs-comment">// 2.脱敏用户信息</span><br>    User safetyUser = get<span class="hljs-constructor">SafetyUser(<span class="hljs-params">one</span>)</span>;<br><br>    <span class="hljs-comment">// 3.记录用户登录态</span><br>    request.get<span class="hljs-constructor">Session()</span>.set<span class="hljs-constructor">Attribute(USER_LOGIN_STATE, <span class="hljs-params">safetyUser</span>)</span>;<br><br>    <span class="hljs-comment">// 4.返回用户信息</span><br>    return safetyUser;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注册-校验"><a href="#注册-校验" class="headerlink" title="注册+校验"></a>注册+校验</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-title function_">userRegister</span><span class="hljs-params">(String userAccount, String userPassword, String checkPassword)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户注册</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userAccount   账户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userPassword  密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> checkPassword 二次密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用户id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">userRegister</span><span class="hljs-params">(String userAccount, String userPassword, String checkPassword)</span> &#123;<br>        <span class="hljs-comment">// 1.校验</span><br>        <span class="hljs-comment">// 1.1.账户, 密码, 二次密码不能为空</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isAnyBlank(userAccount, userPassword, checkPassword))<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 1.2.账户不小于4位</span><br>        <span class="hljs-keyword">if</span> (userAccount.length() &lt; <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 1.3.账户不能重复</span><br>        QueryWrapper&lt;User&gt; lqw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;(); <span class="hljs-comment">// LambdaQueryWrapper&lt;User&gt; userLambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br>        lqw.eq(<span class="hljs-string">&quot;user_account&quot;</span>, userAccount); <span class="hljs-comment">// userLambdaQueryWrapper.eq(User::getUserAccount, userAccount);</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> userMapper.selectCount(lqw);   <span class="hljs-comment">// long count = this.count(lqw);</span><br><br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 1.4.用户密码不小于8位</span><br>        <span class="hljs-keyword">if</span> (userPassword.length() &lt; <span class="hljs-number">8</span>)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 1.5.账户不包含特殊字符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.*[\\s`~!@#$%^&amp;*()+=|&#123;&#125;&#x27;:;&#x27;,\\[\\].&lt;&gt;/?~！@#￥%……&amp;*（）——+|&#123;&#125;【】‘；：”“’。，、？\\\\]+.*&quot;</span>;<br>        <span class="hljs-keyword">if</span> (Pattern.matches(pattern, userAccount))<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 1.6.二次密码与密码相同</span><br>        <span class="hljs-keyword">if</span> (!userPassword.equals(checkPassword))<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br><br>        <span class="hljs-comment">// 2.对密码进行加密</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">encryptPassword</span> <span class="hljs-operator">=</span> DigestUtils.md5DigestAsHex((SALT + userPassword).getBytes());<br><span class="hljs-comment">//        System.out.println(encryptPassword);</span><br><br><br>        <span class="hljs-comment">// 3.向数据库中插入用户数据</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        <span class="hljs-comment">//</span><br>        user.setUserAccount(userAccount);<br>        user.setUserPassword(encryptPassword);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">save</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.save(user);<br>        <span class="hljs-comment">//插入失败</span><br>        <span class="hljs-keyword">if</span> (!save)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">return</span> user.getId();<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="封装脱敏用户信息"><a href="#封装脱敏用户信息" class="headerlink" title="封装脱敏用户信息"></a>封装脱敏用户信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User <span class="hljs-title function_">getSafetyUser</span><span class="hljs-params">(User originUser)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户信息脱敏</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> originUser 原始用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 脱敏后的用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getSafetyUser</span><span class="hljs-params">(User originUser)</span> &#123;<br>    <span class="hljs-keyword">if</span> (originUser == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">safetyUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    safetyUser.setId(originUser.getId());<br>    safetyUser.setUserAccount(originUser.getUserAccount());<br>    safetyUser.setUsername(originUser.getUsername());<br>    safetyUser.setAvatarUrl(originUser.getAvatarUrl());<br>    safetyUser.setGender(originUser.getGender());<br>    safetyUser.setPhone(originUser.getPhone());<br>    safetyUser.setEmail(originUser.getEmail());<br>    safetyUser.setUserStatus(originUser.getUserStatus());<br>    safetyUser.setCreateTime(originUser.getCreateTime());<br>    safetyUser.setIsDelete(originUser.getIsDelete());<br>    safetyUser.setUserRole(originUser.getUserRole());<br><br>    <span class="hljs-keyword">return</span> safetyUser;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h5><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户登录</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userLoginRequest 登录信息封装</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request          request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> User</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">userLogin</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserLoginRequest userLoginRequest, HttpServletRequest request)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userAccount</span> <span class="hljs-operator">=</span> userLoginRequest.getUserAccount();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userPassword</span> <span class="hljs-operator">=</span> userLoginRequest.getUserPassword();<br>        <span class="hljs-comment">//controller对参数的校验</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isAnyBlank(userAccount, userPassword))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">return</span> userService.userLogin(userAccount, userPassword, request);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户注册</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userRegisterRequest 注册信息封装类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping(&quot;/register&quot;)</span><br><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">userRegister</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserRegisterRequest userRegisterRequest)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">userAccount</span> <span class="hljs-operator">=</span> userRegisterRequest.getUserAccount();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">userPassword</span> <span class="hljs-operator">=</span> userRegisterRequest.getUserPassword();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">checkPassword</span> <span class="hljs-operator">=</span> userRegisterRequest.getCheckPassword();<br>    <span class="hljs-comment">//controller对参数的校验</span><br>    <span class="hljs-keyword">if</span> (StringUtils.isAnyBlank(userAccount, userPassword, checkPassword))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">return</span> userService.userRegister(userAccount, userPassword, checkPassword);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查询用户-权限校验"><a href="#查询用户-权限校验" class="headerlink" title="查询用户+权限校验"></a>查询用户+权限校验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询用户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查到的用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/search&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">userSearch</span><span class="hljs-params">(String username, HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">// 1.校验权限</span><br>        <span class="hljs-keyword">if</span> (!isAdmin(request))<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 2.判空, 默认查询全部</span><br>        QueryWrapper&lt;User&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(username))<br>            qw.like(<span class="hljs-string">&quot;username&quot;</span>, username);<br>        <span class="hljs-comment">// 3.查询</span><br>        List&lt;User&gt; userList = userService.list(qw);<br>        <span class="hljs-comment">// 4.返回脱敏的用户信息</span><br>        <span class="hljs-keyword">return</span> userList.stream().map(user -&gt; userService.getSafetyUser(user)).collect(Collectors.toList());<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="删除用户-权限校验"><a href="#删除用户-权限校验" class="headerlink" title="删除用户+权限校验"></a>删除用户+权限校验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除用户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 用户id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true/false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/delete&quot;)</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">userDelete</span><span class="hljs-params">(Long id, HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">// 1.校验权限</span><br>        <span class="hljs-keyword">if</span> (!isAdmin(request))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">if</span> (id &lt;= <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-comment">// 2.删除用户(只要配置MP的逻辑删除的话, 该删除为逻辑删除)</span><br>        <span class="hljs-keyword">return</span> userService.removeById(id);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="获取用户登录态"><a href="#获取用户登录态" class="headerlink" title="获取用户登录态"></a>获取用户登录态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 查询用户</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 查到的用户</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@GetMapping(&quot;/search&quot;)</span><br>  <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">userSearch</span><span class="hljs-params">(String username, HttpServletRequest request)</span> &#123;<br>      <span class="hljs-comment">// 1.校验权限</span><br>      <span class="hljs-keyword">if</span> (!isAdmin(request))<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      <span class="hljs-comment">// 2.判空, 默认查询全部</span><br>      QueryWrapper&lt;User&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>      <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(username))<br>          qw.like(<span class="hljs-string">&quot;username&quot;</span>, username);<br>      <span class="hljs-comment">// 3.查询</span><br>      List&lt;User&gt; userList = userService.list(qw);<br>      <span class="hljs-comment">// 4.返回脱敏的用户信息</span><br>      <span class="hljs-keyword">return</span> userList.stream().map(user -&gt; userService.getSafetyUser(user)).collect(Collectors.toList());<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="封装校验管理员逻辑"><a href="#封装校验管理员逻辑" class="headerlink" title="封装校验管理员逻辑"></a>封装校验管理员逻辑</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验是否为管理员</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 校验成功与否</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">isAdmin</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">//校验是否为管理员</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) request.getSession().getAttribute(USER_LOGIN_STATE);<br>        <span class="hljs-keyword">return</span> user != <span class="hljs-literal">null</span> &amp;&amp; user.getUserRole() == ADMIN_ROLE;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="constant层"><a href="#constant层" class="headerlink" title="constant层"></a>constant层</h5><h2 id="封装常量"><a href="#封装常量" class="headerlink" title="封装常量"></a>封装常量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//登录用户session Key</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USER_LOGIN_STATE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;userLoginState&quot;</span>;<br>   <span class="hljs-comment">//管理员权限</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ADMIN_ROLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>   <span class="hljs-comment">//普通用户权限</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_ROLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h5 id="model-request层"><a href="#model-request层" class="headerlink" title="model/request层"></a>model/request层</h5><h2 id="封装login-register实体接收类"><a href="#封装login-register实体接收类" class="headerlink" title="封装login/register实体接收类"></a>封装login/register实体接收类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLoginRequest</span> &#123;<br>    <span class="hljs-keyword">private</span> String userAccount;<br>    <span class="hljs-keyword">private</span> String userPassword;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRegisterRequest</span> &#123;<br>    <span class="hljs-keyword">private</span> String userAccount;<br>    <span class="hljs-keyword">private</span> String userPassword;<br>    <span class="hljs-keyword">private</span> String checkPassword;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h1><h2 id="修改登录页面"><a href="#修改登录页面" class="headerlink" title="修改登录页面"></a>修改登录页面</h2><ul><li><p>熟悉登录流程 请求地址 返回数据</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 登录</span><br><span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> <span class="hljs-title function_">login</span>(&#123;<br>  ...values,<br>  <span class="hljs-keyword">type</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/** 登录接口 POST /api/login/account */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">body: API.LoginParams, options?: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> request&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">LoginResult</span>&gt;(<span class="hljs-string">&#x27;/api/user/login&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">data</span>: body,<br>    ...(options || &#123;&#125;),<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>登录表单的校验逻辑(账号 密码)</p></li><li><p>登录校验  成功则提示登录成功   重定向到welcome页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 登录成功</span><br><span class="hljs-keyword">if</span> (user) &#123;<br>  <span class="hljs-keyword">const</span> defaultLoginSuccessMessage = <span class="hljs-string">&#x27;登录成功！&#x27;</span>;<br>  message.<span class="hljs-title function_">success</span>(defaultLoginSuccessMessage);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetchUserInfo</span>();<br>  <span class="hljs-comment">/** 此方法会跳转到 redirect 参数所在的位置 */</span><br>  <span class="hljs-keyword">if</span> (!history) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">const</span> &#123;query&#125; = history.<span class="hljs-property">location</span>;<br>  <span class="hljs-keyword">const</span> &#123;redirect&#125; = query <span class="hljs-keyword">as</span> &#123;<br>    <span class="hljs-attr">redirect</span>: string;<br>  &#125;;<br>  <span class="hljs-comment">// &#123; path: &#x27;/&#x27;, redirect: &#x27;/welcome&#x27; &#125;,</span><br>  <span class="hljs-comment">// 跳转到欢迎页面</span><br>  history.<span class="hljs-title function_">push</span>(redirect || <span class="hljs-string">&#x27;/&#x27;</span>);<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>登录校验  失败则提示登录失败</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> defaultLoginFailureMessage = <span class="hljs-string">&#x27;登录失败，请重试！&#x27;</span>;<br>message.<span class="hljs-title function_">error</span>(defaultLoginFailureMessage);<br></code></pre></td></tr></table></figure></li></ul><h2 id="开发注册页面"><a href="#开发注册页面" class="headerlink" title="开发注册页面"></a>开发注册页面</h2><ul><li><p>登录页的复制粘贴</p></li><li><p>路由的理解  设置注册页的路由  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;注册&#x27;</span>, <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/register&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./user/Register&#x27;</span> &#125;,<br></code></pre></td></tr></table></figure></li><li><p>注册表单的校验逻辑(账号 密码)</p></li><li><p>熟悉注册流程  请求地址 返回数据</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 发起请求</span><br><span class="hljs-keyword">const</span> id = <span class="hljs-keyword">await</span> <span class="hljs-title function_">register</span>(&#123;<br>  ...values,<br>  <span class="hljs-keyword">type</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/** 注册接口 POST /api/login/account */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">body: API.LoginParams, options?: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> request&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">LoginResult</span>&gt;(<span class="hljs-string">&#x27;/api/user/register&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">data</span>: body,<br>    ...(options || &#123;&#125;),<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>解决访问注册页面   重定向到Login问题   业务逻辑   白名单内, 无需重定向到登录页</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//白名单内无需重定向</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">NO_NEED_LOGIN_WHITE_LIST</span>.<span class="hljs-title function_">includes</span>(location.<span class="hljs-property">pathname</span>))<br>  <span class="hljs-keyword">return</span>;<br><span class="hljs-comment">// 白名单外, 如果没有登录, 重定向到 login</span><br><span class="hljs-keyword">if</span> (!initialState?.<span class="hljs-property">currentUser</span>) &#123;<br>  history.<span class="hljs-title function_">push</span>(loginPath);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注册成功  提示”注册成功”  跳转登录页面</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript">history.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;user/login&#x27;</span>,<br>  query,<br>&#125;)<br>跳转到登录页面<br></code></pre></td></tr></table></figure></li><li><p>注册失败  提示”注册失败”   </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> defaultLoginFailureMessage = <span class="hljs-string">&#x27;注册失败，请重试！&#x27;</span>;<br>message.<span class="hljs-title function_">error</span>(defaultLoginFailureMessage);<br></code></pre></td></tr></table></figure></li><li><p>“登录” 修改为 “注册”   (了解源码)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript">submitter=&#123;&#123;<br>  <span class="hljs-attr">searchConfig</span>: &#123;<br>    <span class="hljs-attr">submitText</span>: <span class="hljs-string">&#x27;注册&#x27;</span><br>  &#125;<br>&#125;&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加注册校验  简单的逻辑  根据返回的数据  解构出密码和二次密码 判断二者是否相等</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> &#123;userPassword, checkPassword&#125; = values;<br><span class="hljs-comment">//校验</span><br><span class="hljs-keyword">if</span> (userPassword != checkPassword) &#123;<br>  message.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;两次输入的密码不一致!&#x27;</span>)<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加登录页跳转到注册页的链接”新用户注册”  仿照  “忘记密码”  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;a<br>  href=&quot;/user/register&quot;<br>  target=&quot;_blank&quot;<br>  rel=&quot;noreferrer&quot;<br>&gt;<br>  新用户注册<br>&lt;/a&gt;<br></code></pre></td></tr></table></figure></li></ul><h1 id="获取当前用户登录态"><a href="#获取当前用户登录态" class="headerlink" title="获取当前用户登录态"></a>获取当前用户登录态</h1><h2 id="后端实现接口"><a href="#后端实现接口" class="headerlink" title="后端实现接口"></a>后端实现接口</h2><p>返回当前用户的当前信息(重新查询过数据库)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/currentUser&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getCurrentUser</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">currentUser</span> <span class="hljs-operator">=</span> (User) request.getSession().getAttribute(USER_LOGIN_STATE);<br>    <span class="hljs-keyword">if</span> (currentUser == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> currentUser.getId();<br>    <span class="hljs-comment">// 查询数据库, 获取最新信息, 而非登录时记录的信息</span><br>    <span class="hljs-keyword">return</span> userService.getById(id);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="前端获取用户登录态"><a href="#前端获取用户登录态" class="headerlink" title="前端获取用户登录态"></a>前端获取用户登录态</h2><ul><li>app.tsx   前端服务入口   每次打开页面, 都会执行查询</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 查询用户登录态信息</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-title function_">queryCurrentUser</span>();<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 请求</span><br><span class="hljs-keyword">return</span> request&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">CurrentUser</span>&gt;(<span class="hljs-string">&#x27;/api/user/currentUser&#x27;</span>, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  ...(options || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>修改CurrentUser, 将返回的字段全部修改为对应数据库中的字段</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">CurrentUser</span> = &#123;<br>  id?: <span class="hljs-built_in">number</span>;<br>  userAccount?: <span class="hljs-built_in">string</span>;<br>  username?: <span class="hljs-built_in">string</span>;<br>  avatarUtil?: <span class="hljs-built_in">string</span>;<br>  gender?: <span class="hljs-built_in">string</span>;<br>  phone?: <span class="hljs-built_in">string</span>;<br>  email?: <span class="hljs-built_in">string</span>;<br>  userStatus?: <span class="hljs-built_in">string</span>;<br>  userRole?: <span class="hljs-built_in">string</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>设置白名单, 登录注册页面不会返回查询到的用户登录态, 其余页面会返回查询到的用户登录态</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 白名单内(登陆注册), 不返回用户登录态信息</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">NO_NEED_LOGIN_WHITE_LIST</span>.<span class="hljs-title function_">includes</span>(history.<span class="hljs-property">location</span>.<span class="hljs-property">pathname</span>)) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    fetchUserInfo,<br>    <span class="hljs-attr">settings</span>: defaultSettings,<br>  &#125;;<br>&#125;<br><span class="hljs-comment">// 登陆注册后, 页面返回用户登录态信息</span><br><span class="hljs-keyword">const</span> currentUser = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetchUserInfo</span>();<br><span class="hljs-keyword">return</span> &#123;<br>  fetchUserInfo,<br>  currentUser,<br>  <span class="hljs-attr">settings</span>: defaultSettings,<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="开发欢迎页面"><a href="#开发欢迎页面" class="headerlink" title="开发欢迎页面"></a>开发欢迎页面</h1><ul><li>设置欢迎页面的水印  头像</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-attr">waterMarkProps</span>: &#123;<br>  <span class="hljs-comment">// 添加水印</span><br>  <span class="hljs-attr">content</span>: initialState?.<span class="hljs-property">currentUser</span>?.<span class="hljs-property">username</span>, <span class="hljs-comment">// 以用户昵称作为水印</span><br>&#125;,<br></code></pre></td></tr></table></figure><ul><li>头像的话在/src/components/RightContext/AvatarDropdown.tsx里有个引用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;Avatar size=&quot;small&quot; className=&#123;styles.avatar&#125; src=&#123;currentUser.avatarUrl&#125; alt=&quot;avatar&quot;/&gt;<br></code></pre></td></tr></table></figure><ul><li>我这边头像刷新不出来是因为数据库里字段名写成avatarUtil了,一直没发现,改了正确的字段名以及映射实体类属性名  Mapper.xml 文件后 头像映射正常了</li></ul><h1 id="开发用户管理页面"><a href="#开发用户管理页面" class="headerlink" title="开发用户管理页面"></a>开发用户管理页面</h1><h2 id="新建一个管理界面"><a href="#新建一个管理界面" class="headerlink" title="新建一个管理界面"></a>新建一个管理界面</h2><ul><li><p>他奶奶的我这边出问题了</p></li><li><p>我新建了一个/Pages/Admin/UserManage    把Register文件夹复制过去打算修改, 结果它给我把Register的路由给替换了</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;注册&#x27;</span>, <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/register&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./user/UserManage&#x27;</span> &#125;,<br></code></pre></td></tr></table></figure><ul><li>然后前端直接挂掉了, 报错报了这个玩意儿  妈的找了半天 终于发现了 把路由改回来了</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">Cannot <span class="hljs-built_in">find</span> <span class="hljs-built_in">module</span> <span class="hljs-string">&#x27;D:/Project/星球项目/ClientCenter/myapp/src/pages/user/UserManage&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>给新增的用户管理页面加个路由</li></ul><p>​    path: ‘/admin/user-manager’    是访问路径</p><p>​    component: ‘./Admin/UserManage’    是资源路径</p><p>​    仿照下面的写就行了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;管理页&#x27;</span>,<br>  <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;crown&#x27;</span>,<br>  <span class="hljs-attr">access</span>: <span class="hljs-string">&#x27;canAdmin&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./Admin&#x27;</span>,<br>  <span class="hljs-attr">routes</span>: [<br>  <span class="hljs-comment">// 用户管理</span><br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin/user-manager&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;用户管理&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;smile&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./Admin/UserManage&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin/sub-page&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;二级管理页&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;smile&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./Welcome&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./404&#x27;</span> &#125;,<br>  ],<br>&#125;,<br></code></pre></td></tr></table></figure><ul><li>访问<a href="http://localhost:8000/admin/user-manager%E5%8F%91%E7%8E%B0%E6%97%A0%E6%9D%83%E8%AE%BF%E9%97%AE">http://localhost:8000/admin/user-manager发现无权访问</a>    好像存在访问权限    访问不到</li></ul><h4 id="项目全局入口"><a href="#项目全局入口" class="headerlink" title="项目全局入口"></a>项目全局入口</h4><h6 id="app-tsx是项目全局入口-里面包含了访问页面时-就会调用的方法-重定向到Login页-查询用户登录态"><a href="#app-tsx是项目全局入口-里面包含了访问页面时-就会调用的方法-重定向到Login页-查询用户登录态" class="headerlink" title="app.tsx是项目全局入口     里面包含了访问页面时, 就会调用的方法,     重定向到Login页   查询用户登录态"></a>app.tsx是项目全局入口     里面包含了访问页面时, 就会调用的方法,     <strong>重定向到Login页   查询用户登录态</strong></h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;管理页&#x27;</span>,<br>  <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;crown&#x27;</span>,<br>  <span class="hljs-comment">// 管理员权限校验</span><br>  <span class="hljs-attr">access</span>: <span class="hljs-string">&#x27;canAdmin&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./Admin&#x27;</span>,<br>  <span class="hljs-attr">routes</span>: [<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin/user-manager&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;用户管理&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;smile&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./Admin/UserManage&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin/sub-page&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;二级管理页&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;smile&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./Welcome&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./404&#x27;</span> &#125;,<br>  ],<br>&#125;,<br></code></pre></td></tr></table></figure><h6 id="看到那个access了吗-通过校验’canAdmin’的真假-判断是否具有管理员权限-这就是控制了这个路由的访问权限-怎么实现的"><a href="#看到那个access了吗-通过校验’canAdmin’的真假-判断是否具有管理员权限-这就是控制了这个路由的访问权限-怎么实现的" class="headerlink" title="看到那个access了吗  通过校验’canAdmin’的真假   判断是否具有管理员权限  这就是控制了这个路由的访问权限    怎么实现的?"></a>看到那个access了吗  通过校验’canAdmin’的真假   判断是否具有管理员权限  这就是控制了这个路由的访问权限    怎么实现的?</h6><h4 id="访问权限管理"><a href="#访问权限管理" class="headerlink" title="访问权限管理"></a>访问权限管理</h4><h6 id="access-ts是访问权限管理-在查询到用户登录态后-通过返回结果CurrentUser来校验-这段逻辑非常简单-我们可以修改为自己的逻辑"><a href="#access-ts是访问权限管理-在查询到用户登录态后-通过返回结果CurrentUser来校验-这段逻辑非常简单-我们可以修改为自己的逻辑" class="headerlink" title="access.ts是访问权限管理    在查询到用户登录态后    通过返回结果CurrentUser来校验    这段逻辑非常简单    我们可以修改为自己的逻辑"></a>access.ts是访问权限管理    在查询到用户登录态后    通过返回结果CurrentUser来校验    这段逻辑非常简单    我们可以修改为自己的逻辑</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">access</span>(<span class="hljs-params">initialState: &#123; currentUser?: API.CurrentUser &#125; | <span class="hljs-literal">undefined</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; currentUser &#125; = initialState ?? &#123;&#125;;<br>  <span class="hljs-comment">// 权限校验</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-comment">// 校验管理员权限</span><br>    <span class="hljs-attr">canAdmin</span>: currentUser &amp;&amp; currentUser.<span class="hljs-property">access</span> === <span class="hljs-string">&#x27;admin&#x27;</span><br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>修改访问路由的管理员权限的校验规则</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 校验管理员权限</span><br><span class="hljs-attr">canAdmin</span>: currentUser &amp;&amp; currentUser.<span class="hljs-property">userRole</span> === <span class="hljs-number">1</span>,<br></code></pre></td></tr></table></figure><ul><li>找一个管理员账号登录,  发现<a href="http://localhost:8000/admin/user-manager%E9%A1%B5%E9%9D%A2%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E4%BA%86">http://localhost:8000/admin/user-manager页面可以访问了</a>  因为我们由管理员权限了</li></ul><h2 id="正确显示管理页面"><a href="#正确显示管理页面" class="headerlink" title="正确显示管理页面"></a>正确显示管理页面</h2><h6 id="原本的页面显示组件是-Admin-tsx"><a href="#原本的页面显示组件是-Admin-tsx" class="headerlink" title="原本的页面显示组件是 Admin.tsx"></a>原本的页面显示组件是 Admin.tsx</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 父路由</span><br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin&#x27;</span>,<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;管理页&#x27;</span>,<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;crown&#x27;</span>,<br><span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./Admin&#x27;</span>,<br><span class="hljs-comment">// 子路由</span><br>    <span class="hljs-attr">routes</span>: [<br>      &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin/user-manager&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;用户管理&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;smile&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./Admin/UserManage&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./404&#x27;</span> &#125;,<br>    ],<br></code></pre></td></tr></table></figure><h6 id="组件里面这么写"><a href="#组件里面这么写" class="headerlink" title="组件里面这么写:"></a>组件里面这么写:</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript">onst <span class="hljs-title class_">Admin</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">FC</span> = <span class="hljs-function">(<span class="hljs-params">&#123;children&#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PageHeaderWrapper</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&#123;</span>&#x27; <span class="hljs-attr">这个页面只有</span> <span class="hljs-attr">admin</span> <span class="hljs-attr">权限才能查看</span>&#x27;&#125;&gt;</span></span><br><span class="language-xml">    // 展示子路由组件</span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">PageHeaderWrapper</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><h6 id="这样管理页面就能显示我们定义的组件-Admin-UserManage-index-tsx-了"><a href="#这样管理页面就能显示我们定义的组件-Admin-UserManage-index-tsx-了" class="headerlink" title="这样管理页面就能显示我们定义的组件 Admin/UserManage/index.tsx 了"></a>这样管理页面就能显示我们定义的组件 Admin/UserManage/index.tsx 了</h6><ul><li><p>我们上ProComponents的高级表格里找一个高级表格, 作为管理页面</p></li><li><p>直接找一个漂亮有用的, 粘贴到/UserManage/index.tsx里</p></li><li><p>接下来就是对该页面的改造了</p></li></ul><h2 id="改造新的组件-管理页面"><a href="#改造新的组件-管理页面" class="headerlink" title="改造新的组件(管理页面)"></a>改造新的组件(管理页面)</h2><h4 id="改造表格数据-数据如何展示"><a href="#改造表格数据-数据如何展示" class="headerlink" title="改造表格数据(数据如何展示)"></a>改造表格数据(数据如何展示)</h4><ul><li>改造返回数据类型 (API.CurrentUser) 和各列名</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 返回的数据类型改造为Api.currentUser</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">columns</span>: <span class="hljs-title class_">ProColumns</span>&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">CurrentUser</span>&gt;[] = [<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;账号&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;userAccount&#x27;</span>,<br>    <span class="hljs-attr">copyable</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;昵称&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;username&#x27;</span>,<br>    <span class="hljs-attr">copyable</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;头像&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;avatarUrl&#x27;</span>,<br>    <span class="hljs-attr">copyable</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;性别&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;gender&#x27;</span>,<br>    <span class="hljs-attr">copyable</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;电话&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;phone&#x27;</span>,<br>    <span class="hljs-attr">copyable</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;邮件&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;email&#x27;</span>,<br>    <span class="hljs-attr">copyable</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;角色&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;userRole&#x27;</span>,<br>    <span class="hljs-attr">copyable</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;createTime&#x27;</span>,<br>    <span class="hljs-attr">copyable</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">disable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;状态&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;state&#x27;</span>,<br>    <span class="hljs-attr">filters</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">onFilter</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">ellipsis</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">valueType</span>: <span class="hljs-string">&#x27;select&#x27;</span>,<br>    <span class="hljs-attr">valueEnum</span>: &#123;<br>      <span class="hljs-attr">all</span>: &#123;<span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;超长&#x27;</span>.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">50</span>)&#125;,<br>      <span class="hljs-attr">open</span>: &#123;<br>        <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;未解决&#x27;</span>,<br>        <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;Error&#x27;</span>,<br>      &#125;,<br>      <span class="hljs-attr">closed</span>: &#123;<br>        <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;已解决&#x27;</span>,<br>        <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;Success&#x27;</span>,<br>        <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span>,<br>      &#125;,<br>      <span class="hljs-attr">processing</span>: &#123;<br>        <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;解决中&#x27;</span>,<br>        <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;Processing&#x27;</span>,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br><br>];<br></code></pre></td></tr></table></figure><h4 id="改造访问路径-数据从何而来"><a href="#改造访问路径-数据从何而来" class="headerlink" title="改造访问路径(数据从何而来)"></a>改造访问路径(数据从何而来)</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript">columns=&#123;columns&#125;<br>actionRef=&#123;actionRef&#125;<br>cardBordered<br>request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;, sort, filter) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sort, filter);<br>  <span class="hljs-comment">// 返回userList</span><br>  <span class="hljs-comment">// 自定义函数</span><br>  <span class="hljs-keyword">const</span> userList = <span class="hljs-keyword">await</span> <span class="hljs-title function_">searchUsers</span>();<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">data</span>: userList<br>  &#125;<br>&#125;&#125;<br></code></pre></td></tr></table></figure><ul><li>在api.ts下编写自定义函数searchUsers, 并设置访问路径</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/** 此处后端没有提供注释 GET /api/notices */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">searchUsers</span>(<span class="hljs-params">options?: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;</span>) &#123;<br><span class="hljs-comment">// 返回数据格式为API.CurrentUser</span><br>  <span class="hljs-keyword">return</span> request&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">CurrentUser</span>&gt;(<span class="hljs-string">&#x27;/api/user/search&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    ...(options || &#123;&#125;),<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>后端返回所有用户数据, 并展示在表格中 展示成功了</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询用户</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 查到的用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/search&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">User</span>&gt; <span class="hljs-title function_">userSearch</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> username, HttpServletRequest request</span>) &#123;<br>    <span class="hljs-comment">// 1.校验权限</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isAdmin</span>(request))<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">// 2.判空, 默认查询全部</span><br>    <span class="hljs-title class_">QueryWrapper</span>&lt;<span class="hljs-title class_">User</span>&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">StringUtils</span>.<span class="hljs-title function_">isNotBlank</span>(username))<br>        qw.<span class="hljs-title function_">like</span>(<span class="hljs-string">&quot;username&quot;</span>, username);<br>    <span class="hljs-comment">// 3.查询</span><br>    <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">User</span>&gt; userList = userService.<span class="hljs-title function_">list</span>(qw);<br>    <span class="hljs-comment">// 4.返回脱敏的用户信息</span><br>    <span class="hljs-keyword">return</span> userList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">map</span>(user -&gt; userService.<span class="hljs-title function_">getSafetyUser</span>(user)).<span class="hljs-title function_">collect</span>(<span class="hljs-title class_">Collectors</span>.<span class="hljs-title function_">toList</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="项目全局命名空间-把一组TS类型全部定义到了这个命名空间下-即定义了一组返回数据对象-取的时候就不需要import了-直接API-TS类型就可以取到"><a href="#项目全局命名空间-把一组TS类型全部定义到了这个命名空间下-即定义了一组返回数据对象-取的时候就不需要import了-直接API-TS类型就可以取到" class="headerlink" title="项目全局命名空间, 把一组TS类型全部定义到了这个命名空间下, 即定义了一组返回数据对象, 取的时候就不需要import了, 直接API.TS类型就可以取到"></a><em><strong>项目全局命名空间</strong></em>, <em>把一组TS类型全部定义到了这个命名空间下, 即定义了一组返回数据对象, 取的时候就不需要import了, 直接API.TS类型就可以取到</em></h6><h6 id="src-services-ant-design-pro-typings-d-ts"><a href="#src-services-ant-design-pro-typings-d-ts" class="headerlink" title="src/services/ant-design-pro/typings.d.ts"></a>src/services/ant-design-pro/typings.d.ts</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">namespace</span> API &#123;<br>  <span class="hljs-keyword">type</span> <span class="hljs-title class_">CurrentUser</span> = &#123;<br>  .............<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> <span class="hljs-title class_">LoginResult</span> = &#123;<br>   .............<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> <span class="hljs-title class_">RegisterResult</span> = <span class="hljs-built_in">number</span>;<br><br>  <span class="hljs-keyword">type</span> <span class="hljs-title class_">PageParams</span> = &#123;<br>   .............<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> <span class="hljs-title class_">RuleListItem</span> = &#123;<br>   .............<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> <span class="hljs-title class_">RuleList</span> = &#123;<br>   .............<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> <span class="hljs-title class_">FakeCaptcha</span> = &#123;<br>   .............<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> <span class="hljs-title class_">LoginParams</span> = &#123;<br>   .............<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> <span class="hljs-title class_">RegisterParams</span> = &#123;<br>   .............<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> <span class="hljs-title class_">ErrorResponse</span> = &#123;<br>   .............<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> <span class="hljs-title class_">NoticeIconList</span> = &#123;<br>   .............<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> <span class="hljs-title class_">NoticeIconItemType</span> = <span class="hljs-string">&#x27;notification&#x27;</span> | <span class="hljs-string">&#x27;message&#x27;</span> | <span class="hljs-string">&#x27;event&#x27;</span>;<br><br>  <span class="hljs-keyword">type</span> <span class="hljs-title class_">NoticeIconItem</span> = &#123;<br>   .............<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="src-services-ant-design-pro-api-ts-这里定义了许多请求接口-根据请求地址-请求方式发出请求"><a href="#src-services-ant-design-pro-api-ts-这里定义了许多请求接口-根据请求地址-请求方式发出请求" class="headerlink" title="src/services/ant-design-pro/api.ts    这里定义了许多请求接口    根据请求地址 请求方式发出请求"></a>src/services/ant-design-pro/api.ts    <em>这里定义了许多请求接口</em>    <em>根据请求地址</em> 请求方式发出请求</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;request&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="修改表格显示细节"><a href="#修改表格显示细节" class="headerlink" title="修改表格显示细节"></a>修改表格显示细节</h2><ul><li><p>通过columns定义表格有哪些列</p></li><li><p>column属性</p></li></ul><p>​        <em><strong>dataIndex    对应返回数据对象的属性</strong></em></p><p>​        <em><strong>title    表格列名</strong></em></p><p>​        <em><strong>copyable    是否允许复制</strong></em></p><p>​        <em><strong>ellipsis    是否允许缩略</strong></em></p><p>​        <em><strong>valueType    用于声明这一列的类型</strong></em></p><ul><li>头像</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&#123;<br>  title: &#x27;头像&#x27;,<br>  dataIndex: &#x27;avatarUrl&#x27;,<br>  copyable: true,<br>  render: (_, record) =&gt; (<br>    &lt;div&gt;<br>      &lt;img src=&#123;record.avatarUrl&#125; width=&#123;100&#125;/&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;,<br></code></pre></td></tr></table></figure><ul><li>性别    角色    状态</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;性别&#x27;</span>,<br>  <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;gender&#x27;</span>,<br>  <span class="hljs-attr">valueType</span>: <span class="hljs-string">&#x27;select&#x27;</span>,<br>  <span class="hljs-attr">valueEnum</span>: &#123;<br>    <span class="hljs-number">0</span>: &#123;<br>      <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;女&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-number">1</span>: &#123;<br>      <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;男&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;角色&#x27;</span>,<br>  <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;userRole&#x27;</span>,<br>  <span class="hljs-attr">valueType</span>: <span class="hljs-string">&#x27;select&#x27;</span>,<br>  <span class="hljs-attr">valueEnum</span>: &#123;<br>    <span class="hljs-number">0</span>: &#123;<br>      <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;普通用户&#x27;</span>,<br>      <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;Default&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-number">1</span>: &#123;<br>      <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;管理员&#x27;</span>,<br>      <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;Success&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;状态&#x27;</span>,<br>  <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;userStatus&#x27;</span>,<br>  <span class="hljs-attr">valueType</span>: <span class="hljs-string">&#x27;select&#x27;</span>,<br>  <span class="hljs-attr">valueEnum</span>: &#123;<br>    <span class="hljs-number">0</span>: &#123;<br>      <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;正常&#x27;</span>,<br>      <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;Success&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-number">1</span>: &#123;<br>      <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;异常&#x27;</span>,<br>      <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;Error&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><h1 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h1><h2 id="新增注销功能"><a href="#新增注销功能" class="headerlink" title="新增注销功能"></a>新增注销功能</h2><ul><li>service层新增userLogout</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">userLogout</span><span class="hljs-params">(HttpServletRequest request)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 用户注销</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">userLogout</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>   <span class="hljs-comment">// 移除session</span><br>       request.getSession().removeAttribute(USER_LOGIN_STATE);<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li>controller层新增userLogout</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 用户登录</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> request request</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> int</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@PostMapping(&quot;/logout&quot;)</span><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">userLogout</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>      <span class="hljs-comment">//controller对参数的校验</span><br>      <span class="hljs-keyword">if</span> (request == <span class="hljs-literal">null</span>)<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>      <span class="hljs-keyword">return</span> userService.userLogout(request);<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li>前端src/RightContent/AvatarDropdown.tsx下有注销功能</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 退出登录，并且将当前的 url 保存</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">loginOut</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">outLogin</span>();<br>  <span class="hljs-keyword">const</span> &#123;query = &#123;&#125;, search, pathname&#125; = history.<span class="hljs-property">location</span>;<br>  <span class="hljs-keyword">const</span> &#123;redirect&#125; = query;<br>  <span class="hljs-comment">// Note: There may be security issues, please note</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">pathname</span> !== <span class="hljs-string">&#x27;/user/login&#x27;</span> &amp;&amp; !redirect) &#123;<br>    history.<span class="hljs-title function_">replace</span>(&#123;<br>      <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;/user/login&#x27;</span>,<br>      <span class="hljs-attr">search</span>: <span class="hljs-title function_">stringify</span>(&#123;<br>        <span class="hljs-attr">redirect</span>: pathname + search,<br>      &#125;),<br>    &#125;);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>修改注销接口 请求路径 </li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/** 退出登录接口 POST /api/user/logout */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">outLogin</span>(<span class="hljs-params">options?: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> request&lt;<span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">any</span>&gt;&gt;(<span class="hljs-string">&#x27;/api/user/logout&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    ...(options || &#123;&#125;),<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注销功能优化完毕"><a href="#注销功能优化完毕" class="headerlink" title="注销功能优化完毕"></a>注销功能优化完毕</h4><h2 id="用户必填信息新增星球编号"><a href="#用户必填信息新增星球编号" class="headerlink" title="用户必填信息新增星球编号"></a>用户必填信息新增星球编号</h2><ul><li>user表新增字段planet_code</li><li>重新生成对应实体类 domain    Mapper.xml  </li><li>注册接收类新增planetCode</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRegisterRequest</span> &#123;<br>    <span class="hljs-keyword">private</span> String userAccount;<br>    <span class="hljs-keyword">private</span> String userPassword;<br>    <span class="hljs-keyword">private</span> String checkPassword;<br>    <span class="hljs-keyword">private</span> String planetCode;<br>&#125;<br></code></pre></td></tr></table></figure><p>service层</p><ul><li>注册校验新增</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-title function_">userRegister</span><span class="hljs-params">(String userAccount, String userPassword, String checkPassword, String planetCode)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.6.星球编号不能超过5位</span><br>       <span class="hljs-keyword">if</span> (planetCode.length() &gt; <span class="hljs-number">5</span>)<br>           <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.8.星球编号不能重复</span><br>       QueryWrapper&lt;User&gt; pc_lqw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>       pc_lqw.eq(<span class="hljs-string">&quot;planet_code&quot;</span>, planetCode);<br>       <span class="hljs-type">Long</span> <span class="hljs-variable">pc_count</span> <span class="hljs-operator">=</span> userMapper.selectCount(pc_lqw);<br>       <span class="hljs-keyword">if</span> (pc_count &gt; <span class="hljs-number">0</span>)<br>           <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><ul><li>用户信息脱敏新增</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">safetyUser.setPlanetCode(originUser.getPlanetCode());<br></code></pre></td></tr></table></figure><p>controller层</p><ul><li>controller参数校验</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//controller对参数的校验</span><br><span class="hljs-keyword">if</span> (StringUtils.isAnyBlank(userAccount, userPassword, checkPassword, planetCode))<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><ul><li>注册页面新增星球编号填写和校验</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;ProFormText<br>  name=&quot;planetCode&quot;<br>  fieldProps=&#123;&#123;<br>    size: &#x27;large&#x27;,<br>    prefix: &lt;LockOutlined className=&#123;styles.prefixIcon&#125;/&gt;,<br>  &#125;&#125;<br>  placeholder=&#123;&#x27;请输入星球编号&#x27;&#125;<br>  rules=&#123;[<br>    &#123;<br>      required: true,<br>      message: &#x27;星球编号是必填项！&#x27;,<br>    &#125;,<br>    &#123;<br>      max: 5,<br>      type: &#x27;string&#x27;,<br>      message: &#x27;长度不能大于5位&#x27;,<br>    &#125;,<br>  ]&#125;<br>/&gt;<br></code></pre></td></tr></table></figure><ul><li>测试类新增planetCode</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">userRegister</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">userAccount</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;memory&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">userPassword</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">checkPassword</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">planetCode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;17265&quot;</span>;<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userService.userRegister(userAccount, userPassword, checkPassword, planetCode);<br>    Assertions.assertEquals(-<span class="hljs-number">1</span>, result);<br>    userAccount = <span class="hljs-string">&quot;mem&quot;</span>;<br>    result = userService.userRegister(userAccount, userPassword, checkPassword, planetCode);<br>    Assertions.assertEquals(-<span class="hljs-number">1</span>, result);<br>    userPassword = <span class="hljs-string">&quot;123456&quot;</span>;<br>    result = userService.userRegister(userAccount, userPassword, checkPassword, planetCode);<br>    Assertions.assertEquals(-<span class="hljs-number">1</span>, result);<br>    userAccount = <span class="hljs-string">&quot;me mory&quot;</span>;<br>    userPassword = <span class="hljs-string">&quot;12345678&quot;</span>;<br>    result = userService.userRegister(userAccount, userPassword, checkPassword, planetCode);<br>    Assertions.assertEquals(-<span class="hljs-number">1</span>, result);<br>    userAccount = <span class="hljs-string">&quot;me mory&quot;</span>;<br>    checkPassword = <span class="hljs-string">&quot;12345678&quot;</span>;<br>    result = userService.userRegister(userAccount, userPassword, checkPassword, planetCode);<br>    Assertions.assertEquals(-<span class="hljs-number">1</span>, result);<br>    userAccount = <span class="hljs-string">&quot;memory4&quot;</span>;<br>    result = userService.userRegister(userAccount, userPassword, checkPassword, planetCode);<br>    Assertions.assertTrue(result &gt; <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>currentUser新增planetCode</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">CurrentUser</span> = &#123;<br>  id?: <span class="hljs-built_in">number</span>;<br>  userAccount?: <span class="hljs-built_in">string</span>;<br>  username?: <span class="hljs-built_in">string</span>;<br>  avatarUrl?: <span class="hljs-built_in">string</span>;<br>  gender?: <span class="hljs-built_in">string</span>;<br>  phone?: <span class="hljs-built_in">string</span>;<br>  email?: <span class="hljs-built_in">string</span>;<br>  createTime?: <span class="hljs-title class_">Date</span>;<br>  userStatus?: <span class="hljs-built_in">string</span>;<br>  userRole?: <span class="hljs-built_in">number</span>;<br>  planetCode?: <span class="hljs-built_in">string</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>管理页用户信息新增planetCode</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;星球编号&#x27;</span>,<br>  <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;planetCode&#x27;</span>,<br>  <span class="hljs-attr">copyable</span>: <span class="hljs-literal">true</span>,<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="新增星球编号注册必填项完成-管理页用户信息正常显示"><a href="#新增星球编号注册必填项完成-管理页用户信息正常显示" class="headerlink" title="新增星球编号注册必填项完成, 管理页用户信息正常显示"></a>新增星球编号注册必填项完成, 管理页用户信息正常显示</h4><h2 id="返回通用对象"><a href="#返回通用对象" class="headerlink" title="返回通用对象"></a>返回通用对象</h2><ul><li><h5 id="自定义通用返回对象-BaseResponse"><a href="#自定义通用返回对象-BaseResponse" class="headerlink" title="自定义通用返回对象 - BaseResponse"></a>自定义通用返回对象 - BaseResponse</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 状态码</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br>  <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> T data;<br>  <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 信息</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> String message;<br>  <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 描述</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> String description;<br></code></pre></td></tr></table></figure><ul><li><h5 id="通用返回对象多种构造器"><a href="#通用返回对象多种构造器" class="headerlink" title="通用返回对象多种构造器"></a>通用返回对象多种构造器</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 封装执行成功的结果</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> code        状态码</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> data        数据</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> message     信息</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> description 描述</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseResponse</span><span class="hljs-params">(<span class="hljs-type">int</span> code, T data, String message, String description)</span> &#123;<br>       <span class="hljs-built_in">this</span>.code = code;<br>       <span class="hljs-built_in">this</span>.data = data;<br>       <span class="hljs-built_in">this</span>.message = message;<br>       <span class="hljs-built_in">this</span>.description = description;<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 封装全局自定义异常</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> code        状态码</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> message     信息</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> description 描述</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseResponse</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String message, String description)</span> &#123;<br>       <span class="hljs-built_in">this</span>.code = code;<br>       <span class="hljs-built_in">this</span>.data = <span class="hljs-literal">null</span>;<br>       <span class="hljs-built_in">this</span>.message = message;<br>       <span class="hljs-built_in">this</span>.description = description;<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 封装局部自定义异常</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> errorCode 自定义异常态</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseResponse</span><span class="hljs-params">(ErrorCode errorCode)</span> &#123;<br>      <span class="hljs-built_in">this</span>.code = errorCode.getCode();<br>      <span class="hljs-built_in">this</span>.data = <span class="hljs-literal">null</span>;<br>      <span class="hljs-built_in">this</span>.message = errorCode.getMessage();<br>      <span class="hljs-built_in">this</span>.description = errorCode.getDescription();<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="通用返回对象添加getter-setter方法"><a href="#通用返回对象添加getter-setter方法" class="headerlink" title="通用返回对象添加getter, setter方法"></a>通用返回对象添加getter, setter方法</h5></li><li><h5 id="这一步一定不要忘记啊-我就因为没加这俩方法-测试登录注册就报406错误"><a href="#这一步一定不要忘记啊-我就因为没加这俩方法-测试登录注册就报406错误" class="headerlink" title="这一步一定不要忘记啊, 我就因为没加这俩方法, 测试登录注册就报406错误"></a>这一步一定不要忘记啊, 我就因为没加这俩方法, 测试登录注册就报406错误</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>    <span class="hljs-built_in">this</span>.code = code;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(T data)</span> &#123;<br>    <span class="hljs-built_in">this</span>.data = data;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;<br>    <span class="hljs-built_in">this</span>.message = message;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDescription</span><span class="hljs-params">(String description)</span> &#123;<br>    <span class="hljs-built_in">this</span>.description = description;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="返回成功的话-就是返回成功状态-即返回状态码-数据-“ok”-message-“”-description"><a href="#返回成功的话-就是返回成功状态-即返回状态码-数据-“ok”-message-“”-description" class="headerlink" title="返回成功的话, 就是返回成功状态, 即返回状态码 + 数据 + “ok”(message) + “”(description)"></a>返回成功的话, 就是返回成功状态, 即返回状态码 + 数据 + “ok”(message) + “”(description)</h4><ul><li><h5 id="封装返回成功状态下通用对象的方法"><a href="#封装返回成功状态下通用对象的方法" class="headerlink" title="封装返回成功状态下通用对象的方法"></a>封装返回成功状态下通用对象的方法</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 封装调用执行成功</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> data 返回数据</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> &lt;T&gt;  数据类型</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> 执行成功信息</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; BaseResponse&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(T data)</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-number">0</span>, data, <span class="hljs-string">&quot;ok&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="返回失败的话-就是返回失败状态-即返回状态码-null-data-message-description"><a href="#返回失败的话-就是返回失败状态-即返回状态码-null-data-message-description" class="headerlink" title="返回失败的话, 就是返回失败状态, 即返回状态码 + null(data) + message + description"></a>返回失败的话, 就是返回失败状态, 即返回状态码 + null(data) + message + description</h4><h4 id="实现思路-这里我们打算封装自定义异常类和全局异常处理器-当业务中出现错误-不会返回失败结果-而是抛出相应的异常-并由全局异常处理器捕获-再由全局异常处理器来返回对应失败状态"><a href="#实现思路-这里我们打算封装自定义异常类和全局异常处理器-当业务中出现错误-不会返回失败结果-而是抛出相应的异常-并由全局异常处理器捕获-再由全局异常处理器来返回对应失败状态" class="headerlink" title="实现思路: 这里我们打算封装自定义异常类和全局异常处理器, 当业务中出现错误, 不会返回失败结果, 而是抛出相应的异常, 并由全局异常处理器捕获, 再由全局异常处理器来返回对应失败状态"></a>实现思路: 这里我们打算封装自定义异常类和全局异常处理器, 当业务中出现错误, 不会返回失败结果, 而是抛出相应的异常, 并由全局异常处理器捕获, 再由全局异常处理器来返回对应失败状态</h4><h2 id="封装自定义异常BusinessException"><a href="#封装自定义异常BusinessException" class="headerlink" title="封装自定义异常BusinessException"></a>封装自定义异常BusinessException</h2><h5 id="自定义异常成员属性"><a href="#自定义异常成员属性" class="headerlink" title="自定义异常成员属性"></a>自定义异常成员属性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BusinessException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> code;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 异常描述</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String description;<br>................<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="这里我们会发现-自定义异常里没有定义message属性-这是因为自定义异常继承了RuntimeException-在执行构造方法时-执行super-message-即可设置自定义的异常信息-再通过e-getMessage-方法来获取异常信息"><a href="#这里我们会发现-自定义异常里没有定义message属性-这是因为自定义异常继承了RuntimeException-在执行构造方法时-执行super-message-即可设置自定义的异常信息-再通过e-getMessage-方法来获取异常信息" class="headerlink" title="这里我们会发现, 自定义异常里没有定义message属性. 这是因为自定义异常继承了RuntimeException, 在执行构造方法时, 执行super(message)即可设置自定义的异常信息, 再通过e.getMessage()方法来获取异常信息"></a>这里我们会发现, 自定义异常里没有定义message属性. 这是因为自定义异常继承了RuntimeException, 在执行构造方法时, 执行super(message)即可设置自定义的异常信息, 再通过e.getMessage()方法来获取异常信息</h5></li><li><h5 id="自定义异常多种构造器"><a href="#自定义异常多种构造器" class="headerlink" title="自定义异常多种构造器"></a>自定义异常多种构造器</h5></li><li><h5 id="局部业务代码下自定义的异常信息"><a href="#局部业务代码下自定义的异常信息" class="headerlink" title="局部业务代码下自定义的异常信息"></a>局部业务代码下自定义的异常信息</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 封装局部自定义异常</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message     异常信息</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> code        异常状态码</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> description 异常描述</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessException</span><span class="hljs-params">(String message, <span class="hljs-type">int</span> code, String description)</span> &#123;<br>      <span class="hljs-built_in">super</span>(message);<br>      <span class="hljs-built_in">this</span>.code = code;<br>      <span class="hljs-built_in">this</span>.description = description;<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="封装全局自定义异常-无描述"><a href="#封装全局自定义异常-无描述" class="headerlink" title="封装全局自定义异常(无描述)"></a>封装全局自定义异常(无描述)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 封装全局自定义异常(无描述)</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> errorCode 自定义异常态</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessException</span><span class="hljs-params">(ErrorCode errorCode)</span> &#123;<br>      <span class="hljs-built_in">super</span>(errorCode.getMessage());<br>      <span class="hljs-built_in">this</span>.code = errorCode.getCode();<br>      <span class="hljs-built_in">this</span>.description = errorCode.getDescription();<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="封装全局自定义异常-有描述"><a href="#封装全局自定义异常-有描述" class="headerlink" title="封装全局自定义异常(有描述)"></a>封装全局自定义异常(有描述)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 封装全局自定义异常(有描述)</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> errorCode   自定义异常态</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> description 异常描述</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessException</span><span class="hljs-params">(ErrorCode errorCode, String description)</span> &#123;<br>     <span class="hljs-built_in">super</span>(errorCode.getMessage());<br>     <span class="hljs-built_in">this</span>.code = errorCode.getCode();<br>     <span class="hljs-built_in">this</span>.description = description;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="补充-封装全局自定义异常信息-ErrorCode-枚举类"><a href="#补充-封装全局自定义异常信息-ErrorCode-枚举类" class="headerlink" title="补充: 封装全局自定义异常信息 ErrorCode (枚举类)"></a>补充: 封装全局自定义异常信息 ErrorCode (枚举类)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ErrorCode</span> &#123;<br>..............<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="枚举值-需持续完善更新"><a href="#枚举值-需持续完善更新" class="headerlink" title="枚举值 (需持续完善更新)"></a>枚举值 (需持续完善更新)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">PARMS_ERROR(<span class="hljs-number">40000</span>, <span class="hljs-string">&quot;请求参数错误&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>NULL_ERROR(<span class="hljs-number">40001</span>, <span class="hljs-string">&quot;请求数据为空&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>UPDATE_ERROR(<span class="hljs-number">40002</span>, <span class="hljs-string">&quot;操作数据库失败&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>NOT_LOGIN(<span class="hljs-number">40003</span>, <span class="hljs-string">&quot;未登录&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>NOT_REGISTER(<span class="hljs-number">40004</span>, <span class="hljs-string">&quot;未注册&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>NO_AUTH(<span class="hljs-number">40005</span>, <span class="hljs-string">&quot;无权限&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>SYSTEM_ERROR(<span class="hljs-number">10000</span>, <span class="hljs-string">&quot;系统内部异常&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><h5 id="成员属性"><a href="#成员属性" class="headerlink" title="成员属性"></a>成员属性</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 状态码</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> code;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 状态码信息</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String message;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 状态码描述</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String description;<br></code></pre></td></tr></table></figure><ul><li><h5 id="构造器和-getter-方法"><a href="#构造器和-getter-方法" class="headerlink" title="构造器和 getter 方法"></a>构造器和 getter 方法</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> code        状态码</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message     信息</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> description 描述</span><br><span class="hljs-comment">   */</span><br>  ErrorCode(<span class="hljs-type">int</span> code, String message, String description) &#123;<br>      <span class="hljs-built_in">this</span>.code = code;<br>      <span class="hljs-built_in">this</span>.message = message;<br>      <span class="hljs-built_in">this</span>.description = description;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> code;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> message;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> description;<br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="自定义异常-getter-方法"><a href="#自定义异常-getter-方法" class="headerlink" title="自定义异常 getter 方法"></a>自定义异常 getter 方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br>    <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;    <br></code></pre></td></tr></table></figure><h2 id="封装全局异常处理器"><a href="#封装全局异常处理器" class="headerlink" title="封装全局异常处理器"></a>封装全局异常处理器</h2><h5 id=""><a href="#" class="headerlink" title=""></a><!--熟悉全局异常处理器的写法和实现过程, 了解其实现原理--></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>....................<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="捕获自定义异常对象"><a href="#捕获自定义异常对象" class="headerlink" title="捕获自定义异常对象"></a>捕获自定义异常对象</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 捕获自定义异常对象</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> e 自定义异常</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> 封装返回执行失败异常信息</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@ExceptionHandler(BusinessException.class)</span><br>   <span class="hljs-keyword">public</span> BaseResponse <span class="hljs-title function_">locallyCustomException</span><span class="hljs-params">(BusinessException e)</span> &#123;<br>       log.error(<span class="hljs-string">&quot;businessException: &quot;</span> + e.getMessage(), e);<br>       log.info(<span class="hljs-string">&quot;&quot;</span> + e.getCode());<br>       log.info(e.getMessage());<br>       log.info(e.getDescription());<br>       <span class="hljs-keyword">return</span> ResultUtils.error(e.getCode(), e.getMessage(), e.getDescription());<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="捕获其他异常"><a href="#捕获其他异常" class="headerlink" title="捕获其他异常"></a>捕获其他异常</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 捕获其他异常</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> e 其他异常</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> 封装返回请求失败异常信息</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@ExceptionHandler(RuntimeException.class)</span><br>   <span class="hljs-keyword">public</span> BaseResponse <span class="hljs-title function_">globalCustomException</span><span class="hljs-params">(Exception e)</span> &#123;<br>       log.error(<span class="hljs-string">&quot;runtimeException&quot;</span>, e);<br>       <span class="hljs-keyword">return</span> ResultUtils.error(ErrorCode.SYSTEM_ERROR);<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="修改后端返回给前端的数据-全部更新为直接返回通用对象-成功状态-或抛出业务异常再由全局异常处理器返回通用对象-失败状态"><a href="#修改后端返回给前端的数据-全部更新为直接返回通用对象-成功状态-或抛出业务异常再由全局异常处理器返回通用对象-失败状态" class="headerlink" title="修改后端返回给前端的数据, 全部更新为直接返回通用对象(成功状态)或抛出业务异常再由全局异常处理器返回通用对象(失败状态)"></a>修改后端返回给前端的数据, 全部更新为直接返回通用对象(成功状态)或抛出业务异常再由全局异常处理器返回通用对象(失败状态)</h2><ul><li><h5 id="成功状态-controller层"><a href="#成功状态-controller层" class="headerlink" title="成功状态 (controller层)"></a>成功状态 (controller层)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户注册</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userRegisterRequest 注册信息封装类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> id</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;Long&gt; <span class="hljs-title function_">userRegister</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserRegisterRequest userRegisterRequest)</span> &#123;<br>    ......................<br>    <span class="hljs-keyword">return</span> ResultUtils.success(userRegister);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户登录</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userLoginRequest 登录信息封装</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request          request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> User</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;User&gt; <span class="hljs-title function_">userLogin</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserLoginRequest userLoginRequest, HttpServletRequest request)</span> &#123;<br>        .........................<br>        <span class="hljs-keyword">return</span> ResultUtils.success(userLogin);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户登录</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> int</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/logout&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;String&gt; <span class="hljs-title function_">userLogout</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        ..........................<br>        <span class="hljs-keyword">return</span> ResultUtils.success(userLogout);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取当前用户登录态</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 当前用户信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/currentUser&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;User&gt; <span class="hljs-title function_">getCurrentUser</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        ............................<br>        <span class="hljs-keyword">return</span> ResultUtils.success(user);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询用户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查到的用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/search&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;List&lt;User&gt;&gt; <span class="hljs-title function_">userSearch</span><span class="hljs-params">(String username, HttpServletRequest request)</span> &#123;<br>        .............................<br>        <span class="hljs-keyword">return</span> ResultUtils.success(users);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除用户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 用户id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true/false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/delete&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="hljs-title function_">userDelete</span><span class="hljs-params">(Long id, HttpServletRequest request)</span> &#123;<br>        ..............................<br>        <span class="hljs-keyword">return</span> ResultUtils.success(removeById);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (StringUtils.isAnyBlank(userAccount, userPassword, checkPassword, planetCode))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(PARMS_ERROR);<br></code></pre></td></tr></table></figure><h5 id="失败状态"><a href="#失败状态" class="headerlink" title="失败状态"></a>失败状态</h5><ul><li><h5 id="controller层-register-login-logout-currentUser-search-delete-下的controller参数校验"><a href="#controller层-register-login-logout-currentUser-search-delete-下的controller参数校验" class="headerlink" title="controller层    register    login    logout    currentUser    search    delete 下的controller参数校验"></a>controller层    register    login    logout    currentUser    search    delete 下的controller参数校验</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (StringUtils.isAnyBlank(userAccount, userPassword, checkPassword, planetCode))<br>       <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(PARMS_ERROR);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (StringUtils.isAnyBlank(userAccount, userPassword))<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(PARMS_ERROR);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (request == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(PARMS_ERROR);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (currentUser == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(PARMS_ERROR);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!isAdmin(request))<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(NO_AUTH);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!isAdmin(request))<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(NO_AUTH);<br><span class="hljs-keyword">if</span> (id &lt;= <span class="hljs-number">0</span>)<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(PARMS_ERROR);<br></code></pre></td></tr></table></figure><ul><li><h5 id="service层-register-下的参数校验"><a href="#service层-register-下的参数校验" class="headerlink" title="service层    register 下的参数校验"></a>service层    register 下的参数校验</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.1.账户, 密码, 二次密码不能为空</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isAnyBlank(userAccount, userPassword, checkPassword))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(PARMS_ERROR);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.2.账户不小于4位</span><br>        <span class="hljs-keyword">if</span> (userAccount.length() &lt; <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;账户不符合要求&quot;</span>, <span class="hljs-number">50000</span>, <span class="hljs-string">&quot;账户小于4位&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.3.账户不包含特殊字符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.*[\\s`~!@#$%^&amp;*()+=|&#123;&#125;&#x27;:;&#x27;,\\[\\].&lt;&gt;/?~！@#￥%……&amp;*（）——+|&#123;&#125;【】‘；：”“’。，、？\\\\]+.*&quot;</span>;<br>        <span class="hljs-keyword">if</span> (Pattern.matches(pattern, userAccount))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;账户不符合要求&quot;</span>, <span class="hljs-number">50001</span>, <span class="hljs-string">&quot;账户包含特殊字符&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.4.用户密码不小于8位</span><br>        <span class="hljs-keyword">if</span> (userPassword.length() &lt; <span class="hljs-number">8</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;密码不符合要求&quot;</span>, <span class="hljs-number">60000</span>, <span class="hljs-string">&quot;用户密码小于8位&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.5.二次密码与密码相同</span><br>        <span class="hljs-keyword">if</span> (!userPassword.equals(checkPassword))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;二次密码不符合要求&quot;</span>, <span class="hljs-number">60001</span>, <span class="hljs-string">&quot;二次密码与密码不相同&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.6.星球编号不能超过5位</span><br>        <span class="hljs-keyword">if</span> (planetCode.length() &gt; <span class="hljs-number">5</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;星球编号不符合要求&quot;</span>, <span class="hljs-number">60002</span>, <span class="hljs-string">&quot;星球编号超过5位&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.7.账户不能重复</span><br>        QueryWrapper&lt;User&gt; ua_lqw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;(); <span class="hljs-comment">// LambdaQueryWrapper&lt;User&gt; userLambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br>        ua_lqw.eq(<span class="hljs-string">&quot;user_account&quot;</span>, userAccount); <span class="hljs-comment">// userLambdaQueryWrapper.eq(User::getUserAccount, userAccount);</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">ua_count</span> <span class="hljs-operator">=</span> userMapper.selectCount(ua_lqw);   <span class="hljs-comment">// long count = this.count(lqw);</span><br>        <span class="hljs-keyword">if</span> (ua_count &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;账户不符合要求&quot;</span>, <span class="hljs-number">50002</span>, <span class="hljs-string">&quot;账户重复&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.8.星球编号不能重复</span><br>        QueryWrapper&lt;User&gt; pc_lqw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        pc_lqw.eq(<span class="hljs-string">&quot;planet_code&quot;</span>, planetCode);<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">pc_count</span> <span class="hljs-operator">=</span> userMapper.selectCount(pc_lqw);<br>        <span class="hljs-keyword">if</span> (pc_count &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;星球编号不符合要求&quot;</span>, <span class="hljs-number">60003</span>, <span class="hljs-string">&quot;星球编号重复&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><h5 id="service层-login下的参数校验"><a href="#service层-login下的参数校验" class="headerlink" title="service层    login下的参数校验"></a>service层    login下的参数校验</h5></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 1.1.账户, 密码不能为空</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>)</span>)<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">BusinessException(PARMS_ERROR)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.2.账户不小于4位</span><br>        <span class="hljs-keyword">if</span> (userAccount.length() &lt; <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;账户不符合要求&quot;</span>, <span class="hljs-number">50000</span>, <span class="hljs-string">&quot;账户小于4位&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.3.用户密码不小于8位</span><br>        <span class="hljs-keyword">if</span> (userPassword.length() &lt; <span class="hljs-number">8</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;密码不符合要求&quot;</span>, <span class="hljs-number">60000</span>, <span class="hljs-string">&quot;用户密码小于8位&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.4.账户不包含特殊字符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.*[\\s`~!@#$%^&amp;*()+=|&#123;&#125;&#x27;:;&#x27;,\\[\\].&lt;&gt;/?~！@#￥%……&amp;*（）——+|&#123;&#125;【】‘；：”“’。，、？\\\\]+.*&quot;</span>;<br>        <span class="hljs-keyword">if</span> (Pattern.matches(pattern, userAccount))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;账户不符合要求&quot;</span>, <span class="hljs-number">50001</span>, <span class="hljs-string">&quot;账户包含特殊字符&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><h5 id="service层-logout下的返回信息"><a href="#service层-logout下的返回信息" class="headerlink" title="service层    logout下的返回信息"></a>service层    logout下的返回信息</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">request.getSession().removeAttribute(USER_LOGIN_STATE);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;注销成功&quot;</span>;<br></code></pre></td></tr></table></figure><h5 id="自定义异常并由全局异常处理器成功处理-功能基本完成"><a href="#自定义异常并由全局异常处理器成功处理-功能基本完成" class="headerlink" title="自定义异常并由全局异常处理器成功处理, 功能基本完成"></a>自定义异常并由全局异常处理器成功处理, 功能基本完成</h5><h2 id="前端适配后端的通用返回对象"><a href="#前端适配后端的通用返回对象" class="headerlink" title="前端适配后端的通用返回对象"></a>前端适配后端的通用返回对象</h2><ul><li><h5 id="前端定义通用返回对象-services-ant-design-pro-typings-d-ts"><a href="#前端定义通用返回对象-services-ant-design-pro-typings-d-ts" class="headerlink" title="前端定义通用返回对象(services/ant-design-pro/typings.d.ts)"></a>前端定义通用返回对象(services/ant-design-pro/typings.d.ts)</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通用返回类</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">type</span> <span class="hljs-title class_">BaseResponse</span>&lt;T&gt; = &#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-built_in">number</span>,<br>    <span class="hljs-attr">data</span>: T,<br>    <span class="hljs-attr">message</span>: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">description</span>: <span class="hljs-built_in">string</span><br>  &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="封装各接口响应类型-services-ant-design-pro-api-ts"><a href="#封装各接口响应类型-services-ant-design-pro-api-ts" class="headerlink" title="封装各接口响应类型(services/ant-design-pro/api.ts)"></a>封装各接口响应类型(services/ant-design-pro/api.ts)</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">return</span> request&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">BaseResponse</span>&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">CurrentUser</span>&gt;&gt;(<span class="hljs-string">&#x27;/api/user/currentUser&#x27;</span>, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  ...(options || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">return</span> request&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">BaseResponse</span>&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">CurrentUser</span>&gt;&gt;(<span class="hljs-string">&#x27;/api/user/logout&#x27;</span>, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  ...(options || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">return</span> request&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">BaseResponse</span>&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">CurrentUser</span>&gt;&gt;(<span class="hljs-string">&#x27;/api/user/login&#x27;</span>, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  <span class="hljs-attr">headers</span>: &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">data</span>: body,<br>  ...(options || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">return</span> request&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">BaseResponse</span>&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">CurrentUser</span>&gt;&gt;(<span class="hljs-string">&#x27;/api/user/register&#x27;</span>, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  <span class="hljs-attr">headers</span>: &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">data</span>: body,<br>  ...(options || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">return</span> request&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">BaseResponse</span>&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">CurrentUser</span>&gt;&gt;(<span class="hljs-string">&#x27;/api/user/search&#x27;</span>, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  ...(options || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><h5 id="修改登录-注册成功的校验逻辑"><a href="#修改登录-注册成功的校验逻辑" class="headerlink" title="修改登录/注册成功的校验逻辑"></a>修改登录/注册成功的校验逻辑</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 登录</span><br><span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-title function_">login</span>(&#123;<br>  ...values,<br>  <span class="hljs-keyword">type</span>,<br>&#125;);<br><span class="hljs-comment">// 登录成功</span><br><span class="hljs-keyword">if</span> (data) &#123;<br>  <span class="hljs-keyword">const</span> defaultLoginSuccessMessage = <span class="hljs-string">&#x27;登录成功！&#x27;</span>;<br>  ................<br> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 注册</span><br><span class="hljs-comment">// 返回id</span><br><span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-title function_">register</span>(&#123;<br>  ...values,<br>  <span class="hljs-keyword">type</span>,<br>&#125;);<br><span class="hljs-comment">// 注册成功</span><br><span class="hljs-keyword">if</span> (data) &#123;<br>  <span class="hljs-keyword">const</span> defaultLoginSuccessMessage = <span class="hljs-string">&#x27;注册成功！&#x27;</span>;<br>  ....................<br> &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="这边还要记得修改两个地方"><a href="#这边还要记得修改两个地方" class="headerlink" title="这边还要记得修改两个地方:"></a>这边还要记得修改两个地方:</h5></li></ul><h6 id="修改管理员权限的校验-解决了无法正确访问到管理员页面的问题"><a href="#修改管理员权限的校验-解决了无法正确访问到管理员页面的问题" class="headerlink" title="修改管理员权限的校验 - 解决了无法正确访问到管理员页面的问题"></a>修改管理员权限的校验 - 解决了无法正确访问到管理员页面的问题</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">access</span>(<span class="hljs-params">initialState: &#123; baseResponse?: API.BaseResponse&lt;API.CurrentUser&gt; &#125; | <span class="hljs-literal">undefined</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; baseResponse &#125; = initialState ?? &#123;&#125;;<br>  <span class="hljs-comment">// 权限校验</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-comment">// 校验管理员权限</span><br>    <span class="hljs-attr">canAdmin</span>: baseResponse &amp;&amp; baseResponse.<span class="hljs-property">data</span>.<span class="hljs-property">userRole</span> === <span class="hljs-number">1</span>,<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="修改查询在线用户信息-解决了在线用户信息页面无法正常显示的问题"><a href="#修改查询在线用户信息-解决了在线用户信息页面无法正常显示的问题" class="headerlink" title="修改查询在线用户信息 - 解决了在线用户信息页面无法正常显示的问题"></a>修改查询在线用户信息 - 解决了在线用户信息页面无法正常显示的问题</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">columns</span>: <span class="hljs-title class_">ProColumns</span>&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">BaseResponse</span>&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">CurrentUser</span>&gt;&gt;[] = [<br>...............<br>]<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;<span class="hljs-title class_">ProTable</span>&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">BaseResponse</span>&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">CurrentUser</span>&gt;&gt;<br>  columns=&#123;columns&#125;<br>  ............<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"> <span class="hljs-comment">// 弹出异常信息</span><br>    message.<span class="hljs-title function_">error</span>(res.<span class="hljs-property">message</span>)<br>    <span class="hljs-comment">// 弹出异常描述</span><br>    message.<span class="hljs-title function_">error</span>(res.<span class="hljs-property">description</span>)<br>    <span class="hljs-comment">// 跳转至登录页</span><br>    history.<span class="hljs-title function_">replace</span>(&#123;<br>      <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;user/login&#x27;</span>,<br>      <span class="hljs-attr">search</span>: <span class="hljs-title function_">stringify</span>(&#123;<br>        <span class="hljs-attr">redirect</span>: location.<span class="hljs-property">pathname</span>,<br>      &#125;),<br>    &#125;);request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;, sort, filter) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sort, filter);<br>  <span class="hljs-comment">// 返回userList</span><br>  <span class="hljs-keyword">const</span> baseResponse = <span class="hljs-keyword">await</span> <span class="hljs-title function_">searchUsers</span>();<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">data</span>: baseResponse,<br>  &#125;<br>&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="前端封装全局请求-响应拦截器"><a href="#前端封装全局请求-响应拦截器" class="headerlink" title="前端封装全局请求/响应拦截器"></a>前端封装全局请求/响应拦截器</h2><h5 id="umi其实已经给我们封装好了request了-目录-src-umi-plugin-request-request-ts-在这里我们也可以在该目录下自定义全局请求-响应拦截器-但是一方面破坏了封装组件的完整性-不好直接修改封装好的组件-我们的想法是定义自己的requert来封装axios-再自定义全局请求-响应拦截器"><a href="#umi其实已经给我们封装好了request了-目录-src-umi-plugin-request-request-ts-在这里我们也可以在该目录下自定义全局请求-响应拦截器-但是一方面破坏了封装组件的完整性-不好直接修改封装好的组件-我们的想法是定义自己的requert来封装axios-再自定义全局请求-响应拦截器" class="headerlink" title="umi其实已经给我们封装好了request了(目录:src/.umi/plugin-request/request.ts), 在这里我们也可以在该目录下自定义全局请求/响应拦截器, 但是一方面破坏了封装组件的完整性, 不好直接修改封装好的组件. 我们的想法是定义自己的requert来封装axios, 再自定义全局请求/响应拦截器"></a>umi其实已经给我们封装好了request了(目录:src/.umi/plugin-request/request.ts), 在这里我们也可以在该目录下自定义全局请求/响应拦截器, 但是一方面破坏了封装组件的完整性, 不好直接修改封装好的组件. 我们的想法是定义自己的requert来封装axios, 再自定义全局请求/响应拦截器</h5><h5 id="新建目录-src-plugins-globalRequest-ts"><a href="#新建目录-src-plugins-globalRequest-ts" class="headerlink" title="新建目录: src/plugins/globalRequest.ts"></a>新建目录: src/plugins/globalRequest.ts</h5><h5 id="在该目录下我们封装自己的request"><a href="#在该目录下我们封装自己的request" class="headerlink" title="在该目录下我们封装自己的request"></a>在该目录下我们封装自己的request</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;extend&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi-request&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;message&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;history&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;stringify&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;querystring&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 配置request请求时的默认参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> request = <span class="hljs-title function_">extend</span>(&#123;<br>  <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-comment">// 默认请求是否带上cookie</span><br>  <span class="hljs-comment">// requestType: &#x27;form&#x27;,</span><br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 全局请求拦截器</span><br><span class="hljs-comment"> */</span><br>request.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>((url, options): <span class="hljs-function"><span class="hljs-params">any</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`do request url = <span class="hljs-subst">$&#123;url&#125;</span>`</span>)<br>  <span class="hljs-keyword">return</span> &#123;<br>    url,<br>    <span class="hljs-attr">options</span>: &#123;<br>      ...options,<br>      <span class="hljs-attr">headers</span>: &#123;&#125;,<br>    &#125;,<br>  &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 全局响应拦截器</span><br><span class="hljs-comment"> */</span><br>request.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (response, options): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt; =&gt; &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">clone</span>().<span class="hljs-title function_">json</span>();<br>  <span class="hljs-comment">// 1.返回成功状态</span><br>  <span class="hljs-keyword">if</span> (res.<span class="hljs-property">code</span> === <span class="hljs-number">0</span> &amp;&amp; res.<span class="hljs-property">data</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">message</span>);<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-property">data</span>;<br>  &#125;<br>  <span class="hljs-comment">// 2.返回失败状态</span><br>  <span class="hljs-keyword">if</span> (res.<span class="hljs-property">code</span> === <span class="hljs-number">50001</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;...&quot;</span>)<br>    <span class="hljs-comment">// 弹出异常信息</span><br>    message.<span class="hljs-title function_">error</span>(res.<span class="hljs-property">message</span>)<br>    <span class="hljs-comment">// 弹出异常描述</span><br>    <span class="hljs-comment">// message.error(res.description)</span><br>    <span class="hljs-comment">// 跳转至登录页</span><br>    history.<span class="hljs-title function_">replace</span>(&#123;<br>      <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;user/login&#x27;</span>,<br>      <span class="hljs-attr">search</span>: <span class="hljs-title function_">stringify</span>(&#123;<br>        <span class="hljs-attr">redirect</span>: location.<span class="hljs-property">pathname</span>,<br>      &#125;),<br>    &#125;);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;code: &quot;</span> + res.<span class="hljs-property">code</span>)<br>  &#125;<br>  <br>  <span class="hljs-keyword">return</span> res.<span class="hljs-property">data</span>;<br><br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="最后不要忘了-在src-services-ant-design-pro-api-ts目录下引入我们自己实现的request-覆盖掉umi封装的request"><a href="#最后不要忘了-在src-services-ant-design-pro-api-ts目录下引入我们自己实现的request-覆盖掉umi封装的request" class="headerlink" title="最后不要忘了, 在src/services/ant-design-pro/api.ts目录下引入我们自己实现的request, 覆盖掉umi封装的request"></a>最后不要忘了, 在src/services/ant-design-pro/api.ts目录下引入我们自己实现的request, 覆盖掉umi封装的request</h5><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/plugins/globalRequest&#x27;</span>;<br></code></pre></td></tr></table></figure><h5 id="我们实现了自定义的前端全局请求-响应拦截器"><a href="#我们实现了自定义的前端全局请求-响应拦截器" class="headerlink" title="我们实现了自定义的前端全局请求/响应拦截器"></a>我们实现了自定义的前端全局请求/响应拦截器</h5><h1 id="至此-用户中心系统基本功能已经完成"><a href="#至此-用户中心系统基本功能已经完成" class="headerlink" title="至此, 用户中心系统基本功能已经完成"></a>至此, 用户中心系统基本功能已经完成</h1><h4 id="未来的持续优化"><a href="#未来的持续优化" class="headerlink" title="未来的持续优化:"></a>未来的持续优化:</h4><ul><li><p>完善框架搭建和数据库设计的文档编写</p></li><li><p>注册的新用户会有默认的头像和昵称</p></li><li><p>用户登录后可以更改个人信息</p></li><li><p>完善前端全局异常处理器所处理的异常类型</p></li><li><p>项目的部署和上线</p></li></ul><h5 id="废话不多说-开启-伙伴匹配系统-的学习"><a href="#废话不多说-开启-伙伴匹配系统-的学习" class="headerlink" title="废话不多说, 开启 伙伴匹配系统 的学习"></a>废话不多说, 开启 伙伴匹配系统 的学习</h5>]]></content>
    
    
    <categories>
      
      <category>project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
      <tag>开发经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基础</title>
    <link href="/blog/2023/03/17/Git%E5%9F%BA%E7%A1%80/"/>
    <url>/blog/2023/03/17/Git%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-是一个分布式版本控制工具，提供代码托管服务"><a href="#Git-是一个分布式版本控制工具，提供代码托管服务" class="headerlink" title="Git 是一个分布式版本控制工具，提供代码托管服务"></a>Git 是一个分布式版本控制工具，提供代码托管服务</h1><h2 id="1、基础知识：工作区、版本库、暂存区"><a href="#1、基础知识：工作区、版本库、暂存区" class="headerlink" title="1、基础知识：工作区、版本库、暂存区"></a>1、基础知识：工作区、版本库、暂存区</h2><h5 id="（1）工作区：包含-git-隐藏文件夹的目录，也称为工作目录，用于存放开发的代码"><a href="#（1）工作区：包含-git-隐藏文件夹的目录，也称为工作目录，用于存放开发的代码" class="headerlink" title="（1）工作区：包含.git 隐藏文件夹的目录，也称为工作目录，用于存放开发的代码"></a>（1）工作区：包含.git 隐藏文件夹的目录，也称为工作目录，用于存放开发的代码</h5><h5 id="（2）版本库：-git-隐藏文件夹，储存配置信息、日志信息和文件版本信息等"><a href="#（2）版本库：-git-隐藏文件夹，储存配置信息、日志信息和文件版本信息等" class="headerlink" title="（2）版本库：.git 隐藏文件夹，储存配置信息、日志信息和文件版本信息等"></a>（2）版本库：.git 隐藏文件夹，储存配置信息、日志信息和文件版本信息等</h5><h5 id="（3）暂存区：-git-隐藏文件夹中的一个-index-文件，也可叫做-stage，用来临时保存修改文件"><a href="#（3）暂存区：-git-隐藏文件夹中的一个-index-文件，也可叫做-stage，用来临时保存修改文件" class="headerlink" title="（3）暂存区：.git 隐藏文件夹中的一个 index 文件，也可叫做 stage，用来临时保存修改文件"></a>（3）暂存区：.git 隐藏文件夹中的一个 index 文件，也可叫做 stage，用来临时保存修改文件</h5><p>####工作区中文件的状态</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">（1）untracked 未跟踪（未被纳入版本控制）<br>（2）tracked 已跟踪（被纳入版本控制）<br>1）Unmodified 未修改状态<br>2）Modified 已修改状态<br>3）Staged 已暂存状态<br></code></pre></td></tr></table></figure><h2 id="2、常用命令："><a href="#2、常用命令：" class="headerlink" title="2、常用命令："></a>2、常用命令：</h2><h5 id="（1）全局设置："><a href="#（1）全局设置：" class="headerlink" title="（1）全局设置："></a>（1）全局设置：</h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.name 【用户名】</span><br>git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.email 【用户邮箱】</span><br></code></pre></td></tr></table></figure><h5 id="（2）获取-Git-仓库："><a href="#（2）获取-Git-仓库：" class="headerlink" title="（2）获取 Git 仓库："></a>（2）获取 Git 仓库：</h5><p> 在本地初始化一个仓库：git init<br>​ 从远处仓库克隆：git clone 【仓库地址(URL)】</p><h5 id="（3）本地仓库-工作区-常用命令："><a href="#（3）本地仓库-工作区-常用命令：" class="headerlink" title="（3）本地仓库(工作区)常用命令："></a>（3）本地仓库(工作区)常用命令：</h5><ul><li>查看工作区内的文件状态（是否纳入版本控制？已纳入的是否修改？修改后的是否暂存？）</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure><ul><li>将文件的修改加入暂存区</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> 【文件名】<br></code></pre></td></tr></table></figure><ul><li>将暂存区的文件取消暂存或者切换到指定版本 2</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">reset</span>【版本号】<br></code></pre></td></tr></table></figure><ul><li>将暂存区的文件提交修改到版本库</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m 【修改信息】【文件名】<br></code></pre></td></tr></table></figure><ul><li>查看日志，查看提交记录，方便回溯到指定版本</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><h5 id="（4）远程仓库-工作区-常用命令："><a href="#（4）远程仓库-工作区-常用命令：" class="headerlink" title="（4）远程仓库(工作区)常用命令："></a>（4）远程仓库(工作区)常用命令：</h5><ul><li>查看远程仓库：查看仓库名、仓库地址(URL)</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></figure><ul><li>将本地仓库与远程仓库连接起来</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git remote <span class="hljs-built_in">add</span> 【仓库名】【仓库地址】<br>git remote <span class="hljs-built_in">add</span> origin【仓库地址(URL)】<br></code></pre></td></tr></table></figure><ul><li>从远程仓库克隆</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">【仓库地址(URL</span>)】<br></code></pre></td></tr></table></figure><ul><li>从远程仓库拉取</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git pull 【仓库名】【仓库分支】<br>git pull origin <span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure><ul><li>将工作区内的文件推送/上传到远程仓库的分支上（文件一定是成功提交到版本库中的，才能推送至远程仓库）</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span>【仓库名】【仓库分支】<br>git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><h5 id="（5）分支操作"><a href="#（5）分支操作" class="headerlink" title="（5）分支操作"></a>（5）分支操作</h5><ul><li>列出所有本地分支</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch</span><br></code></pre></td></tr></table></figure><ul><li>列出所有远程分支</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch -r</span><br></code></pre></td></tr></table></figure><ul><li>列出所有本地分支和远程分支</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><ul><li>在本地创建分支</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">branch </span>【分支名】<br></code></pre></td></tr></table></figure><ul><li>切换本地分支</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> checkout 【分支名】<br></code></pre></td></tr></table></figure><ul><li>将该本地分支推送至远程分支</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git <span class="hljs-built_in">push</span> 【仓库名】【分支名】<br></code></pre></td></tr></table></figure><ul><li>在该分支下，合并指定分支</li></ul><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> 【分支名】<br></code></pre></td></tr></table></figure><h5 id="（6）标签操作"><a href="#（6）标签操作" class="headerlink" title="（6）标签操作"></a>（6）标签操作</h5><ul><li>列出已有标签</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span><br></code></pre></td></tr></table></figure><ul><li>创建标签</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">【标签名】</span><br></code></pre></td></tr></table></figure><ul><li>将标签推送至远程仓库</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git <span class="hljs-built_in">push</span> 【仓库名】【标签名】<br></code></pre></td></tr></table></figure><ul><li>检出标签</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> 【分支名】【标签名】<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a><!--分支：开发隔离 ，标签：分支下的版本控制--></h3><h2 id="合并冲突问题"><a href="#合并冲突问题" class="headerlink" title="合并冲突问题"></a><strong><em>合并冲突问题</em></strong></h2><ul><li>如果执行推送时出现</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">! [rejected] master -&gt; master (fetch <span class="hljs-built_in">first</span>) <span class="hljs-built_in">error</span>: fail to <span class="hljs-built_in">push</span> <span class="hljs-built_in">some</span> refs<br></code></pre></td></tr></table></figure><ul><li>在执行推送前执行</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git pull <span class="hljs-comment">--rebase origin master</span><br></code></pre></td></tr></table></figure><ul><li><p>将 README.md 拉到本地以解决此问题</p></li><li><p>如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库中拉取文件的时候会报错</p></li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">（fatal：refusing <span class="hljs-built_in">to</span> <span class="hljs-built_in">merge</span> unrelated histories）<br></code></pre></td></tr></table></figure><ul><li>如此拉取：</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git pull origin <span class="hljs-keyword">master</span> <span class="hljs-title">--allow-unrelated-histories</span><br></code></pre></td></tr></table></figure><ul><li>以解决此问题</li></ul><h2 id="2023-04-13-17-57"><a href="#2023-04-13-17-57" class="headerlink" title="2023 04.13 17:57"></a>2023 04.13 17:57</h2><p>今天可算抽出时间，把用户中心-伙伴匹配系统的后端代码托管到gitte仓库上了，那就浅浅总结一下最简单无脑的一条龙推送流程吧：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git remote <span class="hljs-built_in">remove</span> <span class="hljs-built_in">origin</span><br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git remote <span class="hljs-keyword">add </span><span class="hljs-keyword">origin </span>【仓库地址】<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> .<br></code></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">git commit -m <span class="hljs-string">&quot;提交信息&quot;</span> .<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git pull origin <span class="hljs-keyword">master</span> <span class="hljs-title">/ git</span> pull origin <span class="hljs-keyword">master</span> <span class="hljs-title">--allow-unrelated-histories</span><br></code></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test2</title>
    <link href="/blog/2023/03/16/test2/"/>
    <url>/blog/2023/03/16/test2/</url>
    
    <content type="html"><![CDATA[<p>hhhhhhhh</p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试测试测试</title>
    <link href="/blog/2023/03/15/%E6%B5%8B%E8%AF%95%E6%B5%8B%E8%AF%95%E6%B5%8B%E8%AF%95/"/>
    <url>/blog/2023/03/15/%E6%B5%8B%E8%AF%95%E6%B5%8B%E8%AF%95%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blog/2023/03/07/hello-world/"/>
    <url>/blog/2023/03/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
