<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux常用命令</title>
    <link href="/blog/2023/03/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/blog/2023/03/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="通用格式"><a href="#通用格式" class="headerlink" title="通用格式"></a>通用格式</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">command <span class="hljs-selector-attr">[-options]</span> <span class="hljs-selector-attr">[parameter]</span><br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">command : 命令本身<br>-options : 选项[可选] <br>parameter : 参数[可选]<br></code></pre></td></tr></table></figure><h5 id="ls-列出目录"><a href="#ls-列出目录" class="headerlink" title="ls - 列出目录"></a>ls - 列出目录</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ls <span class="hljs-selector-attr">[-a -l -h]</span> <span class="hljs-selector-attr">[Linux路径]</span><br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">-a : 列出全部文件, 包含隐藏的文件/文件夹<br>-l : 纵向形式排列信息<br>-h : 列出文件大小, 与-<span class="hljs-type">l</span>配合使用<br></code></pre></td></tr></table></figure><h5 id="cd-切换工作目录-Change-Directory"><a href="#cd-切换工作目录-Change-Directory" class="headerlink" title="cd - 切换工作目录  (Change Directory)"></a>cd - 切换工作目录  (Change Directory)</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span><span class="hljs-meta"> [Linux路径]</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd   回到用户的HOME目录 <span class="hljs-regexp">/home/m</span>emory<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/ 回到根目录 /</span><br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">注:  / 表示根目录 <br>~/ 表示 <span class="hljs-string">/home/memory</span> <br>    <span class="hljs-string">./</span> 表示当前目录<br>    <span class="hljs-string">../</span> 表示上一级目录<br></code></pre></td></tr></table></figure><h5 id="pwd-查看当前工作目录-Print-Work-Directory"><a href="#pwd-查看当前工作目录-Print-Work-Directory" class="headerlink" title="pwd - 查看当前工作目录  (Print Work Directory)"></a>pwd - 查看当前工作目录  (Print Work Directory)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span> 无选项 无参数<br></code></pre></td></tr></table></figure><h5 id="mkdir-创建目录-Make-Directory"><a href="#mkdir-创建目录-Make-Directory" class="headerlink" title="mkdir - 创建目录  (Make Directory)"></a>mkdir - 创建目录  (Make Directory)</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir [-p] Linux路径<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">-p : 选填, 可创建多级目录<br>Linux路径 : 必填<br></code></pre></td></tr></table></figure><h4 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h4><ul><li><h5 id="touch-创建文件"><a href="#touch-创建文件" class="headerlink" title="touch - 创建文件"></a>touch - 创建文件</h5></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> Linux路径<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">无选项 参数必填 <br></code></pre></td></tr></table></figure><ul><li><h5 id="cat-查看文件内容"><a href="#cat-查看文件内容" class="headerlink" title="cat - 查看文件内容"></a>cat - 查看文件内容</h5></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> Linux路径<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">无选项 参数必填<br></code></pre></td></tr></table></figure><ul><li><h5 id="more-查看文件内容-可翻页查看-空格翻页-q退出"><a href="#more-查看文件内容-可翻页查看-空格翻页-q退出" class="headerlink" title="more - 查看文件内容  (可翻页查看, 空格翻页, q退出)"></a>more - 查看文件内容  (可翻页查看, 空格翻页, q退出)</h5></li></ul><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">more</span> Linux路径<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">无选项 参数必填<br></code></pre></td></tr></table></figure><ul><li><h5 id="cp-复制文件-文件夹-copy"><a href="#cp-复制文件-文件夹-copy" class="headerlink" title="cp - 复制文件/文件夹  (copy)"></a>cp - 复制文件/文件夹  (copy)</h5></li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">cp</span> [-r] 参数一 参数二<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">-r : 可选, 复制文件夹时使用<br>参数一 : <span class="hljs-type">Linux</span>路径, 表示被复制的文件或文件夹<br>参数二 : <span class="hljs-type">Linux</span>路径, 表示要复制去的地方<br></code></pre></td></tr></table></figure><h5 id="rm-删除文件-文件夹-remove"><a href="#rm-删除文件-文件夹-remove" class="headerlink" title="rm - 删除文件/文件夹  (remove)"></a>rm - 删除文件/文件夹  (remove)</h5><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">rm [-r -f] 参数一 参数二 ......<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">-r : 删除文件夹时使用<br>-f : 强制删除 (<span class="hljs-type">force</span>)<br>参数 : 要删除的文件/文件夹路径<br></code></pre></td></tr></table></figure><h5 id="mv-移动文件-文件夹-move"><a href="#mv-移动文件-文件夹-move" class="headerlink" title="mv - 移动文件/文件夹 (move)"></a>mv - 移动文件/文件夹 (move)</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">move 参数一 参数二<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">参数一 : <span class="hljs-type">Linux</span>路径, 表示被移动的文件或文件夹<br>参数二 : <span class="hljs-type">Linux</span>路径, 表示移动去的地方, <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
      <tag>经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL从入门到入土</title>
    <link href="/blog/2023/03/22/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <url>/blog/2023/03/22/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</url>
    
    <content type="html"><![CDATA[<p>注：本文整理自网友的优秀学习笔记，结合了自己的学习经验，可供日常学习参考和使用</p><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="通用语法及分类"><a href="#通用语法及分类" class="headerlink" title="通用语法及分类"></a>通用语法及分类</h2><ul><li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li><li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL: 数据查询语言，用来查询数据库中表的记录</li><li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li></ul><h3 id="DDL（数据定义语言）"><a href="#DDL（数据定义语言）" class="headerlink" title="DDL（数据定义语言）"></a>DDL（数据定义语言）</h3><p>数据定义语言</p><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li></ul><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p><p>创建表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE 表名(<br>字段1 字段1类型 [COMMENT 字段1注释],<br>字段2 字段2类型 [COMMENT 字段2注释],<br>字段3 字段3类型 [COMMENT 字段3注释],<br>...<br>字段n 字段n类型 [COMMENT 字段n注释]<br>)[ COMMENT 表注释 ];<br></code></pre></td></tr></table></figure><p><strong>最后一个字段后面没有逗号</strong></p><p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code></p><p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code></p><p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p><p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p><p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p><h3 id="DML（数据操作语言）"><a href="#DML（数据操作语言）" class="headerlink" title="DML（数据操作语言）"></a>DML（数据操作语言）</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p><p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>字符串和日期类型数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内</li></ul><h4 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p><p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p><h3 id="DQL（数据查询语言）"><a href="#DQL（数据查询语言）" class="headerlink" title="DQL（数据查询语言）"></a>DQL（数据查询语言）</h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>字段列表<br>FROM<br>表名字段<br>WHERE<br>条件列表<br>GROUP BY<br>分组字段列表<br>HAVING<br>分组后的条件列表<br>ORDER BY<br>排序字段列表<br>LIMIT<br>分页参数<br></code></pre></td></tr></table></figure><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p><p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p><p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p><p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code><br>/ 之后的_不作为通配符</p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p><p>条件：</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 &#124;&#124;</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 年龄等于30<br>select * from employee where age = 30;<br>-- 年龄小于30<br>select * from employee where age &lt; 30;<br>-- 小于等于<br>select * from employee where age &lt;= 30;<br>-- 没有身份证<br>select * from employee where idcard is null or idcard = &#x27;&#x27;;<br>-- 有身份证<br>select * from employee where idcard;<br>select * from employee where idcard is not null;<br>-- 不等于<br>select * from employee where age != 30;<br>-- 年龄在20到30之间<br>select * from employee where age between 20 and 30;<br>select * from employee where age &gt;= 20 and age &lt;= 30;<br>-- 下面语句不报错，但查不到任何信息<br>select * from employee where age between 30 and 20;<br>-- 性别为女且年龄小于30<br>select * from employee where age &lt; 30 and gender = &#x27;女&#x27;;<br>-- 年龄等于25或30或35<br>select * from employee where age = 25 or age = 30 or age = 35;<br>select * from employee where age in (25, 30, 35);<br>-- 姓名为两个字<br>select * from employee where name like &#x27;__&#x27;;<br>-- 身份证最后为X<br>select * from employee where idcard like &#x27;%X&#x27;;<br></code></pre></td></tr></table></figure><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p>常见聚合函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p><p>where 和 having 的区别：</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）<br>select count(*) from employee group by gender;<br>-- 根据性别分组，统计男性和女性数量<br>select gender, count(*) from employee group by gender;<br>-- 根据性别分组，统计男性和女性的平均年龄<br>select gender, avg(age) from employee group by gender;<br>-- 年龄小于45，并根据工作地址分组<br>select workaddress, count(*) from employee where age &lt; 45 group by workaddress;<br>-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址<br>select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;<br></code></pre></td></tr></table></figure><h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li></ul><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p><p>排序方式：</p><ul><li>ASC: 升序（默认）</li><li>DESC: 降序</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 根据年龄升序排序<br>SELECT * FROM employee ORDER BY age ASC;<br>SELECT * FROM employee ORDER BY age;<br>-- 两字段排序，根据年龄升序排序，入职时间降序排序<br>SELECT * FROM employee ORDER BY age ASC, entrydate DESC;<br></code></pre></td></tr></table></figure><h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询第一页数据，展示10条<br>SELECT * FROM employee LIMIT 0, 10;<br>-- 查询第二页<br>SELECT * FROM employee LIMIT 10, 10;<br></code></pre></td></tr></table></figure><h5 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li></ul><h4 id="DQL执行顺序"><a href="#DQL执行顺序" class="headerlink" title="DQL执行顺序"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>查询用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">USER mysql;<br>SELECT * FROM user;<br></code></pre></td></tr></table></figure><p>创建用户:<br><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p><p>修改用户密码：<br><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p><p>删除用户：<br><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建用户test，只能在当前主机localhost访问<br>create user &#x27;test&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;<br>-- 创建用户test，能在任意主机访问<br>create user &#x27;test&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;<br>create user &#x27;test&#x27; identified by &#x27;123456&#x27;;<br>-- 修改密码<br>alter user &#x27;test&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;1234&#x27;;<br>-- 删除用户<br>drop user &#x27;test&#x27;@&#x27;localhost&#x27;;<br></code></pre></td></tr></table></figure><h5 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>主机名可以使用 % 通配</li></ul><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>常用权限：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table><p>更多权限请看<a href="#%E6%9D%83%E9%99%90%E4%B8%80%E8%A7%88%E8%A1%A8" title="权限一览表">权限一览表</a></p><p>查询权限：<br><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p><h5 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多个权限用逗号分隔</li><li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>字符串函数</li><li>数值函数</li><li>日期函数</li><li>流程函数</li></ul><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串全部转为大写</td></tr><tr><td>LPAD(str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str, n, pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 拼接<br>SELECT CONCAT(&#x27;Hello&#x27;, &#x27;World&#x27;);<br>-- 小写<br>SELECT LOWER(&#x27;Hello&#x27;);<br>-- 大写<br>SELECT UPPER(&#x27;Hello&#x27;);<br>-- 左填充<br>SELECT LPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);<br>-- 右填充<br>SELECT RPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);<br>-- 去除空格<br>SELECT TRIM(&#x27; Hello World &#x27;);<br>-- 切片（起始索引为1）<br>SELECT SUBSTRING(&#x27;Hello World&#x27;, 1, 5);<br></code></pre></td></tr></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回x/y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数x的四舍五入值，保留y位小数</td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- DATE_ADD<br>SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);<br></code></pre></td></tr></table></figure><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果val1为true，返回res1，… 否则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select<br>name,<br>(case when age &gt; 30 then &#x27;中年&#x27; else &#x27;青年&#x27; end)<br>from employee;<br>select<br>name,<br>(case workaddress when &#x27;北京市&#x27; then &#x27;一线城市&#x27; when &#x27;上海市&#x27; then &#x27;一线城市&#x27; else &#x27;二线城市&#x27; end) as &#x27;工作地址&#x27;<br>from employee;<br></code></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>分类：</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.1版本后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><p>约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。</p><h3 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h3><table><thead><tr><th>约束条件</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>PRIMARY KEY</td></tr><tr><td>自动增长</td><td>AUTO_INCREMENT</td></tr><tr><td>不为空</td><td>NOT NULL</td></tr><tr><td>唯一</td><td>UNIQUE</td></tr><tr><td>逻辑条件</td><td>CHECK</td></tr><tr><td>默认值</td><td>DEFAULT</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table user(<br>id int primary key auto_increment,<br>name varchar(10) not null unique,<br>age int check(age &gt; 0 and age &lt; 120),<br>status char(1) default &#x27;1&#x27;,<br>gender char(1)<br>);<br></code></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>添加外键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE 表名(<br>字段名 字段类型,<br>...<br>[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)<br>);<br>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);<br><br>-- 例子<br>alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);<br></code></pre></td></tr></table></figure><p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p><h4 id="删除-更新行为"><a href="#删除-更新行为" class="headerlink" title="删除/更新行为"></a>删除/更新行为</h4><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）</td></tr><tr><td>RESTRICT</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）</td></tr><tr><td>CASCADE</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td></tr></tbody></table><p>更改删除/更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p><blockquote><p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p></blockquote><p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分</p><p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p><p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p><p>显式性能比隐式高</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询员工姓名，及关联的部门的名称<br>-- 隐式<br>select e.name, d.name from employee as e, dept as d where e.dept = d.id;<br>-- 显式<br>select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;<br></code></pre></td></tr></table></figure><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据</p><p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 左<br>select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;<br>select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样<br>-- 右<br>select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;<br></code></pre></td></tr></table></figure><p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</p><h3 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p><p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p><p>自连接查询，可以是内连接查询，也可以是外连接查询</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询员工及其所属领导的名字<br>select a.name, b.name from employee a, employee b where a.manager = b.id;<br>-- 没有领导的也查询出来<br>select a.name, b.name from employee a left join employee b on a.manager = b.id;<br></code></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong></p><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;=</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询销售部所有员工<br>select id from dept where name = &#x27;销售部&#x27;;<br>-- 根据销售部部门ID，查询员工信息<br>select * from employee where dept = 4;<br>-- 合并（子查询）<br>select * from employee where dept = (select id from dept where name = &#x27;销售部&#x27;);<br><br>-- 查询xxx入职之后的员工信息<br>select * from employee where entrydate &gt; (select entrydate from employee where name = &#x27;xxx&#x27;);<br></code></pre></td></tr></table></figure><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。</p><p>常用操作符：</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询销售部和市场部的所有员工信息<br>select * from employee where dept in (select id from dept where name = &#x27;销售部&#x27; or name = &#x27;市场部&#x27;);<br>-- 查询比财务部所有人工资都高的员工信息<br>select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &#x27;财务部&#x27;));<br>-- 查询比研发部任意一人工资高的员工信息<br>select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = &#x27;研发部&#x27;));<br></code></pre></td></tr></table></figure><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：=, &lt;, &gt;, IN, NOT IN</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询与xxx的薪资及直属领导相同的员工信息<br>select * from employee where (salary, manager) = (12500, 1);<br>select * from employee where (salary, manager) = (select salary, manager from employee where name = &#x27;xxx&#x27;);<br></code></pre></td></tr></table></figure><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询与xxx1，xxx2的职位和薪资相同的员工<br>select * from employee where (job, salary) in (select job, salary from employee where name = &#x27;xxx1&#x27; or name = &#x27;xxx2&#x27;);<br>-- 查询入职日期是2006-01-01之后的员工，及其部门信息<br>select e.*, d.* from (select * from employee where entrydate &gt; &#x27;2006-01-01&#x27;) as e left join dept as d on e.dept = d.id;<br></code></pre></td></tr></table></figure><h3 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询 union, union all"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 字段列表 FROM 表A ...<br>UNION [ALL]<br>SELECT 字段列表 FROM 表B ...<br></code></pre></td></tr></table></figure><h4 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>UNION ALL 会有重复结果，UNION 不会</li><li>联合查询比使用or效率高，不会使索引失效</li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 1. 查询张三账户余额<br>select * from account where name = &#x27;张三&#x27;;<br>-- 2. 将张三账户余额-1000<br>update account set money = money - 1000 where name = &#x27;张三&#x27;;<br>-- 此语句出错后张三钱减少但是李四钱没有增加<br>模拟sql语句错误<br>-- 3. 将李四账户余额+1000<br>update account set money = money + 1000 where name = &#x27;李四&#x27;;<br><br>-- 查看事务提交方式<br>SELECT @@AUTOCOMMIT;<br>-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效<br>SET @@AUTOCOMMIT = 0;<br>-- 提交事务<br>COMMIT;<br>-- 回滚事务<br>ROLLBACK;<br><br>-- 设置手动提交后上面代码改为：<br>select * from account where name = &#x27;张三&#x27;;<br>update account set money = money - 1000 where name = &#x27;张三&#x27;;<br>update account set money = money + 1000 where name = &#x27;李四&#x27;;<br>commit;<br></code></pre></td></tr></table></figure><p>操作方式二：</p><p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p><p>操作实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">start transaction;<br>select * from account where name = &#x27;张三&#x27;;<br>update account set money = money - 1000 where name = &#x27;张三&#x27;;<br>update account set money = money + 1000 where name = &#x27;李四&#x27;;<br>commit;<br></code></pre></td></tr></table></figure><h3 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><blockquote><p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a> </p></blockquote><p>并发事务隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>√表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MySQL体系结构：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png" alt="结构图" title="结构图"><br><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png" alt="层级描述" title="层级描述"></p><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是InnoDB。</p><p>相关操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询建表语句<br>show create table account;<br>-- 建表时指定存储引擎<br>CREATE TABLE 表名(<br>...<br>) ENGINE=INNODB;<br>-- 查看当前数据库支持的存储引擎<br>show engines;<br></code></pre></td></tr></table></figure><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p><p>特点：</p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li></ul><p>文件：</p><ul><li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p><p>知识点：</p><p>查看 Mysql 变量：<br><code>show variables like &#39;innodb_file_per_table&#39;;</code></p><p>从idb文件提取表结构数据：<br>（在cmd运行）<br><code>ibd2sdi xxx.ibd</code></p><p>InnoDB 逻辑存储结构：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png" alt="InnoDB逻辑存储结构" title="InnoDB逻辑存储结构"></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p>特点：</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li><li>xxx.MYD: 存储数据</li><li>xxx.MYI: 存储索引</li></ul><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p><p>特点：</p><ul><li>存放在内存中，速度快</li><li>hash索引（默认）</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li></ul><h3 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h3><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code><br>例：<code>show global status like &#39;Com_______&#39;</code></p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：<br>    # 开启慢查询日志开关<br>    slow_query_log=1<br>    # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志<br>    long_query_time=2<br>更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log</p><p>查看慢查询日志开关状态：<br><code>show variables like &#39;slow_query_log&#39;;</code></p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过set语句在session/global级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定query_id的SQL语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定query_id的SQL语句CPU的使用情况<br><code>show profile cpu for query query_id;</code></p><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：<br>    # 直接在select语句之前加上关键字 explain / desc<br>    EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p><p>EXPLAIN 各字段含义：</p><ul><li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</li><li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等</li><li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li><li>possible_key：可能应用在这张表上的索引，一个或多个</li><li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li><li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li><li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li><li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p><p>优缺点：</p><p>优点：</p><ul><li>提高数据检索效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><p>缺点：</p><ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li></ul><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree</td><td>最常见的索引类型，大部分引擎都支持B+树索引</td></tr><tr><td>Hash</td><td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-Tree(空间索引)</td><td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-Text(全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td></tr></tbody></table><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-Tree索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p><img src="https://dhc.pythonanywhere.com/media/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png" alt="二叉树" title="二叉树"></p><p>二叉树的缺点可以用红黑树来解决：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png" alt="红黑树" title="红黑树"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p><p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png" alt="B-Tree结构" title="B-Tree结构"></p><blockquote><p>B-Tree 的数据插入过程动画参照：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p></blockquote><h4 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h4><p>结构图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png" alt="B+Tree结构图" title="B+Tree结构图"></p><blockquote><p>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p></blockquote><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png" alt="MySQL B+Tree 结构图" title="MySQL B+Tree 结构图"></p><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png" alt="Hash索引原理图" title="Hash索引原理图"></p><p>特点：</p><ul><li>Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li></ul><p>存储引擎支持：</p><ul><li>Memory</li><li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><ol><li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li></ol><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li></ul><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>演示图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png" alt="大致原理" title="大致原理"><br><img src="https://dhc.pythonanywhere.com/media/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png" alt="演示图" title="演示图"></p><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li></ul><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from user where id = 10;<br>select * from user where name = &#x27;Arm&#x27;;<br>-- 备注：id为主键，name字段创建的有索引<br></code></pre></td></tr></table></figure><p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p><p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p><p>答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。</p><p>如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p><p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p><p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p><p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引<br>create index idx_user_name on tb_user(name);<br>-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引<br>create unique index idx_user_phone on tb_user (phone);<br>-- 为profession, age, status创建联合索引<br>create index idx_user_pro_age_stat on tb_user(profession, age, status);<br>-- 为email建立合适的索引来提升查询效率<br>create index idx_user_email on tb_user(email);<br><br>-- 删除索引<br>drop index idx_user_email on tb_user;<br></code></pre></td></tr></table></figure><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p><p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;=或者&lt;=来规避索引失效问题。</p><h4 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h4><ol><li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li><li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li><li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</li><li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li><li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li></ol><h4 id="SQL-提示"><a href="#SQL-提示" class="headerlink" title="SQL 提示"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p><p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。</p><h4 id="覆盖索引-amp-回表查询"><a href="#覆盖索引-amp-回表查询" class="headerlink" title="覆盖索引&amp;回表查询"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p><p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p><p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p><p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p><p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p><p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select count(distinct email) / count(*) from tb_user;<br>select count(distinct substring(email, 1, 5)) / count(*) from tb_user;<br></code></pre></td></tr></table></figure><p>show index 里面的sub_part可以看到接取的长度</p><h4 id="单列索引-amp-联合索引"><a href="#单列索引-amp-联合索引" class="headerlink" title="单列索引&amp;联合索引"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p><p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;韩信&#39;;</code><br>这句只会用到phone索引字段</p><h5 id="注意事项-8"><a href="#注意事项-8" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li></ul><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>普通插入：</p><ol><li>采用批量插入（一次插入的数据不建议超过1000条）</li><li>手动提交事务</li><li>主键顺序插入</li></ol><p>大批量插入：<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）<br>mysql --local-infile -u root -p<br># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关<br>set global local_infile = 1;<br>select @@local_infile;<br># 执行load指令将准备好的数据，加载到表结构中<br>load data local infile &#x27;/root/sql1.log&#x27; into table &#x27;tb_user&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;<br></code></pre></td></tr></table></figure><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p><p>页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p><p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p><blockquote><p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p></blockquote><p>主键设计原则：</p><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li><li>业务操作时，避免对主键的修改</li></ul><h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p><p>总结：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li><li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li></ul><h3 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h3><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p><h3 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 此语句耗时很长<br>select * from tb_sku limit 9000000, 10;<br>-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询<br>select id from tb_sku order by id limit 9000000, 10;<br>-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit<br>-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);<br>-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度<br>select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;<br></code></pre></td></tr></table></figure><h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis</p><p>count的几种用法：</p><ul><li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</li><li>用法：count(*)、count(主键)、count(字段)、count(1)</li><li>count(主键)跟count(*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(*)一样；count(null)返回0</li></ul><p>各种用法的性能：</p><ul><li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p><h3 id="update优化（避免行锁升级为表锁）"><a href="#update优化（避免行锁升级为表锁）" class="headerlink" title="update优化（避免行锁升级为表锁）"></a>update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p><p>如以下两条语句：<br><code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行；<br><code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><table><thead><tr><th>类型名称</th><th>取值范围</th><th>大小</th></tr></thead><tbody><tr><td>TINYINT</td><td>-128〜127</td><td>1个字节</td></tr><tr><td>SMALLINT</td><td>-32768〜32767</td><td>2个宇节</td></tr><tr><td>MEDIUMINT</td><td>-8388608〜8388607</td><td>3个字节</td></tr><tr><td>INT (INTEGHR)</td><td>-2147483648〜2147483647</td><td>4个字节</td></tr><tr><td>BIGINT</td><td>-9223372036854775808〜9223372036854775807</td><td>8个字节</td></tr></tbody></table><p>无符号在数据类型后加 unsigned 关键字。</p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>FLOAT</td><td>单精度浮点数</td><td>4 个字节</td></tr><tr><td>DOUBLE</td><td>双精度浮点数</td><td>8 个字节</td></tr><tr><td>DECIMAL (M, D)，DEC</td><td>压缩的“严格”定点数</td><td>M+2 个字节</td></tr></tbody></table><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><table><thead><tr><th>类型名称</th><th>日期格式</th><th>日期范围</th><th>存储需求</th></tr></thead><tbody><tr><td>YEAR</td><td>YYYY</td><td>1901 ~ 2155</td><td>1 个字节</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td><td>3 个字节</td></tr><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01 ~ 9999-12-3</td><td>3 个字节</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8 个字节</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD HH:MM:SS</td><td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td>4 个字节</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度非二进制字符串</td><td>M 字节，1&lt;=M&lt;=255</td></tr><tr><td>VARCHAR(M)</td><td>变长非二进制字符串</td><td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td></tr><tr><td>TINYTEXT</td><td>非常小的非二进制字符串</td><td>L+1字节，在此，L&lt;2^8</td></tr><tr><td>TEXT</td><td>小的非二进制字符串</td><td>L+2字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMTEXT</td><td>中等大小的非二进制字符串</td><td>L+3字节，在此，L&lt;2^24</td></tr><tr><td>LONGTEXT</td><td>大的非二进制字符串</td><td>L+4字节，在此，L&lt;2^32</td></tr><tr><td>ENUM</td><td>枚举类型，只能有一个枚举字符串值</td><td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td></tr><tr><td>SET</td><td>一个设置，字符串对象可以有零个或 多个SET成员</td><td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td></tr></tbody></table><h2 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>BIT(M)</td><td>位字段类型</td><td>大约 (M+7)/8 字节</td></tr><tr><td>BINARY(M)</td><td>固定长度二进制字符串</td><td>M 字节</td></tr><tr><td>VARBINARY (M)</td><td>可变长度二进制字符串</td><td>M+1 字节</td></tr><tr><td>TINYBLOB (M)</td><td>非常小的BLOB</td><td>L+1 字节，在此，L&lt;2^8</td></tr><tr><td>BLOB (M)</td><td>小 BLOB</td><td>L+2 字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMBLOB (M)</td><td>中等大小的BLOB</td><td>L+3 字节，在此，L&lt;2^24</td></tr><tr><td>LONGBLOB (M)</td><td>非常大的BLOB</td><td>L+4 字节，在此，L&lt;2^32</td></tr></tbody></table><h1 id="权限一览表"><a href="#权限一览表" class="headerlink" title="权限一览表"></a>权限一览表</h1><blockquote><p>具体权限的作用详见<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html" title="官方文档">官方文档</a></p></blockquote><p>GRANT 和 REVOKE 允许的静态权限</p><table><thead><tr><th align="left">Privilege</th><th align="left">Grant Table Column</th><th align="left">Context</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all"><code>ALL [PRIVILEGES]</code></a></td><td align="left">Synonym for “all privileges”</td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter"><code>ALTER</code></a></td><td align="left"><code>Alter_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine"><code>ALTER ROUTINE</code></a></td><td align="left"><code>Alter_routine_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create"><code>CREATE</code></a></td><td align="left"><code>Create_priv</code></td><td align="left">Databases, tables, or indexes</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role"><code>CREATE ROLE</code></a></td><td align="left"><code>Create_role_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine"><code>CREATE ROUTINE</code></a></td><td align="left"><code>Create_routine_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace"><code>CREATE TABLESPACE</code></a></td><td align="left"><code>Create_tablespace_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables"><code>CREATE TEMPORARY TABLES</code></a></td><td align="left"><code>Create_tmp_table_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user"><code>CREATE USER</code></a></td><td align="left"><code>Create_user_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view"><code>CREATE VIEW</code></a></td><td align="left"><code>Create_view_priv</code></td><td align="left">Views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete"><code>DELETE</code></a></td><td align="left"><code>Delete_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop"><code>DROP</code></a></td><td align="left"><code>Drop_priv</code></td><td align="left">Databases, tables, or views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role"><code>DROP ROLE</code></a></td><td align="left"><code>Drop_role_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event"><code>EVENT</code></a></td><td align="left"><code>Event_priv</code></td><td align="left">Databases</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute"><code>EXECUTE</code></a></td><td align="left"><code>Execute_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file"><code>FILE</code></a></td><td align="left"><code>File_priv</code></td><td align="left">File access on server host</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option"><code>GRANT OPTION</code></a></td><td align="left"><code>Grant_priv</code></td><td align="left">Databases, tables, or stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index"><code>INDEX</code></a></td><td align="left"><code>Index_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert"><code>INSERT</code></a></td><td align="left"><code>Insert_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables"><code>LOCK TABLES</code></a></td><td align="left"><code>Lock_tables_priv</code></td><td align="left">Databases</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process"><code>PROCESS</code></a></td><td align="left"><code>Process_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy"><code>PROXY</code></a></td><td align="left">See <code>proxies_priv</code> table</td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references"><code>REFERENCES</code></a></td><td align="left"><code>References_priv</code></td><td align="left">Databases or tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload"><code>RELOAD</code></a></td><td align="left"><code>Reload_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client"><code>REPLICATION CLIENT</code></a></td><td align="left"><code>Repl_client_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave"><code>REPLICATION SLAVE</code></a></td><td align="left"><code>Repl_slave_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select"><code>SELECT</code></a></td><td align="left"><code>Select_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases"><code>SHOW DATABASES</code></a></td><td align="left"><code>Show_db_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view"><code>SHOW VIEW</code></a></td><td align="left"><code>Show_view_priv</code></td><td align="left">Views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown"><code>SHUTDOWN</code></a></td><td align="left"><code>Shutdown_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super"><code>SUPER</code></a></td><td align="left"><code>Super_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger"><code>TRIGGER</code></a></td><td align="left"><code>Trigger_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update"><code>UPDATE</code></a></td><td align="left"><code>Update_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage"><code>USAGE</code></a></td><td align="left">Synonym for “no privileges”</td><td align="left">Server administration</td></tr></tbody></table><p>GRANT 和 REVOKE 允许的动态权限</p><table><thead><tr><th align="left">Privilege</th><th align="left">Context</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin"><code>APPLICATION_PASSWORD_ADMIN</code></a></td><td align="left">Dual password administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt"><code>AUDIT_ABORT_EXEMPT</code></a></td><td align="left">Allow queries blocked by audit log filter</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin"><code>AUDIT_ADMIN</code></a></td><td align="left">Audit log administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td><td align="left">Authentication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin"><code>BACKUP_ADMIN</code></a></td><td align="left">Backup administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin"><code>BINLOG_ADMIN</code></a></td><td align="left">Backup and Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td><td align="left">Backup and Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin"><code>CLONE_ADMIN</code></a></td><td align="left">Clone administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin"><code>CONNECTION_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin"><code>ENCRYPTION_KEY_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin"><code>FIREWALL_ADMIN</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt"><code>FIREWALL_EXEMPT</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user"><code>FIREWALL_USER</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs"><code>FLUSH_OPTIMIZER_COSTS</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status"><code>FLUSH_STATUS</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables"><code>FLUSH_TABLES</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources"><code>FLUSH_USER_RESOURCES</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin"><code>GROUP_REPLICATION_ADMIN</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream"><code>GROUP_REPLICATION_STREAM</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td><td align="left">Redo log archiving administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user"><code>NDB_STORED_USER</code></a></td><td align="left">NDB Cluster</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin"><code>PASSWORDLESS_USER_ADMIN</code></a></td><td align="left">Authentication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier"><code>REPLICATION_APPLIER</code></a></td><td align="left"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin"><code>REPLICATION_SLAVE_ADMIN</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin"><code>RESOURCE_GROUP_ADMIN</code></a></td><td align="left">Resource group administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user"><code>RESOURCE_GROUP_USER</code></a></td><td align="left">Resource group administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin"><code>ROLE_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin"><code>SESSION_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id"><code>SET_USER_ID</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine"><code>SHOW_ROUTINE</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user"><code>SYSTEM_USER</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin"><code>SYSTEM_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin"><code>TABLE_ENCRYPTION_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin"><code>VERSION_TOKEN_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin"><code>XA_RECOVER_ADMIN</code></a></td><td align="left">Server administration</td></tr></tbody></table><h1 id="图形化界面工具"><a href="#图形化界面工具" class="headerlink" title="图形化界面工具"></a>图形化界面工具</h1><ul><li>Workbench(免费): <a href="http://dev.mysql.com/downloads/workbench/">http://dev.mysql.com/downloads/workbench/</a></li><li>navicat(收费，试用版30天): <a href="https://www.navicat.com/en/download/navicat-for-mysql">https://www.navicat.com/en/download/navicat-for-mysql</a></li><li>Sequel Pro(开源免费，仅支持Mac OS): <a href="http://www.sequelpro.com/">http://www.sequelpro.com/</a></li><li>HeidiSQL(免费): <a href="http://www.heidisql.com/">http://www.heidisql.com/</a></li><li>phpMyAdmin(免费): <a href="https://www.phpmyadmin.net/">https://www.phpmyadmin.net/</a></li><li>SQLyog: <a href="https://sqlyog.en.softonic.com/">https://sqlyog.en.softonic.com/</a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><ol><li>在SQL语句之后加上<code>\G</code>会将结果的表格形式转换成行文本形式</li><li>查看Mysql数据库占用空间：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT table_schema &quot;Database Name&quot;<br>     , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;<br>FROM information_schema.TABLES<br>GROUP BY table_schema;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>游戏打包</title>
    <link href="/blog/2023/03/19/%E6%B8%B8%E6%88%8F%E6%89%93%E5%8C%85/"/>
    <url>/blog/2023/03/19/%E6%B8%B8%E6%88%8F%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a><!--本文内容均转载自黑马程序员-阿玮老师的游戏打包教程--></h3><h1 id="主要实现步骤"><a href="#主要实现步骤" class="headerlink" title="主要实现步骤"></a>主要实现步骤</h1><p>1，   将代码打包成jar包。</p><p>2，   整合资源文件</p><p>3，   将jar包打包成exe</p><p>4，   将jdk、资源文件、jar包转换后的exe三者再次打包成最终的exe。</p><h1 id="准备软件"><a href="#准备软件" class="headerlink" title="准备软件"></a>准备软件</h1><p>1，   Idea：将代</p><p>码打包成jar包（java形式的压缩包）</p><p>2，   exe4j：将jar包转换成exe的工具。</p><p>3，   innosetup：将游戏用到的图片，Java的运行环境和第二步打包的代码，组合成最终的安装程序。</p><p><strong>备注1：</strong>exe4j和innosetup安装非常简单，傻瓜式下一步即可。</p><p><strong>备注2：</strong>exe4j支持的JDK版本是8~11，其他版本的JDK不行，所以我也给大家提供了JDK11版本。</p><p><strong>备注3：</strong>64位的操作系统用exe4j_windows-x64_6_0_2.exe</p><p>32位的操作系统用exe4j_windows_6_0_2.exe</p><p><strong>备注4：</strong>打开我的电脑，右键空白处，点击属性，在弹出界面的中央就能查看自己电脑是64位的还是32位的。</p><h1 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h1><ol><li>jdk 下载安装 <a href="https://www.oracle.com/java/technologies/downloads/#java11-windows"></a></li><li>exe4j 链接：<a href="https://pan.baidu.com/s/1LS4VhUFfj5Hcl3qLeCg8kA">https://pan.baidu.com/s/1LS4VhUFfj5Hcl3qLeCg8kA</a><br>提取码：ZSZS</li><li>innosetup 链接：<a href="https://pan.baidu.com/s/1zo29xYryY3oiY4x3naGtRQ?pwd=ibu0">https://pan.baidu.com/s/1zo29xYryY3oiY4x3naGtRQ?pwd=ibu0</a><br>提取码：ibu0</li></ol><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><p>1，     确保idea已经安装完毕</p><p>2，     安装exe4j</p><p>3，     安装innosetup</p><p>傻瓜式安装，直接下一步即可，但是要记住安装路径。</p><h1 id="代码改写："><a href="#代码改写：" class="headerlink" title="代码改写："></a>代码改写：</h1><p>代码中所有图片用到的路径需要把模块名删除，改写之后如下：</p><p>在不同的情况下，相对路径的相对位置是不一样的。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg" alt="img"></p><h1 id="打包步骤："><a href="#打包步骤：" class="headerlink" title="打包步骤："></a>打包步骤：</h1><h2 id="第一步：代码打包成jar包"><a href="#第一步：代码打包成jar包" class="headerlink" title="第一步：代码打包成jar包"></a>第一步：代码打包成jar包</h2><p>1，   点击File，再点Project Structure。</p><p>2，   点击Artifaces。</p><p>3，   下方图片箭头指向位置应为空白，如果有其他内容，可以选中之后，点击减号删除。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image003.png" alt="img"></p><p>4，   选中左侧的Artifacts ，</p><p>点击中间上方位置的+ </p><p>点击JAR</p><p>点击From modules with dependencies…</p><p>如下图所示：</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image004.png" alt="img"></p><p>5，   Module：选择要打包的项目。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image005.png" alt="img"></p><p>6，Main Class：点击红框最后的那个小图标，项目中是哪个main方法所在的类去启动项目，这里就选择哪个类。我的项目是由app里面的main方法启动的，所以我就选择App</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image006.png" alt="img"></p><p>7，设置 META-INF/MANIFEST.MF。</p><p>点击箭头指向的图标进行设置。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image007.png" alt="img"></p><p>8，选择当前模块</p><p>点击OK</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image008.png" alt="img"></p><p>9，   此时这里的路径就是模块所在路径，点击OK。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image009.png" alt="img"></p><p>10， 如果没有弹框报错，第十步可以跳过，直接看十一步。</p><p>如果出现弹框报错，表示当前模块下已存在META-INF文件夹了。可以在本地找到已存在的META-INF文件夹，右键点击DELETE删除即可。</p><p>查找方式如下：</p><p>右键模块点击open in</p><p>点击Explorer</p><p>在模块里面找到META-INF文件删除即可。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image011.jpg" alt="img"></p><p>11， 如果没有报错，就出现一个puzzlegame：jar的提示。</p><p>点击右下角的OK。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image013.jpg" alt="img"></p><p>12， 在idea主界面上方，点击Build里面的Build Artifacts。</p><p>如果是灰色的不能按，请确定在上面第一步~第九步有没有配置好jar包的信息。</p><p>如果已经配置好了jar的信息，此处就可以正常点击。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image014.png" alt="img"></p><p>13， 在主界面正中央。</p><p>选择puzzlegame:jar。</p><p>再选择Build。</p><p>idea会帮我们生成jar包。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image015.png" alt="img"></p><p>14， 等页面右下角的进度条结束，jar就已经生成完毕。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image017.jpg" alt="img"></p><p>15， 点击File，再点Project Structure。</p><p>点击Artifaces。</p><p>在下图红色框中的路径下，可以找到生成好的jar包。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image019.jpg" alt="img"></p><h2 id="第二步：整合资源文件"><a href="#第二步：整合资源文件" class="headerlink" title="第二步：整合资源文件"></a>第二步：整合资源文件</h2><p>1，   将第一步创建好的jar包拷贝到桌面上。</p><p>2，   在桌面上新建一个文件夹resource。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image020.png" alt="img"></p><p>3，   将《拼图游戏》中的image文件夹粘贴到resource文件夹当中。</p><p>此时在桌面中的resource文件夹下的image文件夹下，就会看到游戏里面用到的所有图片。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image021.png" alt="img"></p><h2 id="第三步：将jar包打包成exe"><a href="#第三步：将jar包打包成exe" class="headerlink" title="第三步：将jar包打包成exe"></a>第三步：将jar包打包成exe</h2><p>1，   双击打开安装好的exe4j.exe，注册软件。</p><p>点击下面的Enter License</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image023.jpg" alt="img"></p><p>2，   输入用户名，公司名和注册码后点击ok</p><p>用户名，公司名随便填，最好都是小写字母。</p><p>注册码：L-g782dn2d-1f1yqxx1rv1sqd</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image024.png" alt="img"></p><p>3，   注册完毕之后点击右下角的next</p><p>备注：exe4j.exe只识别JDK8到JDK11，如果安装时出现弹框报错，请检查JDK版本，资料文件夹中给大家提供了JDK11，有需要可以安装。（黑马程序员阿玮老师出品）</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image026.jpg" alt="img"></p><p>4，   选择JAVA转EXE。</p><p>点击右下角的next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image028.jpg" alt="img"></p><p>5，   输入名称puzzlegame</p><p>输出保存exe的路径，建议选择到桌面上。</p><p>点击右下角的next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image030.jpg" alt="img"></p><p>6，   选择以图形界面的形式启动游戏</p><p>输入应用名称，puzzlegame</p><p>点击高级设置Advanced Options，选择32-bit or 64-bit</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image032.jpg" alt="img"></p><p>7，   勾选Generate 64-bit executable</p><p>表示要生成64位的exe安装包，如果未勾选默认生成32位的安装包。</p><p>点击右下角next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image034.jpg" alt="img"></p><p>8，    然后一直下一步，一直出现如下界面</p><p>在本界面开始jar包并以及配置启动类。（黑马程序员阿玮老师出品）</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image036.jpg" alt="img"></p><p>9，    第一行，VM参数配置的地方加上：-Dfile.encoding=utf-8</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image037.png" alt="img"></p><p>10， 点击右侧绿色的+，添加jar包</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image039.jpg" alt="img"></p><p>11， 添加jar包</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image040.png" alt="img"></p><p>12， 选择桌面上的puzzlegame.jar。</p><p>点击下面的打开。（黑马程序员阿玮老师出品）</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image042.jpg" alt="img"></p><p>13， 检查路径，如果无误点击右下角的OK</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image044.jpg" alt="img"></p><p>14， 选择项目启动类</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image046.jpg" alt="img"></p><p>15， 因为程序主入口main方法写在App类中，所有选择app，并点击OK。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image048.jpg" alt="img"></p><p>16， 本页面中，一共修改了三处。</p><p>三处全部操作完毕。点击右下角的next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image050.jpg" alt="img"></p><p>17， 填写最小启动的JDK版本。输入1.8</p><p>配置exe加载的JDK，选择第一个。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image052.jpg" alt="img"></p><p>18， 点击+</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image054.png" alt="https://img-blog.csdnimg.cn/20200204003959383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3NzAxMzgx,size_16,color_FFFFFF,t_70"></p><p>19， 选择Directory</p><p>下面输入.\jdk</p><p><strong>（注意：输入点杠jdk，都要是英文状态下输入）</strong></p><p>点击OK</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image055.png" alt="img"></p><p>20， 再次点击+</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image057.jpg" alt="img"></p><p>21， 选择Directory</p><p>下面输入.\image</p><p><strong>（输入点杠image，都要是英文状态下输入）</strong></p><p>点击OK</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image058.png" alt="img"></p><p>22， 点击右下角的next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image060.jpg" alt="img"></p><p>23， 选择Client VM</p><p>点击右下角的next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image062.png" alt="https://img-blog.csdnimg.cn/20200204004404491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3NzAxMzgx,size_16,color_FFFFFF,t_70"></p><p>24， 然后一直下一步，最终出现如下界面</p><p>点击右下角的Exit退出。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image064.jpg" alt="img"></p><p>25， 点击Exit后，会提升是否需要保存刚刚的配置信息，可以点击Yes，并选择一个路径进行保存。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image066.jpg" alt="img"></p><p>26， 如果第三步选择的exe保存的路径是桌面，那么在桌面上</p><p>就能看到生成的puzzlegame.exe文件了。</p><p>四个文件分别为：</p><p>左一：刚刚用jar生成的exe文件。</p><p>左二：idea生成的jar包</p><p>左三：游戏用到的资源图片</p><p>左四：刚刚用exe4J设置完毕之后保存的信息。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image067.png" alt="img"></p><h2 id="第四步：将jdk、资源文件、jar包转换后的exe三者再次打包成最终的exe。"><a href="#第四步：将jdk、资源文件、jar包转换后的exe三者再次打包成最终的exe。" class="headerlink" title="第四步：将jdk、资源文件、jar包转换后的exe三者再次打包成最终的exe。"></a>第四步：将jdk、资源文件、jar包转换后的exe三者再次打包成最终的exe。</h2><p>刚刚，我们仅仅是把java代码变成了exe。下面我们要把游戏中依赖的资源文件，也就是使用到的所有图片，还有JDK三者再次打包成最终的exe，这样在没有jdk电脑环境下也能运行。</p><p>1，打开inno setup</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image069.jpg" alt="img"></p><p>2，在欢迎页面点击右下角的关闭</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image070.png" alt="img"></p><p>4，   点击左上角的File</p><p>再点击NEW</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image071.png" alt="img"></p><p>5，   点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image072.png" alt="img"></p><p>6，   输入应用名称puzzlegame</p><p>点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image073.png" alt="img"></p><p>7，   不修改任何东西，直接点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image074.png" alt="img"></p><p>8，   点击这里，选择桌面上已经生成好的puzzlegame.exe</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image075.png" alt="img"></p><p>9，   点击Add folder</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image076.png" alt="img"></p><p>10， 选择桌面的resource，再点击确定。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image077.png" alt="img"></p><p>11， 如果出现下面弹框，则点击是。</p><p>如果没有出现也没有任何关系。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image078.png" alt="img"></p><p>12， 再点击 Add file(s)…</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image079.png" alt="img"></p><p>13， 选中桌面的puzzlegame.exe，再次添加一次。</p><p>点击下面的打开。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image081.jpg" alt="img"></p><p>14， 在本页面中一共设置了三处地方。</p><p>全部设置完毕，点击next。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image082.png" alt="img"></p><p>15， 默认不用选择，点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image083.png" alt="img"></p><p>16， 默认不用选择，点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image084.png" alt="img"></p><p>17， 选择语言，还是默认，点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image085.png" alt="img"></p><p>18， 选择输出路径，还是选择桌面。</p><p>输入最终安装包的名字，不能跟已有的puzzlegame重名。</p><p>所以我写setup，再点击右下角next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image086.png" alt="img"></p><p>19， 默认点击next</p><p>有部分同学电脑不显示这一步，也没有关系。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image087.png" alt="img"></p><p>20， 完成，点击finish</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image088.png" alt="img"></p><p>21， 配置到最后一步了，脚本文件，到这里会弹出问你是否马</p><p>上编译，选择否，先把脚本写好再自己编译。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image089.png" alt="img"></p><p>22， 上面红色箭头处添加一行脚本。</p><p>#define MyJdkName “jdk”</p><p>添加前：<img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image090.png" alt="img"></p><p>23， 添加完毕之后，如下图所示</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image092.jpg" alt="img"></p><p>24， 往下拉，把有红色框起来的这一行删掉</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image094.jpg" alt="img"></p><p>25， 在上一步删除位置添加一段行的文字</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">Source: <span class="hljs-string">&quot;自己本地JDK路径\*&quot;</span>; DestDir: <span class="hljs-string">&quot;&#123;app&#125;\&#123;#MyJdkName&#125;&quot;</span>; Flags: ignoreversion recursesubdirs createallsubdirs<br></code></pre></td></tr></table></figure><p><strong>千万注意：这段文字不要直接复制。根据自己电脑中JDK的安装位置进行修改，添加完毕之后如下图</strong></p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image096.jpg" alt="img"></p><p>26， 点击上方的绿色按钮开始编译。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image097.png" alt="https://img-blog.csdnimg.cn/20200204010100205.png"></p><p>27， 此时会询问，是否需要保存。</p><p>可以点击是，选择一个位置保存一下刚刚修改之后的结果。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image098.png" alt="img"></p><p>28，  然后等待绿色滚动条结束</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image100.jpg" alt="img"></p><p>29， 当绿色滚动条结束后，会自动安装setup.exe文件。</p><p>此时可以点击否，先不安装。</p><p>在桌面上，会多了一个setup.exe文件和一个后缀名为iss的文件</p><p>setup.exe：打包成功的游戏安装包。</p><p>iss文件：就是刚刚设置的脚本文件。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image101.png" alt="img"></p><p>30， 现在就可以把这个exe文件发给你的好基友了，他的电脑</p><p>上不需要安装JDK，直接双击这个安装包就可以玩游戏了。</p><p>在安装的时候可以选择安装路径。</p><p>还可以在桌面生成快捷方式。</p><h1 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h1><p>1，   安装完毕之后，可以到安装目录去找puzzlegame.exe</p><p>双击就可以玩游戏了。刚刚桌面上的5个文件可以全部删除。以后双击puzzlegame.exe就可以玩游戏了。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image102.png" alt="img"></p><p>2，   如果游戏运行之后，有效果但是无图片，或者部分图片无</p><p>法加载。如下图所示：此时背景图片无法加载。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image103.png" alt="img"></p><p>3，   修改步骤一：</p><p>检查安装目录下image文件夹中是否有该图片。如果没有将缺少的图片粘贴进去重新运行游戏。（黑马程序员阿玮老师出品）</p><p>修改步骤二：</p><p>检查代码，图片的路径需要把模块名删掉。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image104.jpg" alt="img"></p><p>4，代码修改后，需要重新生成exe安装包，重新安装游戏。</p>]]></content>
    
    
    <categories>
      
      <category>project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL安装配置</title>
    <link href="/blog/2023/03/19/MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/blog/2023/03/19/MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL安装配置一条龙教程"><a href="#MySQL安装配置一条龙教程" class="headerlink" title="MySQL安装配置一条龙教程"></a>MySQL安装配置一条龙教程</h1><ul><li><h2 id="安装MySQL服务"><a href="#安装MySQL服务" class="headerlink" title="安装MySQL服务"></a>安装MySQL服务</h2><ul><li><p>视频资源   <a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx/?p=3&share_source=copy_web&vd_source=41484c3c23d7dc1caf838d6574365b27">MySQL安装教程-黑马程序员</a></p></li><li><p>文档笔记  （去年暑假自己随手记的，具体操作注意事项还是建议跟着上面的视频走一遍）</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.下载 安装解压<br>https:<span class="hljs-regexp">//</span>downloads.mysql.com<span class="hljs-regexp">/archives/</span>community/<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">2.1</span>.添加环境变量<br><span class="hljs-comment">(1)</span>新建MYSQL_HOME变量,变量名: D:\softWare\mysql\mysql<span class="hljs-number">-5.7</span><span class="hljs-number">.19</span>-wi<span class="hljs-symbol">nx64</span><br><span class="hljs-comment">(2)</span>Path环境变量:<span class="hljs-meta">%</span> MYSQL_HOME<span class="hljs-meta">%</span>\bi<span class="hljs-symbol">n</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">2.2</span>.新建配置文件<br>在路径D:\softWare\mysql\mysql<span class="hljs-number">-5.7</span><span class="hljs-number">.19</span>-winx64下创建my.ini,配置如下内容:<br>[mysql]<br><span class="hljs-keyword">default</span>-<span class="hljs-type">character</span>-<span class="hljs-keyword">set</span>=utf8<br>[mysqld]<br><span class="hljs-type">character</span>-<span class="hljs-keyword">set</span>-<span class="hljs-keyword">server</span>=utf8<br><span class="hljs-keyword">default</span>-<span class="hljs-keyword">storage</span>-engine=INNODB<br>sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">3</span>.初始化MySQL，生成date<br><span class="hljs-attribute">mysqld</span> –initialize-insecure <br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">4</span>.注册MySQL服务<br><span class="hljs-attribute">mysqld</span> -install<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">5</span>.启动MySQL服务<br><span class="hljs-attribute">C</span>:\WINDOWS\system32&gt;net start mysql <br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">6</span>.设置账户密码<br><span class="hljs-attribute">mysqladmin</span> -u 用户名 -p 密码  (这里的用户名就是root了,之后可以创建新用户)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">7</span>.后期修改账户密码<br><span class="hljs-attribute">mysqladmin</span> -u用户名 -p旧密码 password 新密码<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">3</span>.登录MySQL<br>Mysql -u root -<span class="hljs-selector-tag">p</span>密码<br></code></pre></td></tr></table></figure><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-number">4.</span>登出MySQL <br>mysql&gt; <span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-number">5</span>.关闭MySQL服务<br><span class="hljs-symbol">C:</span>\WINDOWS\system32&gt;net <span class="hljs-keyword">stop</span> mysql<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">6.卸载MySQL<br>C:\WINDOWS\system32&gt;mysqld -<span class="hljs-built_in">remove</span> mysql<br></code></pre></td></tr></table></figure></li><li><h2 id="安装可视化软件"><a href="#安装可视化软件" class="headerlink" title="安装可视化软件"></a>安装可视化软件</h2></li><li><p>可视化软件有很多，比如Navicat，sqlyog等，都是为了方便操作数据库，咱就选一个简单好用还免费的</p></li></ul><ol><li><p> <a href="https://blog.csdn.net/cong666555/article/details/128399011">安装sqlyog</a>  可以跟着这篇文章操作</p></li><li><p>连接本地数据库</p><p><a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx/?p=10&share_source=copy_web&vd_source=41484c3c23d7dc1caf838d6574365b27">Navicat连接本地数据库-黑马程序员</a>     跟着视频操作就行，他用的是Navicat，其实都一样</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用户中心开发文档</title>
    <link href="/blog/2023/03/17/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/"/>
    <url>/blog/2023/03/17/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="本文档记录了用户中心开发的基本流程，-包含了前期的框架搭建、数据库设计，以及后期的后端接口实现、前端页面开发，实现了基础的登录注册功能，以及查看在线用户状态和删除用户的功能（管理员）"><a href="#本文档记录了用户中心开发的基本流程，-包含了前期的框架搭建、数据库设计，以及后期的后端接口实现、前端页面开发，实现了基础的登录注册功能，以及查看在线用户状态和删除用户的功能（管理员）" class="headerlink" title="本文档记录了用户中心开发的基本流程， 包含了前期的框架搭建、数据库设计，以及后期的后端接口实现、前端页面开发，实现了基础的登录注册功能，以及查看在线用户状态和删除用户的功能（管理员）"></a><code>本文档记录了用户中心开发的基本流程， 包含了前期的框架搭建、数据库设计，以及后期的后端接口实现、前端页面开发，实现了基础的登录注册功能，以及查看在线用户状态和删除用户的功能（管理员）</code></h3><h1 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h1><h3 id="前端框架搭建"><a href="#前端框架搭建" class="headerlink" title="前端框架搭建"></a>前端框架搭建</h3><h3 id="后端框架搭建"><a href="#后端框架搭建" class="headerlink" title="后端框架搭建"></a>后端框架搭建</h3><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><h1 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h1><h5 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h5><h2 id="登录-校验"><a href="#登录-校验" class="headerlink" title="登录+校验"></a>登录+校验</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">User</span> <span class="hljs-title">userLogin</span>(<span class="hljs-keyword">String</span> userAccount, <span class="hljs-keyword">String</span> userPassword, HttpServletRequest request);<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>public User user<span class="hljs-constructor">Login(String <span class="hljs-params">userAccount</span>, String <span class="hljs-params">userPassword</span>, HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br>    <span class="hljs-comment">// 1.校验</span><br>    <span class="hljs-comment">// 1.1.账户, 密码不能为空</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>)</span>)<br>        return null;<br><br>    <span class="hljs-comment">// 1.2.账户不小于4位</span><br>    <span class="hljs-keyword">if</span> (userAccount.length<span class="hljs-literal">()</span> &lt; <span class="hljs-number">4</span>)<br>        return null;<br><br>    <span class="hljs-comment">// 1.3.用户密码不小于8位</span><br>    <span class="hljs-keyword">if</span> (userPassword.length<span class="hljs-literal">()</span> &lt; <span class="hljs-number">8</span>)<br>        return null;<br><br>    <span class="hljs-comment">// 1.4.账户不包含特殊字符</span><br>    String pattern = <span class="hljs-string">&quot;.*[\\s`~!@#$%^&amp;*()+=|&#123;&#125;&#x27;:;&#x27;,\\[\\].&lt;&gt;/?~！@#￥%……&amp;*（）——+|&#123;&#125;【】‘；：”“’。，、？\\\\]+.*&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Pattern</span>.</span></span>matches(pattern, userAccount))<br>        return null;<br><br>    <span class="hljs-comment">// 1.5.检验该用户是否注册</span><br>    User user = <span class="hljs-keyword">new</span> <span class="hljs-constructor">User()</span>;<br><br>    user.set<span class="hljs-constructor">UserAccount(<span class="hljs-params">userAccount</span>)</span>;<br><br>    String encryptPassword = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigestUtils</span>.</span></span>md5<span class="hljs-constructor">DigestAsHex((SALT + <span class="hljs-params">userPassword</span>)</span>.get<span class="hljs-constructor">Bytes()</span>);<br>    user.set<span class="hljs-constructor">UserPassword(<span class="hljs-params">encryptPassword</span>)</span>;<br><br>    QueryWrapper&lt;User&gt; qw = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;<span class="hljs-literal">()</span>;<br>    qw.eq(<span class="hljs-string">&quot;user_account&quot;</span>, userAccount).eq(<span class="hljs-string">&quot;user_password&quot;</span>, encryptPassword);<br>    User one = this.get<span class="hljs-constructor">One(<span class="hljs-params">qw</span>)</span>;<br><br>    <span class="hljs-comment">// 1.5.1.用户未注册(包含了MP自带的逻辑删除校验)</span><br>    <span class="hljs-keyword">if</span> (one<span class="hljs-operator"> == </span>null)<br>        return null;<br><br>    <span class="hljs-comment">// 2.脱敏用户信息</span><br>    User safetyUser = get<span class="hljs-constructor">SafetyUser(<span class="hljs-params">one</span>)</span>;<br><br>    <span class="hljs-comment">// 3.记录用户登录态</span><br>    request.get<span class="hljs-constructor">Session()</span>.set<span class="hljs-constructor">Attribute(USER_LOGIN_STATE, <span class="hljs-params">safetyUser</span>)</span>;<br><br>    <span class="hljs-comment">// 4.返回用户信息</span><br>    return safetyUser;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注册-校验"><a href="#注册-校验" class="headerlink" title="注册+校验"></a>注册+校验</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">userRegister</span><span class="hljs-params">(<span class="hljs-type">String</span> userAccount, <span class="hljs-type">String</span> userPassword, <span class="hljs-type">String</span> checkPassword)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户注册</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userAccount   账户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userPassword  密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> checkPassword 二次密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用户id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> long userRegister(String userAccount, String userPassword, String checkPassword) &#123;<br>        <span class="hljs-comment">// 1.校验</span><br>        <span class="hljs-comment">// 1.1.账户, 密码, 二次密码不能为空</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isAnyBlank(userAccount, userPassword, checkPassword))<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 1.2.账户不小于4位</span><br>        <span class="hljs-keyword">if</span> (userAccount.length() &lt; <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 1.3.账户不能重复</span><br>        QueryWrapper&lt;User&gt; lqw = new QueryWrapper&lt;&gt;(); <span class="hljs-comment">// LambdaQueryWrapper&lt;User&gt; userLambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br>        lqw.eq(<span class="hljs-string">&quot;user_account&quot;</span>, userAccount); <span class="hljs-comment">// userLambdaQueryWrapper.eq(User::getUserAccount, userAccount);</span><br>        <span class="hljs-built_in">Long</span> count = userMapper.selectCount(lqw);   <span class="hljs-comment">// long count = this.count(lqw);</span><br><br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 1.4.用户密码不小于8位</span><br>        <span class="hljs-keyword">if</span> (userPassword.length() &lt; <span class="hljs-number">8</span>)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 1.5.账户不包含特殊字符</span><br>        String pattern = <span class="hljs-string">&quot;.*[\\s`~!@#$%^&amp;*()+=|&#123;&#125;&#x27;:;&#x27;,\\[\\].&lt;&gt;/?~！@#￥%……&amp;*（）——+|&#123;&#125;【】‘；：”“’。，、？\\\\]+.*&quot;</span>;<br>        <span class="hljs-keyword">if</span> (Pattern.matches(pattern, userAccount))<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 1.6.二次密码与密码相同</span><br>        <span class="hljs-keyword">if</span> (!userPassword.equals(checkPassword))<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br><br>        <span class="hljs-comment">// 2.对密码进行加密</span><br>        String encryptPassword = DigestUtils.md5DigestAsHex((SALT + userPassword).getBytes());<br><span class="hljs-comment">//        System.out.println(encryptPassword);</span><br><br><br>        <span class="hljs-comment">// 3.向数据库中插入用户数据</span><br>        User user = new User();<br>        <span class="hljs-comment">//</span><br>        user.setUserAccount(userAccount);<br>        user.setUserPassword(encryptPassword);<br>        boolean save = <span class="hljs-keyword">this</span>.save(user);<br>        <span class="hljs-comment">//插入失败</span><br>        <span class="hljs-keyword">if</span> (!save)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">return</span> user.getId();<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="封装脱敏用户信息"><a href="#封装脱敏用户信息" class="headerlink" title="封装脱敏用户信息"></a>封装脱敏用户信息</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">User</span> <span class="hljs-title">getSafetyUser</span>(<span class="hljs-keyword">User</span> <span class="hljs-title">originUser</span>);<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户信息脱敏</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param originUser 原始用户</span><br><span class="hljs-comment"> * @return 脱敏后的用户</span><br><span class="hljs-comment"> */</span><br>public User get<span class="hljs-constructor">SafetyUser(User <span class="hljs-params">originUser</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (originUser<span class="hljs-operator"> == </span>null)<br>        return null;<br><br>    User safetyUser = <span class="hljs-keyword">new</span> <span class="hljs-constructor">User()</span>;<br>    safetyUser.set<span class="hljs-constructor">Id(<span class="hljs-params">originUser</span>.<span class="hljs-params">getId</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">UserAccount(<span class="hljs-params">originUser</span>.<span class="hljs-params">getUserAccount</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">Username(<span class="hljs-params">originUser</span>.<span class="hljs-params">getUsername</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">AvatarUrl(<span class="hljs-params">originUser</span>.<span class="hljs-params">getAvatarUrl</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">Gender(<span class="hljs-params">originUser</span>.<span class="hljs-params">getGender</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">Phone(<span class="hljs-params">originUser</span>.<span class="hljs-params">getPhone</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">Email(<span class="hljs-params">originUser</span>.<span class="hljs-params">getEmail</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">UserStatus(<span class="hljs-params">originUser</span>.<span class="hljs-params">getUserStatus</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">CreateTime(<span class="hljs-params">originUser</span>.<span class="hljs-params">getCreateTime</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">IsDelete(<span class="hljs-params">originUser</span>.<span class="hljs-params">getIsDelete</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">UserRole(<span class="hljs-params">originUser</span>.<span class="hljs-params">getUserRole</span>()</span>);<br><br>    return safetyUser;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h5><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户登录</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param userLoginRequest 登录信息封装</span><br><span class="hljs-comment">     * @param request          request</span><br><span class="hljs-comment">     * @return User</span><br><span class="hljs-comment">     */</span><br>    @<span class="hljs-constructor">PostMapping(<span class="hljs-string">&quot;/login&quot;</span>)</span><br>    public User user<span class="hljs-constructor">Login(@RequestBody UserLoginRequest <span class="hljs-params">userLoginRequest</span>, HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br>        String userAccount = userLoginRequest.get<span class="hljs-constructor">UserAccount()</span>;<br>        String userPassword = userLoginRequest.get<span class="hljs-constructor">UserPassword()</span>;<br>        <span class="hljs-comment">//controller对参数的校验</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>)</span>)<br>            return null;<br><br>        return userService.user<span class="hljs-constructor">Login(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">request</span>)</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户注册</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param userRegisterRequest 注册信息封装类</span><br><span class="hljs-comment"> * @return id</span><br><span class="hljs-comment"> */</span><br>@<span class="hljs-constructor">PostMapping(<span class="hljs-string">&quot;/register&quot;</span>)</span><br>public Long user<span class="hljs-constructor">Register(@RequestBody UserRegisterRequest <span class="hljs-params">userRegisterRequest</span>)</span> &#123;<br>    String userAccount = userRegisterRequest.get<span class="hljs-constructor">UserAccount()</span>;<br>    String userPassword = userRegisterRequest.get<span class="hljs-constructor">UserPassword()</span>;<br>    String checkPassword = userRegisterRequest.get<span class="hljs-constructor">CheckPassword()</span>;<br>    <span class="hljs-comment">//controller对参数的校验</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>)</span>)<br>        return null;<br><br>    return userService.user<span class="hljs-constructor">Register(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查询用户-权限校验"><a href="#查询用户-权限校验" class="headerlink" title="查询用户+权限校验"></a>查询用户+权限校验</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询用户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param username 用户名</span><br><span class="hljs-comment">     * @return 查到的用户</span><br><span class="hljs-comment">     */</span><br>    @<span class="hljs-constructor">GetMapping(<span class="hljs-string">&quot;/search&quot;</span>)</span><br>    public List&lt;User&gt; user<span class="hljs-constructor">Search(String <span class="hljs-params">username</span>, HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br>        <span class="hljs-comment">// 1.校验权限</span><br>        <span class="hljs-keyword">if</span> (!is<span class="hljs-constructor">Admin(<span class="hljs-params">request</span>)</span>)<br>            return <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>        <span class="hljs-comment">// 2.判空, 默认查询全部</span><br>        QueryWrapper&lt;User&gt; qw = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;<span class="hljs-literal">()</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">NotBlank(<span class="hljs-params">username</span>)</span>)<br>            qw.like(<span class="hljs-string">&quot;username&quot;</span>, username);<br>        <span class="hljs-comment">// 3.查询</span><br>        List&lt;User&gt; userList = userService.<span class="hljs-built_in">list</span>(qw);<br>        <span class="hljs-comment">// 4.返回脱敏的用户信息</span><br>        return userList.stream<span class="hljs-literal">()</span>.map(user -&gt; userService.get<span class="hljs-constructor">SafetyUser(<span class="hljs-params">user</span>)</span>).collect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collectors</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">List()</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="删除用户-权限校验"><a href="#删除用户-权限校验" class="headerlink" title="删除用户+权限校验"></a>删除用户+权限校验</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除用户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 用户id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true/false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@DeleteMapping(<span class="hljs-string">&quot;/delete&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">Boolean</span> userDelete(<span class="hljs-built_in">Long</span> id, HttpServletRequest request) &#123;<br>        <span class="hljs-comment">// 1.校验权限</span><br>        <span class="hljs-keyword">if</span> (!isAdmin(request))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">if</span> (id &lt;= <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-comment">// 2.删除用户(只要配置MP的逻辑删除的话, 该删除为逻辑删除)</span><br>        <span class="hljs-keyword">return</span> userService.removeById(id);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="获取用户登录态"><a href="#获取用户登录态" class="headerlink" title="获取用户登录态"></a>获取用户登录态</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 查询用户</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * @param username 用户名</span><br><span class="hljs-comment">   * @return 查到的用户</span><br><span class="hljs-comment">   */</span><br>  @<span class="hljs-constructor">GetMapping(<span class="hljs-string">&quot;/search&quot;</span>)</span><br>  public List&lt;User&gt; user<span class="hljs-constructor">Search(String <span class="hljs-params">username</span>, HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br>      <span class="hljs-comment">// 1.校验权限</span><br>      <span class="hljs-keyword">if</span> (!is<span class="hljs-constructor">Admin(<span class="hljs-params">request</span>)</span>)<br>          return <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>      <span class="hljs-comment">// 2.判空, 默认查询全部</span><br>      QueryWrapper&lt;User&gt; qw = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;<span class="hljs-literal">()</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">NotBlank(<span class="hljs-params">username</span>)</span>)<br>          qw.like(<span class="hljs-string">&quot;username&quot;</span>, username);<br>      <span class="hljs-comment">// 3.查询</span><br>      List&lt;User&gt; userList = userService.<span class="hljs-built_in">list</span>(qw);<br>      <span class="hljs-comment">// 4.返回脱敏的用户信息</span><br>      return userList.stream<span class="hljs-literal">()</span>.map(user -&gt; userService.get<span class="hljs-constructor">SafetyUser(<span class="hljs-params">user</span>)</span>).collect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collectors</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">List()</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="封装校验管理员逻辑"><a href="#封装校验管理员逻辑" class="headerlink" title="封装校验管理员逻辑"></a>封装校验管理员逻辑</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验是否为管理员</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param request request</span><br><span class="hljs-comment">     * @return 校验成功与否</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">Boolean</span> isAdmin(HttpServletRequest request) &#123;<br>        //校验是否为管理员<br>        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = (<span class="hljs-keyword">User</span>) request.getSession().getAttribute(USER_LOGIN_STATE);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">user</span> != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">user</span>.getUserRole() == ADMIN_ROLE;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="constant层"><a href="#constant层" class="headerlink" title="constant层"></a>constant层</h5><h2 id="封装常量"><a href="#封装常量" class="headerlink" title="封装常量"></a>封装常量</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//登录用户session Key</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> USER_LOGIN_STATE = <span class="hljs-string">&quot;userLoginState&quot;</span>;<br>   <span class="hljs-comment">//管理员权限</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> ADMIN_ROLE = <span class="hljs-number">1</span>;<br>   <span class="hljs-comment">//普通用户权限</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> DEFAULT_ROLE = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h5 id="model-request层"><a href="#model-request层" class="headerlink" title="model/request层"></a>model/request层</h5><h2 id="封装login-register实体接收类"><a href="#封装login-register实体接收类" class="headerlink" title="封装login/register实体接收类"></a>封装login/register实体接收类</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haxe">@Data<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserLoginRequest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> userAccount;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> userPassword;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe">@Data<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRegisterRequest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> userAccount;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> userPassword;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> checkPassword;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h1><h2 id="修改登录页面"><a href="#修改登录页面" class="headerlink" title="修改登录页面"></a>修改登录页面</h2><ul><li><p>熟悉登录流程 请求地址 返回数据</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">// 登录<br>const <span class="hljs-keyword">user</span> <span class="hljs-title">= await</span> login(&#123;<br>  ...values,<br>  <span class="hljs-keyword">type</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/** 登录接口 POST /api/login/account */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">body: API.LoginParams, options?: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> request&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">LoginResult</span>&gt;(<span class="hljs-string">&#x27;/api/user/login&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">data</span>: body,<br>    ...(options || &#123;&#125;),<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>登录表单的校验逻辑(账号 密码)</p></li><li><p>登录校验  成功则提示登录成功   重定向到welcome页面</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 登录成功</span><br><span class="hljs-keyword">if</span> (user) &#123;<br>  <span class="hljs-keyword">const</span> defaultLoginSuccessMessage = <span class="hljs-string">&#x27;登录成功！&#x27;</span>;<br>  message.success(defaultLoginSuccessMessage);<br>  <span class="hljs-keyword">await</span> fetchUserInfo();<br>  <span class="hljs-comment">/** 此方法会跳转到 redirect 参数所在的位置 */</span><br>  <span class="hljs-keyword">if</span> (!history) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">const</span> &#123;query&#125; = history.location;<br>  <span class="hljs-keyword">const</span> &#123;redirect&#125; = query <span class="hljs-keyword">as</span> &#123;<br>    redirect: <span class="hljs-built_in">string</span>;<br>  &#125;;<br>  <span class="hljs-comment">// &#123; path: &#x27;/&#x27;, redirect: &#x27;/welcome&#x27; &#125;,</span><br>  <span class="hljs-comment">// 跳转到欢迎页面</span><br>  history.push(redirect || <span class="hljs-string">&#x27;/&#x27;</span>);<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>登录校验  失败则提示登录失败</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">const</span> defaultLoginFailureMessage = <span class="hljs-string">&#x27;登录失败，请重试！&#x27;</span>;<br>message.<span class="hljs-keyword">error</span>(defaultLoginFailureMessage);<br></code></pre></td></tr></table></figure></li></ul><h2 id="开发注册页面"><a href="#开发注册页面" class="headerlink" title="开发注册页面"></a>开发注册页面</h2><ul><li><p>登录页的复制粘贴</p></li><li><p>路由的理解  设置注册页的路由  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;注册&#x27;</span>, <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/user/register&#x27;</span>, component: <span class="hljs-string">&#x27;./user/Register&#x27;</span> &#125;,<br></code></pre></td></tr></table></figure></li><li><p>注册表单的校验逻辑(账号 密码)</p></li><li><p>熟悉注册流程  请求地址 返回数据</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-comment">// 发起请求</span><br><span class="hljs-keyword">const</span> id = <span class="hljs-keyword">await</span> <span class="hljs-keyword">register</span>(<span class="hljs-comment">&#123;</span><br><span class="hljs-comment">  ...values,</span><br><span class="hljs-comment">  type,</span><br><span class="hljs-comment">&#125;</span>)<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/** 注册接口 POST /api/login/account */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">body: API.LoginParams, options?: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> request&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">LoginResult</span>&gt;(<span class="hljs-string">&#x27;/api/user/register&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">data</span>: body,<br>    ...(options || &#123;&#125;),<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>解决访问注册页面   重定向到Login问题   业务逻辑   白名单内, 无需重定向到登录页</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//白名单内无需重定向</span><br><span class="hljs-keyword">if</span> (NO_NEED_LOGIN_WHITE_LIST.<span class="hljs-built_in">includes</span>(location.pathname))<br>  <span class="hljs-keyword">return</span>;<br><span class="hljs-comment">// 白名单外, 如果没有登录, 重定向到 login</span><br><span class="hljs-keyword">if</span> (!initialState?.currentUser) &#123;<br>  history.<span class="hljs-built_in">push</span>(loginPath);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注册成功  提示”注册成功”  跳转登录页面</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">history.<span class="hljs-built_in">push</span>(&#123;<br>  <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;user/login&#x27;</span>,<br>  query,<br>&#125;)<br>跳转到登录页面<br></code></pre></td></tr></table></figure></li><li><p>注册失败  提示”注册失败”   </p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">const</span> defaultLoginFailureMessage = <span class="hljs-string">&#x27;注册失败，请重试！&#x27;</span>;<br>message.<span class="hljs-keyword">error</span>(defaultLoginFailureMessage);<br></code></pre></td></tr></table></figure></li><li><p>“登录” 修改为 “注册”   (了解源码)</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">submitter=</span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable">  <span class="hljs-name">searchConfig:</span> &#123;</span><br><span class="hljs-template-variable">    submitText: <span class="hljs-string">&#x27;注册&#x27;</span></span><br><span class="hljs-template-variable">  &#125;</span><br><span class="hljs-template-variable">&#125;&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>添加注册校验  简单的逻辑  根据返回的数据  解构出密码和二次密码 判断二者是否相等</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">const</span> &#123;userPassword, checkPassword&#125; = values;<br><span class="hljs-comment">//校验</span><br><span class="hljs-keyword">if</span> (userPassword != checkPassword) &#123;<br>  message.<span class="hljs-keyword">error</span>(<span class="hljs-string">&#x27;两次输入的密码不一致!&#x27;</span>)<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加登录页跳转到注册页的链接”新用户注册”  仿照  “忘记密码”  </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;a<br>  href<span class="hljs-operator">=</span><span class="hljs-string">&quot;/user/register&quot;</span><br>  target<span class="hljs-operator">=</span><span class="hljs-string">&quot;_blank&quot;</span><br>  rel<span class="hljs-operator">=</span><span class="hljs-string">&quot;noreferrer&quot;</span><br>&gt;<br>  新用户注册<br>&lt;/a&gt;<br></code></pre></td></tr></table></figure></li></ul><h1 id="获取当前用户登录态"><a href="#获取当前用户登录态" class="headerlink" title="获取当前用户登录态"></a>获取当前用户登录态</h1><h2 id="后端实现接口"><a href="#后端实现接口" class="headerlink" title="后端实现接口"></a>后端实现接口</h2><p>返回当前用户的当前信息(重新查询过数据库)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/currentUser&quot;</span>)</span><br><span class="hljs-keyword">public</span> User getCurrentUser(HttpServletRequest request) &#123;<br>    User currentUser = (User) request.getSession().getAttribute(USER_LOGIN_STATE);<br>    <span class="hljs-keyword">if</span> (currentUser == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-built_in">Long</span> id = currentUser.getId();<br>    <span class="hljs-comment">// 查询数据库, 获取最新信息, 而非登录时记录的信息</span><br>    <span class="hljs-keyword">return</span> userService.getById(id);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="前端获取用户登录态"><a href="#前端获取用户登录态" class="headerlink" title="前端获取用户登录态"></a>前端获取用户登录态</h2><ul><li>app.tsx   前端服务入口   每次打开页面, 都会执行查询</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">// 查询用户登录态信息</span><br><span class="hljs-keyword">return</span> <span class="hljs-function">await <span class="hljs-title">queryCurrentUser</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">// 请求</span><br><span class="hljs-keyword">return</span> request&lt;API.CurrentUser&gt;(<span class="hljs-string">&#x27;/api/user/currentUser&#x27;</span>, &#123;<br>  method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  ...(<span class="hljs-keyword">options</span> || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>修改CurrentUser, 将返回的字段全部修改为对应数据库中的字段</li></ul><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">type CurrentUser = &#123;<br>  <span class="hljs-attribute">id?</span>: number;<br>  <span class="hljs-attribute">userAccount?</span>: string;<br>  <span class="hljs-attribute">username?</span>: string;<br>  <span class="hljs-attribute">avatarUtil?</span>: string;<br>  <span class="hljs-attribute">gender?</span>: string;<br>  <span class="hljs-attribute">phone?</span>: string;<br>  <span class="hljs-attribute">email?</span>: string;<br>  <span class="hljs-attribute">userStatus?</span>: string;<br>  <span class="hljs-attribute">userRole?</span>: string;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>设置白名单, 登录注册页面不会返回查询到的用户登录态, 其余页面会返回查询到的用户登录态</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 白名单内(登陆注册), 不返回用户登录态信息</span><br><span class="hljs-keyword">if</span> (NO_NEED_LOGIN_WHITE_LIST.includes(history.location.pathname)) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    fetchUserInfo,<br>    settings: defaultSettings,<br>  &#125;;<br>&#125;<br><span class="hljs-comment">// 登陆注册后, 页面返回用户登录态信息</span><br><span class="hljs-keyword">const</span> currentUser = await fetchUserInfo();<br><span class="hljs-keyword">return</span> &#123;<br>  fetchUserInfo,<br>  currentUser,<br>  settings: defaultSettings,<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="开发欢迎页面"><a href="#开发欢迎页面" class="headerlink" title="开发欢迎页面"></a>开发欢迎页面</h1><ul><li>设置欢迎页面的水印  头像</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">waterMarkProps: &#123;<br>  <span class="hljs-regexp">//</span> 添加水印<br>  content: initialState?.currentUser?.username, <span class="hljs-regexp">//</span> 以用户昵称作为水印<br>&#125;,<br></code></pre></td></tr></table></figure><ul><li>头像的话在/src/components/RightContext/AvatarDropdown.tsx里有个引用</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;Avatar size<span class="hljs-operator">=</span><span class="hljs-string">&quot;small&quot;</span> className<span class="hljs-operator">=</span>&#123;styles.avatar&#125; src<span class="hljs-operator">=</span>&#123;currentUser.avatarUrl&#125; alt<span class="hljs-operator">=</span><span class="hljs-string">&quot;avatar&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><ul><li>我这边头像刷新不出来是因为数据库里字段名写成avatarUtil了,一直没发现,改了正确的字段名以及映射实体类属性名  Mapper.xml 文件后 头像映射正常了</li></ul><h1 id="开发用户管理页面"><a href="#开发用户管理页面" class="headerlink" title="开发用户管理页面"></a>开发用户管理页面</h1><h2 id="新建一个管理界面"><a href="#新建一个管理界面" class="headerlink" title="新建一个管理界面"></a>新建一个管理界面</h2><ul><li><p>他奶奶的我这边出问题了</p></li><li><p>我新建了一个/Pages/Admin/UserManage    把Register文件夹复制过去打算修改, 结果它给我把Register的路由给替换了</p></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;注册&#x27;</span>, <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/user/register&#x27;</span>, component: <span class="hljs-string">&#x27;./user/UserManage&#x27;</span> &#125;,<br></code></pre></td></tr></table></figure><ul><li>然后前端直接挂掉了, 报错报了这个玩意儿  妈的找了半天 终于发现了 把路由改回来了</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">Cannot <span class="hljs-built_in">find</span> <span class="hljs-built_in">module</span> <span class="hljs-string">&#x27;D:/Project/星球项目/ClientCenter/myapp/src/pages/user/UserManage&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>给新增的用户管理页面加个路由</li></ul><p>​    path: ‘/admin/user-manager’    是访问路径</p><p>​    component: ‘./Admin/UserManage’    是资源路径</p><p>​    仿照下面的写就行了</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&#123;<br>  <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/admin&#x27;</span>,<br>  <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;管理页&#x27;</span>,<br>  icon: <span class="hljs-string">&#x27;crown&#x27;</span>,<br>  <span class="hljs-keyword">access</span>: <span class="hljs-string">&#x27;canAdmin&#x27;</span>,<br>  component: <span class="hljs-string">&#x27;./Admin&#x27;</span>,<br>  routes: [<br>  // 用户管理<br>    &#123; <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/admin/user-manager&#x27;</span>, <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;用户管理&#x27;</span>, icon: <span class="hljs-string">&#x27;smile&#x27;</span>, component: <span class="hljs-string">&#x27;./Admin/UserManage&#x27;</span> &#125;,<br>    &#123; <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/admin/sub-page&#x27;</span>, <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;二级管理页&#x27;</span>, icon: <span class="hljs-string">&#x27;smile&#x27;</span>, component: <span class="hljs-string">&#x27;./Welcome&#x27;</span> &#125;,<br>    &#123; component: <span class="hljs-string">&#x27;./404&#x27;</span> &#125;,<br>  ],<br>&#125;,<br></code></pre></td></tr></table></figure><ul><li>访问<a href="http://localhost:8000/admin/user-manager%E5%8F%91%E7%8E%B0%E6%97%A0%E6%9D%83%E8%AE%BF%E9%97%AE">http://localhost:8000/admin/user-manager发现无权访问</a>    好像存在访问权限    访问不到</li></ul><h4 id="项目全局入口"><a href="#项目全局入口" class="headerlink" title="项目全局入口"></a>项目全局入口</h4><h6 id="app-tsx是项目全局入口-里面包含了访问页面时-就会调用的方法-重定向到Login页-查询用户登录态"><a href="#app-tsx是项目全局入口-里面包含了访问页面时-就会调用的方法-重定向到Login页-查询用户登录态" class="headerlink" title="app.tsx是项目全局入口     里面包含了访问页面时, 就会调用的方法,     重定向到Login页   查询用户登录态"></a>app.tsx是项目全局入口     里面包含了访问页面时, 就会调用的方法,     <strong>重定向到Login页   查询用户登录态</strong></h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&#123;<br>  <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/admin&#x27;</span>,<br>  <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;管理页&#x27;</span>,<br>  icon: <span class="hljs-string">&#x27;crown&#x27;</span>,<br>  // 管理员权限校验<br>  <span class="hljs-keyword">access</span>: <span class="hljs-string">&#x27;canAdmin&#x27;</span>,<br>  component: <span class="hljs-string">&#x27;./Admin&#x27;</span>,<br>  routes: [<br>    &#123; <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/admin/user-manager&#x27;</span>, <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;用户管理&#x27;</span>, icon: <span class="hljs-string">&#x27;smile&#x27;</span>, component: <span class="hljs-string">&#x27;./Admin/UserManage&#x27;</span> &#125;,<br>    &#123; <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/admin/sub-page&#x27;</span>, <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;二级管理页&#x27;</span>, icon: <span class="hljs-string">&#x27;smile&#x27;</span>, component: <span class="hljs-string">&#x27;./Welcome&#x27;</span> &#125;,<br>    &#123; component: <span class="hljs-string">&#x27;./404&#x27;</span> &#125;,<br>  ],<br>&#125;,<br></code></pre></td></tr></table></figure><h6 id="看到那个access了吗-通过校验’canAdmin’的真假-判断是否具有管理员权限-这就是控制了这个路由的访问权限-怎么实现的"><a href="#看到那个access了吗-通过校验’canAdmin’的真假-判断是否具有管理员权限-这就是控制了这个路由的访问权限-怎么实现的" class="headerlink" title="看到那个access了吗  通过校验’canAdmin’的真假   判断是否具有管理员权限  这就是控制了这个路由的访问权限    怎么实现的?"></a>看到那个access了吗  通过校验’canAdmin’的真假   判断是否具有管理员权限  这就是控制了这个路由的访问权限    怎么实现的?</h6><h4 id="访问权限管理"><a href="#访问权限管理" class="headerlink" title="访问权限管理"></a>访问权限管理</h4><h6 id="access-ts是访问权限管理-在查询到用户登录态后-通过返回结果CurrentUser来校验-这段逻辑非常简单-我们可以修改为自己的逻辑"><a href="#access-ts是访问权限管理-在查询到用户登录态后-通过返回结果CurrentUser来校验-这段逻辑非常简单-我们可以修改为自己的逻辑" class="headerlink" title="access.ts是访问权限管理    在查询到用户登录态后    通过返回结果CurrentUser来校验    这段逻辑非常简单    我们可以修改为自己的逻辑"></a>access.ts是访问权限管理    在查询到用户登录态后    通过返回结果CurrentUser来校验    这段逻辑非常简单    我们可以修改为自己的逻辑</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">access</span>(<span class="hljs-params">initialState: &#123; currentUser?: API.CurrentUser &#125; | <span class="hljs-literal">undefined</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; currentUser &#125; = initialState ?? &#123;&#125;;<br>  <span class="hljs-comment">// 权限校验</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-comment">// 校验管理员权限</span><br>    <span class="hljs-attr">canAdmin</span>: currentUser &amp;&amp; currentUser.<span class="hljs-property">access</span> === <span class="hljs-string">&#x27;admin&#x27;</span><br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>修改访问路由的管理员权限的校验规则</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">// 校验管理员权限</span><br>canAdmin: currentUser <span class="hljs-meta">&amp;&amp; currentUser.userRole === 1,</span><br></code></pre></td></tr></table></figure><ul><li>找一个管理员账号登录,  发现<a href="http://localhost:8000/admin/user-manager%E9%A1%B5%E9%9D%A2%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E4%BA%86">http://localhost:8000/admin/user-manager页面可以访问了</a>  因为我们由管理员权限了</li></ul><h2 id="正确显示管理页面"><a href="#正确显示管理页面" class="headerlink" title="正确显示管理页面"></a>正确显示管理页面</h2><h6 id="原本的页面显示组件是-Admin-tsx"><a href="#原本的页面显示组件是-Admin-tsx" class="headerlink" title="原本的页面显示组件是 Admin.tsx"></a>原本的页面显示组件是 Admin.tsx</h6><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// 父路由</span><br>path: &#x27;/admin&#x27;,<br>name: &#x27;管理页&#x27;,<br><span class="hljs-attribute">icon</span>: <span class="hljs-string">&#x27;crown&#x27;</span>,<br><span class="hljs-attribute">component</span>: <span class="hljs-string">&#x27;./Admin&#x27;</span>,<br><span class="hljs-comment">// 子路由</span><br>    <span class="hljs-attribute">routes</span>: [<br>      &#123; <span class="hljs-attribute">path</span>: <span class="hljs-string">&#x27;/admin/user-manager&#x27;</span>, <span class="hljs-attribute">name</span>: <span class="hljs-string">&#x27;用户管理&#x27;</span>, <span class="hljs-attribute">icon</span>: <span class="hljs-string">&#x27;smile&#x27;</span>, <span class="hljs-attribute">component</span>: <span class="hljs-string">&#x27;./Admin/UserManage&#x27;</span> &#125;,<br>      &#123; component: &#x27;./404&#x27; &#125;,<br>    ],<br></code></pre></td></tr></table></figure><h6 id="组件里面这么写"><a href="#组件里面这么写" class="headerlink" title="组件里面这么写:"></a>组件里面这么写:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">onst <span class="hljs-title class_">Admin</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">FC</span> = <span class="hljs-function">(<span class="hljs-params">&#123;children&#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PageHeaderWrapper</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&#123;</span>&#x27; <span class="hljs-attr">这个页面只有</span> <span class="hljs-attr">admin</span> <span class="hljs-attr">权限才能查看</span>&#x27;&#125;&gt;</span></span><br><span class="language-xml">    // 展示子路由组件</span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">PageHeaderWrapper</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><h6 id="这样管理页面就能显示我们定义的组件-Admin-UserManage-index-tsx-了"><a href="#这样管理页面就能显示我们定义的组件-Admin-UserManage-index-tsx-了" class="headerlink" title="这样管理页面就能显示我们定义的组件 Admin/UserManage/index.tsx 了"></a>这样管理页面就能显示我们定义的组件 Admin/UserManage/index.tsx 了</h6><ul><li><p>我们上ProComponents的高级表格里找一个高级表格, 作为管理页面</p></li><li><p>直接找一个漂亮有用的, 粘贴到/UserManage/index.tsx里</p></li><li><p>接下来就是对该页面的改造了</p></li></ul><h2 id="改造新的组件-管理页面"><a href="#改造新的组件-管理页面" class="headerlink" title="改造新的组件(管理页面)"></a>改造新的组件(管理页面)</h2><h4 id="改造表格数据-数据如何展示"><a href="#改造表格数据-数据如何展示" class="headerlink" title="改造表格数据(数据如何展示)"></a>改造表格数据(数据如何展示)</h4><ul><li>改造返回数据类型 (API.CurrentUser) 和各列名</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//</span> <span class="hljs-string">返回的数据类型改造为Api.currentUser</span><br><span class="hljs-attr">const columns:</span> <span class="hljs-string">ProColumns&lt;API.CurrentUser&gt;[]</span> <span class="hljs-string">=</span> [<br>  &#123;<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;账号&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;userAccount&#x27;</span>,<br>    <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;昵称&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;username&#x27;</span>,<br>    <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;头像&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;avatarUrl&#x27;</span>,<br>    <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;性别&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;gender&#x27;</span>,<br>    <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;电话&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;phone&#x27;</span>,<br>    <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;邮件&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;email&#x27;</span>,<br>    <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;角色&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;userRole&#x27;</span>,<br>    <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;createTime&#x27;</span>,<br>    <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">disable:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;状态&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;state&#x27;</span>,<br>    <span class="hljs-attr">filters:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">onFilter:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">ellipsis:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">valueType:</span> <span class="hljs-string">&#x27;select&#x27;</span>,<br>    <span class="hljs-attr">valueEnum:</span> &#123;<br>      <span class="hljs-attr">all:</span> &#123;<span class="hljs-attr">text:</span> <span class="hljs-string">&#x27;超长&#x27;</span><span class="hljs-string">.repeat(50)</span>&#125;,<br>      <span class="hljs-attr">open:</span> &#123;<br>        <span class="hljs-attr">text:</span> <span class="hljs-string">&#x27;未解决&#x27;</span>,<br>        <span class="hljs-attr">status:</span> <span class="hljs-string">&#x27;Error&#x27;</span>,<br>      &#125;,<br>      <span class="hljs-attr">closed:</span> &#123;<br>        <span class="hljs-attr">text:</span> <span class="hljs-string">&#x27;已解决&#x27;</span>,<br>        <span class="hljs-attr">status:</span> <span class="hljs-string">&#x27;Success&#x27;</span>,<br>        <span class="hljs-attr">disabled:</span> <span class="hljs-literal">true</span>,<br>      &#125;,<br>      <span class="hljs-attr">processing:</span> &#123;<br>        <span class="hljs-attr">text:</span> <span class="hljs-string">&#x27;解决中&#x27;</span>,<br>        <span class="hljs-attr">status:</span> <span class="hljs-string">&#x27;Processing&#x27;</span>,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br><br>]<span class="hljs-string">;</span><br></code></pre></td></tr></table></figure><h4 id="改造访问路径-数据从何而来"><a href="#改造访问路径-数据从何而来" class="headerlink" title="改造访问路径(数据从何而来)"></a>改造访问路径(数据从何而来)</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade">columns=&#123;columns&#125;<br>actionRef=&#123;actionRef&#125;<br>cardBordered<br>request=&#123;async (params = &#123;&#125;, <span class="hljs-built_in">sort</span>, <span class="hljs-built_in">filter</span>) =&gt; &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sort</span>, <span class="hljs-built_in">filter</span>);<br>  <span class="hljs-comment">// 返回userList</span><br>  <span class="hljs-comment">// 自定义函数</span><br>  const userList = await searchUsers();<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">data</span>: userList<br>  &#125;<br>&#125;&#125;<br></code></pre></td></tr></table></figure><ul><li>在api.ts下编写自定义函数searchUsers, 并设置访问路径</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/** 此处后端没有提供注释 GET /api/notices */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">searchUsers</span>(<span class="hljs-params">options?: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;</span>) &#123;<br><span class="hljs-comment">// 返回数据格式为API.CurrentUser</span><br>  <span class="hljs-keyword">return</span> request&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">CurrentUser</span>&gt;(<span class="hljs-string">&#x27;/api/user/search&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    ...(options || &#123;&#125;),<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>后端返回所有用户数据, 并展示在表格中 展示成功了</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询用户</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param username 用户名</span><br><span class="hljs-comment"> * @return 查到的用户</span><br><span class="hljs-comment"> */</span><br>@<span class="hljs-constructor">GetMapping(<span class="hljs-string">&quot;/search&quot;</span>)</span><br>public List&lt;User&gt; user<span class="hljs-constructor">Search(String <span class="hljs-params">username</span>, HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br>    <span class="hljs-comment">// 1.校验权限</span><br>    <span class="hljs-keyword">if</span> (!is<span class="hljs-constructor">Admin(<span class="hljs-params">request</span>)</span>)<br>        return <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>    <span class="hljs-comment">// 2.判空, 默认查询全部</span><br>    QueryWrapper&lt;User&gt; qw = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;<span class="hljs-literal">()</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">NotBlank(<span class="hljs-params">username</span>)</span>)<br>        qw.like(<span class="hljs-string">&quot;username&quot;</span>, username);<br>    <span class="hljs-comment">// 3.查询</span><br>    List&lt;User&gt; userList = userService.<span class="hljs-built_in">list</span>(qw);<br>    <span class="hljs-comment">// 4.返回脱敏的用户信息</span><br>    return userList.stream<span class="hljs-literal">()</span>.map(user -&gt; userService.get<span class="hljs-constructor">SafetyUser(<span class="hljs-params">user</span>)</span>).collect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collectors</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">List()</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="项目全局命名空间-把一组TS类型全部定义到了这个命名空间下-即定义了一组返回数据对象-取的时候就不需要import了-直接API-TS类型就可以取到"><a href="#项目全局命名空间-把一组TS类型全部定义到了这个命名空间下-即定义了一组返回数据对象-取的时候就不需要import了-直接API-TS类型就可以取到" class="headerlink" title="项目全局命名空间, 把一组TS类型全部定义到了这个命名空间下, 即定义了一组返回数据对象, 取的时候就不需要import了, 直接API.TS类型就可以取到"></a><em><strong>项目全局命名空间</strong></em>, <em>把一组TS类型全部定义到了这个命名空间下, 即定义了一组返回数据对象, 取的时候就不需要import了, 直接API.TS类型就可以取到</em></h6><h6 id="src-services-ant-design-pro-typings-d-ts"><a href="#src-services-ant-design-pro-typings-d-ts" class="headerlink" title="src/services/ant-design-pro/typings.d.ts"></a>src/services/ant-design-pro/typings.d.ts</h6><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs lasso">declare namespace API &#123;<br>  <span class="hljs-keyword">type</span> CurrentUser = &#123;<br>  <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> LoginResult = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> RegisterResult = number;<br><br>  <span class="hljs-keyword">type</span> PageParams = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> RuleListItem = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> RuleList = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> FakeCaptcha = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> LoginParams = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> RegisterParams = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> ErrorResponse = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> NoticeIconList = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> NoticeIconItemType = <span class="hljs-string">&#x27;notification&#x27;</span> | <span class="hljs-string">&#x27;message&#x27;</span> | <span class="hljs-string">&#x27;event&#x27;</span>;<br><br>  <span class="hljs-keyword">type</span> NoticeIconItem = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="src-services-ant-design-pro-api-ts-这里定义了许多请求接口-根据请求地址-请求方式发出请求"><a href="#src-services-ant-design-pro-api-ts-这里定义了许多请求接口-根据请求地址-请求方式发出请求" class="headerlink" title="src/services/ant-design-pro/api.ts    这里定义了许多请求接口    根据请求地址 请求方式发出请求"></a>src/services/ant-design-pro/api.ts    <em>这里定义了许多请求接口</em>    <em>根据请求地址</em> 请求方式发出请求</h6><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123;request&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="修改表格显示细节"><a href="#修改表格显示细节" class="headerlink" title="修改表格显示细节"></a>修改表格显示细节</h2><ul><li><p>通过columns定义表格有哪些列</p></li><li><p>column属性</p></li></ul><p>​        <em><strong>dataIndex    对应返回数据对象的属性</strong></em></p><p>​        <em><strong>title    表格列名</strong></em></p><p>​        <em><strong>copyable    是否允许复制</strong></em></p><p>​        <em><strong>ellipsis    是否允许缩略</strong></em></p><p>​        <em><strong>valueType    用于声明这一列的类型</strong></em></p><ul><li>头像</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;头像&#x27;</span>,<br>  <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;avatarUrl&#x27;</span>,<br>  <span class="hljs-attr">copyable</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.avatarUrl&#125;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;100&#125;/</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;,<br></code></pre></td></tr></table></figure><ul><li>性别    角色    状态</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br>  title: <span class="hljs-string">&#x27;性别&#x27;</span>,<br>  dataIndex: <span class="hljs-string">&#x27;gender&#x27;</span>,<br>  valueType: <span class="hljs-string">&#x27;select&#x27;</span>,<br>  valueEnum: &#123;<br>    <span class="hljs-number">0</span>: &#123;<br>      text: <span class="hljs-string">&#x27;女&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-number">1</span>: &#123;<br>      text: <span class="hljs-string">&#x27;男&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br>  title: <span class="hljs-string">&#x27;角色&#x27;</span>,<br>  dataIndex: <span class="hljs-string">&#x27;userRole&#x27;</span>,<br>  valueType: <span class="hljs-string">&#x27;select&#x27;</span>,<br>  valueEnum: &#123;<br>    <span class="hljs-number">0</span>: &#123;<br>      text: <span class="hljs-string">&#x27;普通用户&#x27;</span>,<br>      status: <span class="hljs-string">&#x27;Default&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-number">1</span>: &#123;<br>      text: <span class="hljs-string">&#x27;管理员&#x27;</span>,<br>      status: <span class="hljs-string">&#x27;Success&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br>  title: <span class="hljs-string">&#x27;状态&#x27;</span>,<br>  dataIndex: <span class="hljs-string">&#x27;userStatus&#x27;</span>,<br>  valueType: <span class="hljs-string">&#x27;select&#x27;</span>,<br>  valueEnum: &#123;<br>    <span class="hljs-number">0</span>: &#123;<br>      text: <span class="hljs-string">&#x27;正常&#x27;</span>,<br>      status: <span class="hljs-string">&#x27;Success&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-number">1</span>: &#123;<br>      text: <span class="hljs-string">&#x27;异常&#x27;</span>,<br>      status: <span class="hljs-string">&#x27;Error&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><h1 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h1><h2 id="新增注销功能"><a href="#新增注销功能" class="headerlink" title="新增注销功能"></a>新增注销功能</h2><ul><li>service层新增userLogout</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> user<span class="hljs-constructor">Logout(HttpServletRequest <span class="hljs-params">request</span>)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 用户注销</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">userLogout</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>   <span class="hljs-comment">// 移除session</span><br>       request.getSession().removeAttribute(USER_LOGIN_STATE);<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li>controller层新增userLogout</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 用户登录</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> request request</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> int</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@PostMapping(<span class="hljs-string">&quot;/logout&quot;</span>)</span><br>  <span class="hljs-keyword">public</span> Integer userLogout(HttpServletRequest request) &#123;<br>      <span class="hljs-comment">//controller对参数的校验</span><br>      <span class="hljs-keyword">if</span> (request == <span class="hljs-literal">null</span>)<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>      <span class="hljs-keyword">return</span> userService.userLogout(request);<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li>前端src/RightContent/AvatarDropdown.tsx下有注销功能</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 退出登录，并且将当前的 url 保存</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> loginOut = async () =&gt; &#123;<br>  await outLogin();<br>  <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">query</span> = &#123;&#125;, <span class="hljs-keyword">search</span>, pathname&#125; = history.location;<br>  <span class="hljs-keyword">const</span> &#123;redirect&#125; = <span class="hljs-keyword">query</span>;<br>  <span class="hljs-comment">// <span class="hljs-doctag">Note:</span> There may be security issues, please note</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">window</span>.location.pathname !== &#x27;/user/login&#x27; &amp;&amp; !redirect) &#123;<br>    history.<span class="hljs-keyword">replace</span>(&#123;<br>      pathname: &#x27;/user/login&#x27;,<br>      <span class="hljs-keyword">search</span>: stringify(&#123;<br>        redirect: pathname + <span class="hljs-keyword">search</span>,<br>      &#125;),<br>    &#125;);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>修改注销接口 请求路径 </li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/** 退出登录接口 POST /api/user/logout */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">outLogin</span>(<span class="hljs-params">options?: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> request&lt;<span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">any</span>&gt;&gt;(<span class="hljs-string">&#x27;/api/user/logout&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    ...(options || &#123;&#125;),<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注销功能优化完毕"><a href="#注销功能优化完毕" class="headerlink" title="注销功能优化完毕"></a>注销功能优化完毕</h4><h2 id="用户必填信息新增星球编号"><a href="#用户必填信息新增星球编号" class="headerlink" title="用户必填信息新增星球编号"></a>用户必填信息新增星球编号</h2><ul><li>user表新增字段planet_code</li><li>重新生成对应实体类 domain    Mapper.xml  </li><li>注册接收类新增planetCode</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe">@Data<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRegisterRequest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> userAccount;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> userPassword;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> checkPassword;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> planetCode;<br>&#125;<br></code></pre></td></tr></table></figure><p>service层</p><ul><li>注册校验新增</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">userRegister</span><span class="hljs-params">(<span class="hljs-type">String</span> userAccount, <span class="hljs-type">String</span> userPassword, <span class="hljs-type">String</span> checkPassword, <span class="hljs-type">String</span> planetCode)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 1.6.星球编号不能超过5位</span><br>       <span class="hljs-keyword">if</span> (planetCode.<span class="hljs-built_in">length</span>() &gt; <span class="hljs-number">5</span>)<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl">// <span class="hljs-number">1.8</span>.星球编号不能重复<br>       QueryWrapper&lt;User&gt; pc_lqw = new QueryWrapper&lt;&gt;();<br>       pc_lqw.e<span class="hljs-string">q(&quot;planet_code&quot;, planetCode)</span>;<br>       Long pc_count = userMapper.selectCount(pc_lqw);<br>       <span class="hljs-keyword">if</span> (pc_count &gt; <span class="hljs-number">0</span>)<br>           <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><ul><li>用户信息脱敏新增</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">safetyUser.set<span class="hljs-constructor">PlanetCode(<span class="hljs-params">originUser</span>.<span class="hljs-params">getPlanetCode</span>()</span>);<br></code></pre></td></tr></table></figure><p>controller层</p><ul><li>controller参数校验</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//controller对参数的校验</span><br><span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>)<br>    return null;<br></code></pre></td></tr></table></figure><ul><li>注册页面新增星球编号填写和校验</li></ul><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ProFormText</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;planetCode&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">fieldProps</span>=</span></span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable">    <span class="hljs-name">size:</span> <span class="hljs-string">&#x27;large&#x27;</span>,</span><br><span class="hljs-template-variable">    prefix: &lt;LockOutlined <span class="hljs-attr">className</span>=&#123;styles.prefixIcon&#125;/&gt;,</span><br><span class="hljs-template-variable">  &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">请输入星球编号</span>&#x27;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">rules</span>=<span class="hljs-string">&#123;[</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &#123;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">required:</span> <span class="hljs-attr">true</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">message:</span> &#x27;<span class="hljs-attr">星球编号是必填项</span>！&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">    &#125;,</span></span><br><span class="hljs-tag"><span class="language-xml">    &#123;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">max:</span> <span class="hljs-attr">5</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">type:</span> &#x27;<span class="hljs-attr">string</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">message:</span> &#x27;<span class="hljs-attr">长度不能大于5位</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">    &#125;,</span></span><br><span class="hljs-tag"><span class="language-xml">  ]&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">/&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>测试类新增planetCode</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void user<span class="hljs-constructor">Register()</span> &#123;<br>    String userAccount = <span class="hljs-string">&quot;memory&quot;</span>;<br>    String userPassword = <span class="hljs-string">&quot;&quot;</span>;<br>    String checkPassword = <span class="hljs-string">&quot;123456&quot;</span>;<br>    String planetCode = <span class="hljs-string">&quot;17265&quot;</span>;<br><br>    long result = userService.user<span class="hljs-constructor">Register(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Assertions</span>.</span></span><span class="hljs-keyword">assert</span><span class="hljs-constructor">Equals(-1, <span class="hljs-params">result</span>)</span>;<br>    userAccount = <span class="hljs-string">&quot;mem&quot;</span>;<br>    result = userService.user<span class="hljs-constructor">Register(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Assertions</span>.</span></span><span class="hljs-keyword">assert</span><span class="hljs-constructor">Equals(-1, <span class="hljs-params">result</span>)</span>;<br>    userPassword = <span class="hljs-string">&quot;123456&quot;</span>;<br>    result = userService.user<span class="hljs-constructor">Register(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Assertions</span>.</span></span><span class="hljs-keyword">assert</span><span class="hljs-constructor">Equals(-1, <span class="hljs-params">result</span>)</span>;<br>    userAccount = <span class="hljs-string">&quot;me mory&quot;</span>;<br>    userPassword = <span class="hljs-string">&quot;12345678&quot;</span>;<br>    result = userService.user<span class="hljs-constructor">Register(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Assertions</span>.</span></span><span class="hljs-keyword">assert</span><span class="hljs-constructor">Equals(-1, <span class="hljs-params">result</span>)</span>;<br>    userAccount = <span class="hljs-string">&quot;me mory&quot;</span>;<br>    checkPassword = <span class="hljs-string">&quot;12345678&quot;</span>;<br>    result = userService.user<span class="hljs-constructor">Register(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Assertions</span>.</span></span><span class="hljs-keyword">assert</span><span class="hljs-constructor">Equals(-1, <span class="hljs-params">result</span>)</span>;<br>    userAccount = <span class="hljs-string">&quot;memory4&quot;</span>;<br>    result = userService.user<span class="hljs-constructor">Register(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Assertions</span>.</span></span><span class="hljs-keyword">assert</span><span class="hljs-constructor">True(<span class="hljs-params">result</span> &gt; 0)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>currentUser新增planetCode</li></ul><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">type CurrentUser = &#123;<br>  <span class="hljs-attribute">id?</span>: number;<br>  <span class="hljs-attribute">userAccount?</span>: string;<br>  <span class="hljs-attribute">username?</span>: string;<br>  <span class="hljs-attribute">avatarUrl?</span>: string;<br>  <span class="hljs-attribute">gender?</span>: string;<br>  <span class="hljs-attribute">phone?</span>: string;<br>  <span class="hljs-attribute">email?</span>: string;<br>  <span class="hljs-attribute">createTime?</span>: Date;<br>  <span class="hljs-attribute">userStatus?</span>: string;<br>  <span class="hljs-attribute">userRole?</span>: number;<br>  <span class="hljs-attribute">planetCode?</span>: string;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>管理页用户信息新增planetCode</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;<br>  <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;星球编号&#x27;</span>,<br>  <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;planetCode&#x27;</span>,<br>  <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>&#125;<span class="hljs-string">,</span><br></code></pre></td></tr></table></figure><h4 id="新增星球编号注册必填项完成-管理页用户信息正常显示"><a href="#新增星球编号注册必填项完成-管理页用户信息正常显示" class="headerlink" title="新增星球编号注册必填项完成, 管理页用户信息正常显示"></a>新增星球编号注册必填项完成, 管理页用户信息正常显示</h4><h2 id="返回通用对象"><a href="#返回通用对象" class="headerlink" title="返回通用对象"></a>返回通用对象</h2><ul><li><h5 id="自定义通用返回对象-BaseResponse"><a href="#自定义通用返回对象-BaseResponse" class="headerlink" title="自定义通用返回对象 - BaseResponse"></a>自定义通用返回对象 - BaseResponse</h5></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 状态码</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br>  <span class="hljs-comment">// 数据</span><br>  <span class="hljs-keyword">private</span> T data;<br>  <span class="hljs-comment">// 信息</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> message;<br>  <span class="hljs-comment">// 描述</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> description;<br></code></pre></td></tr></table></figure><ul><li><h5 id="通用返回对象多种构造器"><a href="#通用返回对象多种构造器" class="headerlink" title="通用返回对象多种构造器"></a>通用返回对象多种构造器</h5></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> BaseResponse(int code, T <span class="hljs-keyword">data</span>, String message, String description) &#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span> = <span class="hljs-keyword">data</span>;<br>        <span class="hljs-keyword">this</span>.message = message;<br>        <span class="hljs-keyword">this</span>.description = description;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> BaseResponse(int code, String message, String description) &#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span> = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">this</span>.message = message;<br>        <span class="hljs-keyword">this</span>.description = description;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> BaseResponse(ErrorCode errorCode) &#123;<br>        <span class="hljs-keyword">this</span>.code = errorCode.getCode();<br>        <span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span> = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">this</span>.message = errorCode.getMessage();<br>        <span class="hljs-keyword">this</span>.description = errorCode.getDescription();<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="通用返回对象添加getter-setter方法"><a href="#通用返回对象添加getter-setter方法" class="headerlink" title="通用返回对象添加getter, setter方法"></a>通用返回对象添加getter, setter方法</h5></li><li><h5 id="这一步一定不要忘记啊-我就因为没加这俩方法-测试登录注册就报406错误"><a href="#这一步一定不要忘记啊-我就因为没加这俩方法-测试登录注册就报406错误" class="headerlink" title="这一步一定不要忘记啊, 我就因为没加这俩方法, 测试登录注册就报406错误"></a>这一步一定不要忘记啊, 我就因为没加这俩方法, 测试登录注册就报406错误</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> int <span class="hljs-title function_">getCode</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getMessage</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getDescription</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setCode</span>(<span class="hljs-params">int code</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">code</span> = code;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setData</span>(<span class="hljs-params">T data</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = data;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setMessage</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> message</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = message;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setDescription</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> description</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">description</span> = description;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="返回成功的话-就是返回成功状态-即返回状态码-数据-“ok”-message-“”-description"><a href="#返回成功的话-就是返回成功状态-即返回状态码-数据-“ok”-message-“”-description" class="headerlink" title="返回成功的话, 就是返回成功状态, 即返回状态码 + 数据 + “ok”(message) + “”(description)"></a>返回成功的话, 就是返回成功状态, 即返回状态码 + 数据 + “ok”(message) + “”(description)</h4><ul><li><h5 id="封装返回成功状态下通用对象的方法"><a href="#封装返回成功状态下通用对象的方法" class="headerlink" title="封装返回成功状态下通用对象的方法"></a>封装返回成功状态下通用对象的方法</h5></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ResultUtils</span> &#123;<br>    <span class="hljs-comment">// 请求成功</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-title">BaseResponse</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-title">success</span>(<span class="hljs-params">T data</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BaseResponse&lt;&gt;(<span class="hljs-number">0</span>, data, <span class="hljs-string">&quot;ok&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="返回失败的话-就是返回失败状态-即返回状态码-null-data-message-description"><a href="#返回失败的话-就是返回失败状态-即返回状态码-null-data-message-description" class="headerlink" title="返回失败的话, 就是返回失败状态, 即返回状态码 + null(data) + message + description"></a>返回失败的话, 就是返回失败状态, 即返回状态码 + null(data) + message + description</h4><h4 id="实现思路-这里我们打算封装自定义异常类和全局异常处理器-当业务中出现错误-不会返回失败结果-而是抛出相应的异常-并由全局异常处理器捕获-再由全局异常处理器来返回对应失败状态"><a href="#实现思路-这里我们打算封装自定义异常类和全局异常处理器-当业务中出现错误-不会返回失败结果-而是抛出相应的异常-并由全局异常处理器捕获-再由全局异常处理器来返回对应失败状态" class="headerlink" title="实现思路: 这里我们打算封装自定义异常类和全局异常处理器, 当业务中出现错误, 不会返回失败结果, 而是抛出相应的异常, 并由全局异常处理器捕获, 再由全局异常处理器来返回对应失败状态"></a>实现思路: 这里我们打算封装自定义异常类和全局异常处理器, 当业务中出现错误, 不会返回失败结果, 而是抛出相应的异常, 并由全局异常处理器捕获, 再由全局异常处理器来返回对应失败状态</h4><h2 id="封装自定义异常BusinessException"><a href="#封装自定义异常BusinessException" class="headerlink" title="封装自定义异常BusinessException"></a>封装自定义异常BusinessException</h2><h5 id="自定义异常成员属性"><a href="#自定义异常成员属性" class="headerlink" title="自定义异常成员属性"></a>自定义异常成员属性</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BusinessException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span> </span>&#123;<br> <span class="hljs-comment">// 状态码</span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> int code;<br> <span class="hljs-comment">// 异常描述</span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> description;<br>................<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="这里我们会发现-自定义异常里没有定义message属性-这是因为自定义异常继承了RuntimeException-在执行构造方法时-执行super-message-即可设置自定义的异常信息-再通过e-getMessage-方法来获取异常信息"><a href="#这里我们会发现-自定义异常里没有定义message属性-这是因为自定义异常继承了RuntimeException-在执行构造方法时-执行super-message-即可设置自定义的异常信息-再通过e-getMessage-方法来获取异常信息" class="headerlink" title="这里我们会发现, 自定义异常里没有定义message属性. 这是因为自定义异常继承了RuntimeException, 在执行构造方法时, 执行super(message)即可设置自定义的异常信息, 再通过e.getMessage()方法来获取异常信息"></a>这里我们会发现, 自定义异常里没有定义message属性. 这是因为自定义异常继承了RuntimeException, 在执行构造方法时, 执行super(message)即可设置自定义的异常信息, 再通过e.getMessage()方法来获取异常信息</h5></li><li><h5 id="自定义异常多种构造器"><a href="#自定义异常多种构造器" class="headerlink" title="自定义异常多种构造器"></a>自定义异常多种构造器</h5></li><li><h5 id="局部业务代码下自定义的异常信息"><a href="#局部业务代码下自定义的异常信息" class="headerlink" title="局部业务代码下自定义的异常信息"></a>局部业务代码下自定义的异常信息</h5></li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 局部业务代码下自定义的异常信息</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message     异常信息</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> code        异常状态码</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> description 异常描述</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BusinessException</span><span class="hljs-params">(String message, <span class="hljs-keyword">int</span> code, String description)</span> </span>&#123;<br>      <span class="hljs-keyword">super</span>(message);<br>      <span class="hljs-keyword">this</span>.code = code;<br>      <span class="hljs-keyword">this</span>.description = description;<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="common-ErrorCode下封装的全局自定义异常信息"><a href="#common-ErrorCode下封装的全局自定义异常信息" class="headerlink" title="common/ErrorCode下封装的全局自定义异常信息"></a>common/ErrorCode下封装的全局自定义异常信息</h5></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * common/ErrorCode下封装的全局自定义异常信息</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> errorCode 全局自定义异常</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> BusinessException(ErrorCode errorCode) &#123;<br>       <span class="hljs-keyword">super</span>(errorCode.getMessage());<br>       <span class="hljs-keyword">this</span>.code = errorCode.getCode();<br>       <span class="hljs-keyword">this</span>.description = errorCode.getDescription();<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="补充-封装全局自定义异常信息-ErrorCode-枚举类"><a href="#补充-封装全局自定义异常信息-ErrorCode-枚举类" class="headerlink" title="补充: 封装全局自定义异常信息 ErrorCode (枚举类)"></a>补充: 封装全局自定义异常信息 ErrorCode (枚举类)</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> enum ErrorCode &#123;<br><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="枚举值-需持续完善更新"><a href="#枚举值-需持续完善更新" class="headerlink" title="枚举值 (需持续完善更新)"></a>枚举值 (需持续完善更新)</h5></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">PARMS_ERROR</span>(<span class="hljs-number">40000</span>, <span class="hljs-string">&quot;请求参数错误&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>  <span class="hljs-attribute">NULL_ERROR</span>(<span class="hljs-number">40001</span>, <span class="hljs-string">&quot;请求数据为空&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>  <span class="hljs-attribute">UPDATE_ERROR</span>(<span class="hljs-number">40002</span>, <span class="hljs-string">&quot;操作数据库失败&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>  <span class="hljs-attribute">NOT_LOGIN</span>(<span class="hljs-number">40101</span>, <span class="hljs-string">&quot;未注册&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>  <span class="hljs-attribute">NOT_REGISTER</span>(<span class="hljs-number">40102</span>, <span class="hljs-string">&quot;未登录&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>  <span class="hljs-attribute">NO_AUTH</span>(<span class="hljs-number">40103</span>, <span class="hljs-string">&quot;无权限&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>  <span class="hljs-attribute">SYSTEM_ERROR</span>(<span class="hljs-number">10000</span>, <span class="hljs-string">&quot;系统内部异常&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><h5 id="成员属性"><a href="#成员属性" class="headerlink" title="成员属性"></a>成员属性</h5></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 状态码</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> code;<br>   <span class="hljs-comment">// 状态码信息</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> message;<br>   <span class="hljs-comment">// 状态码描述</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> description;<br></code></pre></td></tr></table></figure><ul><li><h5 id="构造器和-getter-方法"><a href="#构造器和-getter-方法" class="headerlink" title="构造器和 getter 方法"></a>构造器和 getter 方法</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">ErrorCode</span>(int code, <span class="hljs-title class_">String</span> message, <span class="hljs-title class_">String</span> description) &#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">code</span> = code;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = message;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">description</span> = description;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> int <span class="hljs-title function_">getCode</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">return</span> code;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getMessage</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">return</span> message;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getDescription</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">return</span> description;<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="自定义异常-getter-方法"><a href="#自定义异常-getter-方法" class="headerlink" title="自定义异常 getter 方法"></a>自定义异常 getter 方法</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getCode</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br>    <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDescription</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;    <br></code></pre></td></tr></table></figure><h2 id="封装全局异常处理器"><a href="#封装全局异常处理器" class="headerlink" title="封装全局异常处理器"></a>封装全局异常处理器</h2><h5 id=""><a href="#" class="headerlink" title=""></a><!--熟悉全局异常处理器的写法和实现过程, 了解其实现原理--></h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RestControllerAdvice</span><br><span class="hljs-variable">@Slf4j</span><br>public class GlobalExceptionHandler &#123;<br>....................<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="捕获局部业务代码下的自定义异常信息"><a href="#捕获局部业务代码下的自定义异常信息" class="headerlink" title="捕获局部业务代码下的自定义异常信息"></a>捕获局部业务代码下的自定义异常信息</h5></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 捕获局部业务代码下的自定义异常信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param e 自定义异常</span><br><span class="hljs-comment">     * @return 封装返回失败状态</span><br><span class="hljs-comment">     */</span><br>    @<span class="hljs-constructor">ExceptionHandler(BusinessException.<span class="hljs-params">class</span>)</span><br>    public BaseResponse business<span class="hljs-constructor">ExceptionHandler(BusinessException <span class="hljs-params">e</span>)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;businessException: &quot;</span> + e.get<span class="hljs-constructor">Message()</span>, e);<br>        log.info(<span class="hljs-string">&quot;&quot;</span> + e.get<span class="hljs-constructor">Code()</span>);<br>        log.info(e.get<span class="hljs-constructor">Message()</span>);<br>        log.info(e.get<span class="hljs-constructor">Description()</span>);<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResultUtils</span>.</span></span>error(e.get<span class="hljs-constructor">Code()</span>, e.get<span class="hljs-constructor">Message()</span>, e.get<span class="hljs-constructor">Description()</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="捕获common-ErrorCode下封装的全局自定义异常信息"><a href="#捕获common-ErrorCode下封装的全局自定义异常信息" class="headerlink" title="捕获common/ErrorCode下封装的全局自定义异常信息"></a>捕获common/ErrorCode下封装的全局自定义异常信息</h5></li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 捕获common/ErrorCode下封装的全局自定义异常信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 自定义异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 封装返回失败状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//捕获自定义的异常2</span><br>    <span class="hljs-meta">@ExceptionHandler</span>(RuntimeException.class)<br>    <span class="hljs-keyword">public</span> <span class="hljs-function">BaseResponse <span class="hljs-title">runtimeExceptionHandler</span><span class="hljs-params">(BusinessException e)</span> </span>&#123;<br>        log.<span class="hljs-keyword">error</span>(<span class="hljs-string">&quot;runtimeException&quot;</span>, e);<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> ResultUtils.<span class="hljs-title">error</span><span class="hljs-params">(ErrorCode.SYSTEM_ERROR)</span></span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="修改后端返回给前端的数据-全部更新为直接返回通用对象-成功状态-或抛出业务异常再由全局异常处理器返回通用对象-失败状态"><a href="#修改后端返回给前端的数据-全部更新为直接返回通用对象-成功状态-或抛出业务异常再由全局异常处理器返回通用对象-失败状态" class="headerlink" title="修改后端返回给前端的数据, 全部更新为直接返回通用对象(成功状态)或抛出业务异常再由全局异常处理器返回通用对象(失败状态)"></a>修改后端返回给前端的数据, 全部更新为直接返回通用对象(成功状态)或抛出业务异常再由全局异常处理器返回通用对象(失败状态)</h2><ul><li><h5 id="成功状态-controller层"><a href="#成功状态-controller层" class="headerlink" title="成功状态 (controller层)"></a>成功状态 (controller层)</h5></li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户注册</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param userRegisterRequest 注册信息封装类</span><br><span class="hljs-comment">     * @return id</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;Long&gt; userRegister(@RequestBody UserRegisterRequest userRegisterRequest) &#123;<br>    <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>    <span class="hljs-keyword">return</span> ResultUtils.success(userRegister);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户登录</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param userLoginRequest 登录信息封装</span><br><span class="hljs-comment">     * @param request          request</span><br><span class="hljs-comment">     * @return User</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-variable">@PostMapping</span>(<span class="hljs-string">&quot;/login&quot;</span>)<br>    public BaseResponse&lt;User&gt; <span class="hljs-built_in">userLogin</span>(<span class="hljs-variable">@RequestBody</span> UserLoginRequest userLoginRequest, HttpServletRequest request) &#123;<br>        .........................<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">ResultUtils</span><span class="hljs-selector-class">.success</span>(userLogin);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户登录</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param request request</span><br><span class="hljs-comment">     * @return int</span><br><span class="hljs-comment">     */</span><br>    @PostMapping(<span class="hljs-string">&quot;/logout&quot;</span>)<br>    <span class="hljs-keyword">public</span> BaseResponse&lt;<span class="hljs-built_in">String</span>&gt; userLogout(HttpServletRequest request) &#123;<br>        <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br>        <span class="hljs-keyword">return</span> ResultUtils.success(userLogout);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取当前用户登录态</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param request request</span><br><span class="hljs-comment">     * @return 当前用户信息</span><br><span class="hljs-comment">     */</span><br>    @GetMapping(<span class="hljs-string">&quot;/currentUser&quot;</span>)<br>    <span class="hljs-keyword">public</span> BaseResponse&lt;User&gt; getCurrentUser(HttpServletRequest request) &#123;<br>        <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>        <span class="hljs-keyword">return</span> ResultUtils.success(user);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询用户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param username 用户名</span><br><span class="hljs-comment">     * @return 查到的用户</span><br><span class="hljs-comment">     */</span><br>    @GetMapping(<span class="hljs-string">&quot;/search&quot;</span>)<br>    <span class="hljs-keyword">public</span> BaseResponse&lt;<span class="hljs-built_in">List</span>&lt;User&gt;&gt; userSearch(<span class="hljs-built_in">String</span> username, HttpServletRequest request) &#123;<br>        <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br>        <span class="hljs-keyword">return</span> ResultUtils.success(users);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除用户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param id 用户id</span><br><span class="hljs-comment">     * @return true/false</span><br><span class="hljs-comment">     */</span><br>    @DeleteMapping(<span class="hljs-string">&quot;/delete&quot;</span>)<br>    <span class="hljs-keyword">public</span> BaseResponse&lt;<span class="hljs-built_in">Boolean</span>&gt; userDelete(Long id, HttpServletRequest request) &#123;<br>        <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><br>        <span class="hljs-keyword">return</span> ResultUtils.success(removeById);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>)<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">BusinessException(PARMS_ERROR)</span>;<br></code></pre></td></tr></table></figure><h5 id="失败状态"><a href="#失败状态" class="headerlink" title="失败状态"></a>失败状态</h5><ul><li><h5 id="controller层-register-login-logout-currentUser-search-delete-下的controller参数校验"><a href="#controller层-register-login-logout-currentUser-search-delete-下的controller参数校验" class="headerlink" title="controller层    register    login    logout    currentUser    search    delete 下的controller参数校验"></a>controller层    register    login    logout    currentUser    search    delete 下的controller参数校验</h5></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>)<br>       throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">BusinessException(PARMS_ERROR)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>)</span>)<br>        throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">BusinessException(PARMS_ERROR)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">if</span> (request == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(PARMS_ERROR);<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">if</span> (currentUser == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(PARMS_ERROR);<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> (!is<span class="hljs-constructor">Admin(<span class="hljs-params">request</span>)</span>)<br>         throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">BusinessException(NO_AUTH)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">if</span> (!isAdmin(request))<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(NO_AUTH);<br><span class="hljs-keyword">if</span> (id &lt;= <span class="hljs-number">0</span>)<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(PARMS_ERROR);<br></code></pre></td></tr></table></figure><ul><li><h5 id="service层-register-下的参数校验"><a href="#service层-register-下的参数校验" class="headerlink" title="service层    register 下的参数校验"></a>service层    register 下的参数校验</h5></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 1.1.账户, 密码, 二次密码不能为空</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>)</span>)<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">BusinessException(PARMS_ERROR)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 1.2.账户不小于4位</span><br>        <span class="hljs-keyword">if</span> (userAccount.length() &lt; <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(<span class="hljs-string">&quot;账户不符合要求&quot;</span>, <span class="hljs-number">50000</span>, <span class="hljs-string">&quot;账户小于4位&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 1.3.账户不包含特殊字符</span><br>        <span class="hljs-type">String</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.*[<span class="hljs-subst">\\</span>s`~!@#$%^&amp;*()+=|&#123;&#125;&#x27;:;&#x27;,<span class="hljs-subst">\\</span>[<span class="hljs-subst">\\</span>].&lt;&gt;/?~！@#￥%……&amp;*（）——+|&#123;&#125;【】‘；：”“’。，、？<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>]+.*&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-type">Pattern</span>.matches(pattern, userAccount))<br>            <span class="hljs-keyword">throw</span> new <span class="hljs-type">BusinessException</span>(<span class="hljs-string">&quot;账户不符合要求&quot;</span>, <span class="hljs-number">50001</span>, <span class="hljs-string">&quot;账户包含特殊字符&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 1.4.用户密码不小于8位</span><br>        <span class="hljs-keyword">if</span> (userPassword.length() &lt; <span class="hljs-number">8</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(<span class="hljs-string">&quot;密码不符合要求&quot;</span>, <span class="hljs-number">60000</span>, <span class="hljs-string">&quot;用户密码小于8位&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 1.5.二次密码与密码相同</span><br>        <span class="hljs-keyword">if</span> (!userPassword.<span class="hljs-keyword">equals</span>(checkPassword))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BusinessException(<span class="hljs-string">&quot;二次密码不符合要求&quot;</span>, <span class="hljs-number">60001</span>, <span class="hljs-string">&quot;二次密码与密码不相同&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 1.6.星球编号不能超过5位</span><br>        <span class="hljs-keyword">if</span> (planetCode.length() &gt; <span class="hljs-number">5</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(<span class="hljs-string">&quot;星球编号不符合要求&quot;</span>, <span class="hljs-number">60002</span>, <span class="hljs-string">&quot;星球编号超过5位&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl">// <span class="hljs-number">1.7</span>.账户不能重复<br>        QueryWrapper&lt;User&gt; ua_lqw = new QueryWrapper&lt;&gt;(); <span class="hljs-regexp">//</span> LambdaQueryWrapper&lt;User&gt; userLambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();<br>        ua_lqw.e<span class="hljs-string">q(&quot;user_account&quot;, userAccount)</span>; <span class="hljs-regexp">//</span> userLambdaQueryWrapper.e<span class="hljs-string">q(User::getUserAccount, userAccount)</span>;<br>        Long ua_count = userMapper.selectCount(ua_lqw);   <span class="hljs-regexp">//</span> long count = this.count(lqw);<br>        <span class="hljs-keyword">if</span> (ua_count &gt; <span class="hljs-number">0</span>)<br>            throw new BusinessException(<span class="hljs-string">&quot;账户不符合要求&quot;</span>, <span class="hljs-number">50002</span>, <span class="hljs-string">&quot;账户重复&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 1.8.星球编号不能重复</span><br>        QueryWrapper&lt;User&gt; pc_lqw = <span class="hljs-keyword">new</span> <span class="hljs-type">QueryWrapper</span>&lt;&gt;();<br>        pc_lqw.eq(<span class="hljs-string">&quot;planet_code&quot;</span>, planetCode);<br>        Long pc_count = userMapper.selectCount(pc_lqw);<br>        <span class="hljs-keyword">if</span> (pc_count &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(<span class="hljs-string">&quot;星球编号不符合要求&quot;</span>, <span class="hljs-number">60003</span>, <span class="hljs-string">&quot;星球编号重复&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><h5 id="service层-login下的参数校验"><a href="#service层-login下的参数校验" class="headerlink" title="service层    login下的参数校验"></a>service层    login下的参数校验</h5></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 1.1.账户, 密码不能为空</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>)</span>)<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">BusinessException(PARMS_ERROR)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 1.2.账户不小于4位</span><br>        <span class="hljs-keyword">if</span> (userAccount.length() &lt; <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(<span class="hljs-string">&quot;账户不符合要求&quot;</span>, <span class="hljs-number">50000</span>, <span class="hljs-string">&quot;账户小于4位&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 1.3.用户密码不小于8位</span><br>        <span class="hljs-keyword">if</span> (userPassword.length() &lt; <span class="hljs-number">8</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(<span class="hljs-string">&quot;密码不符合要求&quot;</span>, <span class="hljs-number">60000</span>, <span class="hljs-string">&quot;用户密码小于8位&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 1.4.账户不包含特殊字符</span><br>        <span class="hljs-type">String</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.*[<span class="hljs-subst">\\</span>s`~!@#$%^&amp;*()+=|&#123;&#125;&#x27;:;&#x27;,<span class="hljs-subst">\\</span>[<span class="hljs-subst">\\</span>].&lt;&gt;/?~！@#￥%……&amp;*（）——+|&#123;&#125;【】‘；：”“’。，、？<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>]+.*&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-type">Pattern</span>.matches(pattern, userAccount))<br>            <span class="hljs-keyword">throw</span> new <span class="hljs-type">BusinessException</span>(<span class="hljs-string">&quot;账户不符合要求&quot;</span>, <span class="hljs-number">50001</span>, <span class="hljs-string">&quot;账户包含特殊字符&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><h5 id="service层-logout下的返回信息"><a href="#service层-logout下的返回信息" class="headerlink" title="service层    logout下的返回信息"></a>service层    logout下的返回信息</h5></li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">request.getSession().removeAttribute(USER_LOGIN_STATE)<span class="hljs-comment">;</span><br>        return <span class="hljs-string">&quot;注销成功&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h5 id="自定义异常并由全局异常处理器成功处理-功能基本完成"><a href="#自定义异常并由全局异常处理器成功处理-功能基本完成" class="headerlink" title="自定义异常并由全局异常处理器成功处理, 功能基本完成"></a>自定义异常并由全局异常处理器成功处理, 功能基本完成</h5><h2 id="前端适配后端的通用返回对象"><a href="#前端适配后端的通用返回对象" class="headerlink" title="前端适配后端的通用返回对象"></a>前端适配后端的通用返回对象</h2><ul><li><h5 id="前端定义通用返回对象-services-ant-design-pro-typings-d-ts"><a href="#前端定义通用返回对象-services-ant-design-pro-typings-d-ts" class="headerlink" title="前端定义通用返回对象(services/ant-design-pro/typings.d.ts)"></a>前端定义通用返回对象(services/ant-design-pro/typings.d.ts)</h5></li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通用返回类</span><br><span class="hljs-comment">   */</span><br>  type BaseResponse<span class="hljs-params">&lt;T&gt;</span> = <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">    code:</span> number,<br><span class="hljs-symbol">    data:</span> T,<br><span class="hljs-symbol">    message:</span> string,<br><span class="hljs-symbol">    description:</span> string<br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="封装各接口响应类型-services-ant-design-pro-api-ts"><a href="#封装各接口响应类型-services-ant-design-pro-api-ts" class="headerlink" title="封装各接口响应类型(services/ant-design-pro/api.ts)"></a>封装各接口响应类型(services/ant-design-pro/api.ts)</h5></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">return</span> request&lt;API.BaseResponse&lt;API.CurrentUser&gt;&gt;(<span class="hljs-string">&#x27;/api/user/currentUser&#x27;</span>, &#123;<br>  method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  ...(<span class="hljs-keyword">options</span> || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">return</span> request&lt;API.BaseResponse&lt;API.CurrentUser&gt;&gt;(<span class="hljs-string">&#x27;/api/user/logout&#x27;</span>, &#123;<br>  method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  ...(<span class="hljs-keyword">options</span> || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">return</span> request&lt;API.BaseResponse&lt;API.CurrentUser&gt;&gt;(<span class="hljs-string">&#x27;/api/user/login&#x27;</span>, &#123;<br>  method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  headers: &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-keyword">data</span>: body,<br>  ...(options || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">return</span> request&lt;API.BaseResponse&lt;API.CurrentUser&gt;&gt;(<span class="hljs-string">&#x27;/api/user/register&#x27;</span>, &#123;<br>  method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  headers: &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-keyword">data</span>: body,<br>  ...(options || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">return</span> request&lt;API.BaseResponse&lt;API.CurrentUser&gt;&gt;(<span class="hljs-string">&#x27;/api/user/search&#x27;</span>, &#123;<br>  method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  ...(<span class="hljs-keyword">options</span> || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><h5 id="修改登录-注册成功的校验逻辑"><a href="#修改登录-注册成功的校验逻辑" class="headerlink" title="修改登录/注册成功的校验逻辑"></a>修改登录/注册成功的校验逻辑</h5></li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">// 登录</span><br>const <span class="hljs-built_in">data</span> = await login(&#123;<br>  <span class="hljs-params">...</span>values,<br>  <span class="hljs-keyword">type</span>,<br>&#125;);<br><span class="hljs-comment">// 登录成功</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">data</span>) &#123;<br>  const defaultLoginSuccessMessage = <span class="hljs-string">&#x27;登录成功！&#x27;</span>;<br>  <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">// 注册</span><br><span class="hljs-comment">// 返回id</span><br>const <span class="hljs-built_in">data</span> = await register(&#123;<br>  <span class="hljs-params">...</span>values,<br>  <span class="hljs-keyword">type</span>,<br>&#125;);<br><span class="hljs-comment">// 注册成功</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">data</span>) &#123;<br>  const defaultLoginSuccessMessage = <span class="hljs-string">&#x27;注册成功！&#x27;</span>;<br>  <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br> &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="这边还要记得修改两个地方"><a href="#这边还要记得修改两个地方" class="headerlink" title="这边还要记得修改两个地方:"></a>这边还要记得修改两个地方:</h5></li></ul><h6 id="修改管理员权限的校验-解决了无法正确访问到管理员页面的问题"><a href="#修改管理员权限的校验-解决了无法正确访问到管理员页面的问题" class="headerlink" title="修改管理员权限的校验 - 解决了无法正确访问到管理员页面的问题"></a>修改管理员权限的校验 - 解决了无法正确访问到管理员页面的问题</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">access</span>(<span class="hljs-params">initialState: &#123; baseResponse?: API.BaseResponse&lt;API.CurrentUser&gt; &#125; | <span class="hljs-literal">undefined</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; baseResponse &#125; = initialState ?? &#123;&#125;;<br>  <span class="hljs-comment">// 权限校验</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-comment">// 校验管理员权限</span><br>    <span class="hljs-attr">canAdmin</span>: baseResponse &amp;&amp; baseResponse.<span class="hljs-property">data</span>.<span class="hljs-property">userRole</span> === <span class="hljs-number">1</span>,<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="修改查询在线用户信息-解决了在线用户信息页面无法正常显示的问题"><a href="#修改查询在线用户信息-解决了在线用户信息页面无法正常显示的问题" class="headerlink" title="修改查询在线用户信息 - 解决了在线用户信息页面无法正常显示的问题"></a>修改查询在线用户信息 - 解决了在线用户信息页面无法正常显示的问题</h6><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso">const columns: ProColumns&lt;API.BaseResponse&lt;API.CurrentUser&gt;&gt;<span class="hljs-meta">[</span><span class="hljs-meta">]</span> = <span class="hljs-meta">[</span><br><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><br><span class="hljs-meta">]</span><br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso">&lt;ProTable&lt;API.BaseResponse&lt;API.CurrentUser&gt;&gt;<br>  columns=&#123;columns&#125;<br>  <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade"> <span class="hljs-comment">// 弹出异常信息</span><br>    message.error(res.message)<br>    <span class="hljs-comment">// 弹出异常描述</span><br>    message.error(res.description)<br>    <span class="hljs-comment">// 跳转至登录页</span><br>    history.<span class="hljs-built_in">replace</span>(&#123;<br>      <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;user/login&#x27;</span>,<br>      <span class="hljs-attr">search</span>: stringify(&#123;<br>        <span class="hljs-attr">redirect</span>: location.pathname,<br>      &#125;),<br>    &#125;);request=&#123;async (params = &#123;&#125;, <span class="hljs-built_in">sort</span>, <span class="hljs-built_in">filter</span>) =&gt; &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sort</span>, <span class="hljs-built_in">filter</span>);<br>  <span class="hljs-comment">// 返回userList</span><br>  const baseResponse = await searchUsers();<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">data</span>: baseResponse,<br>  &#125;<br>&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="前端封装全局请求-响应拦截器"><a href="#前端封装全局请求-响应拦截器" class="headerlink" title="前端封装全局请求/响应拦截器"></a>前端封装全局请求/响应拦截器</h2><h5 id="umi其实已经给我们封装好了request了-目录-src-umi-plugin-request-request-ts-在这里我们也可以在该目录下自定义全局请求-响应拦截器-但是一方面破坏了封装组件的完整性-不好直接修改封装好的组件-我们的想法是定义自己的requert来封装axios-再自定义全局请求-响应拦截器"><a href="#umi其实已经给我们封装好了request了-目录-src-umi-plugin-request-request-ts-在这里我们也可以在该目录下自定义全局请求-响应拦截器-但是一方面破坏了封装组件的完整性-不好直接修改封装好的组件-我们的想法是定义自己的requert来封装axios-再自定义全局请求-响应拦截器" class="headerlink" title="umi其实已经给我们封装好了request了(目录:src/.umi/plugin-request/request.ts), 在这里我们也可以在该目录下自定义全局请求/响应拦截器, 但是一方面破坏了封装组件的完整性, 不好直接修改封装好的组件. 我们的想法是定义自己的requert来封装axios, 再自定义全局请求/响应拦截器"></a>umi其实已经给我们封装好了request了(目录:src/.umi/plugin-request/request.ts), 在这里我们也可以在该目录下自定义全局请求/响应拦截器, 但是一方面破坏了封装组件的完整性, 不好直接修改封装好的组件. 我们的想法是定义自己的requert来封装axios, 再自定义全局请求/响应拦截器</h5><h5 id="新建目录-src-plugins-globalRequest-ts"><a href="#新建目录-src-plugins-globalRequest-ts" class="headerlink" title="新建目录: src/plugins/globalRequest.ts"></a>新建目录: src/plugins/globalRequest.ts</h5><h5 id="在该目录下我们封装自己的request"><a href="#在该目录下我们封装自己的request" class="headerlink" title="在该目录下我们封装自己的request"></a>在该目录下我们封装自己的request</h5><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123;extend&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi-request&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;message&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;history&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;stringify&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;querystring&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">/**<br> * 配置request请求时的默认参数<br> */<br>const request = extend(&#123;<br>  credentials: <span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-regexp">//</span> 默认请求是否带上cookie<br>  <span class="hljs-regexp">//</span> requestType: <span class="hljs-string">&#x27;form&#x27;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 全局请求拦截器</span><br><span class="hljs-comment"> */</span><br>request.interceptors.request.use((url, options): <span class="hljs-function"><span class="hljs-params">any</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`do request url = <span class="hljs-subst">$&#123;url&#125;</span>`</span>)<br>  <span class="hljs-keyword">return</span> &#123;<br>    url,<br>    <span class="hljs-attr">options</span>: &#123;<br>      ...options,<br>      <span class="hljs-attr">headers</span>: &#123;&#125;,<br>    &#125;,<br>  &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 全局响应拦截器</span><br><span class="hljs-comment"> */</span><br>request.interceptors.response.use(async (response, options): Promise&lt;<span class="hljs-built_in">any</span>&gt; =&gt; &#123;<br>  const res = await response.clone().json();<br>  <span class="hljs-comment">// 1.返回成功状态</span><br>  <span class="hljs-keyword">if</span> (res.code === <span class="hljs-number">0</span> &amp;&amp; res.data &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res.message);<br>    <span class="hljs-keyword">return</span> res.data;<br>  &#125;<br>  <span class="hljs-comment">// 2.返回失败状态</span><br>  <span class="hljs-keyword">if</span> (res.code === <span class="hljs-number">50001</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;...&quot;</span>)<br>    <span class="hljs-comment">// 弹出异常信息</span><br>    message.error(res.message)<br>    <span class="hljs-comment">// 弹出异常描述</span><br>    <span class="hljs-comment">// message.error(res.description)</span><br>    <span class="hljs-comment">// 跳转至登录页</span><br>    history.<span class="hljs-built_in">replace</span>(&#123;<br>      <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;user/login&#x27;</span>,<br>      <span class="hljs-attr">search</span>: stringify(&#123;<br>        <span class="hljs-attr">redirect</span>: location.pathname,<br>      &#125;),<br>    &#125;);<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;code: &quot;</span> + res.code)<br>  &#125;<br>  <br>  <span class="hljs-keyword">return</span> res.data;<br><br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="最后不要忘了-在src-services-ant-design-pro-api-ts目录下引入我们自己实现的request-覆盖掉umi封装的request"><a href="#最后不要忘了-在src-services-ant-design-pro-api-ts目录下引入我们自己实现的request-覆盖掉umi封装的request" class="headerlink" title="最后不要忘了, 在src/services/ant-design-pro/api.ts目录下引入我们自己实现的request, 覆盖掉umi封装的request"></a>最后不要忘了, 在src/services/ant-design-pro/api.ts目录下引入我们自己实现的request, 覆盖掉umi封装的request</h5><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/plugins/globalRequest&#x27;</span>;<br></code></pre></td></tr></table></figure><h5 id="我们实现了自定义的前端全局请求-响应拦截器"><a href="#我们实现了自定义的前端全局请求-响应拦截器" class="headerlink" title="我们实现了自定义的前端全局请求/响应拦截器"></a>我们实现了自定义的前端全局请求/响应拦截器</h5><h1 id="至此-用户中心系统基本功能已经完成"><a href="#至此-用户中心系统基本功能已经完成" class="headerlink" title="至此, 用户中心系统基本功能已经完成"></a>至此, 用户中心系统基本功能已经完成</h1><h4 id="未来的持续优化"><a href="#未来的持续优化" class="headerlink" title="未来的持续优化:"></a>未来的持续优化:</h4><ul><li>注册的新用户会有默认的头像和昵称</li><li>用户登录后可以更改个人信息</li><li>完善前端全局异常处理器所处理的异常类型</li><li>项目的部署和上线</li></ul><h5 id="废话不多说-开启-伙伴匹配系统-的学习"><a href="#废话不多说-开启-伙伴匹配系统-的学习" class="headerlink" title="废话不多说, 开启 伙伴匹配系统 的学习"></a>废话不多说, 开启 伙伴匹配系统 的学习</h5>]]></content>
    
    
    <categories>
      
      <category>project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
      <tag>开发经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基础</title>
    <link href="/blog/2023/03/17/Git%E5%9F%BA%E7%A1%80/"/>
    <url>/blog/2023/03/17/Git%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-是一个分布式版本控制工具，提供代码托管服务"><a href="#Git-是一个分布式版本控制工具，提供代码托管服务" class="headerlink" title="Git 是一个分布式版本控制工具，提供代码托管服务"></a>Git 是一个分布式版本控制工具，提供代码托管服务</h1><h2 id="1、基础知识：工作区、版本库、暂存区"><a href="#1、基础知识：工作区、版本库、暂存区" class="headerlink" title="1、基础知识：工作区、版本库、暂存区"></a>1、基础知识：工作区、版本库、暂存区</h2><h5 id="（1）工作区：包含-git-隐藏文件夹的目录，也称为工作目录，用于存放开发的代码"><a href="#（1）工作区：包含-git-隐藏文件夹的目录，也称为工作目录，用于存放开发的代码" class="headerlink" title="（1）工作区：包含.git 隐藏文件夹的目录，也称为工作目录，用于存放开发的代码"></a>（1）工作区：包含.git 隐藏文件夹的目录，也称为工作目录，用于存放开发的代码</h5><h5 id="（2）版本库：-git-隐藏文件夹，储存配置信息、日志信息和文件版本信息等"><a href="#（2）版本库：-git-隐藏文件夹，储存配置信息、日志信息和文件版本信息等" class="headerlink" title="（2）版本库：.git 隐藏文件夹，储存配置信息、日志信息和文件版本信息等"></a>（2）版本库：.git 隐藏文件夹，储存配置信息、日志信息和文件版本信息等</h5><h5 id="（3）暂存区：-git-隐藏文件夹中的一个-index-文件，也可叫做-stage，用来临时保存修改文件"><a href="#（3）暂存区：-git-隐藏文件夹中的一个-index-文件，也可叫做-stage，用来临时保存修改文件" class="headerlink" title="（3）暂存区：.git 隐藏文件夹中的一个 index 文件，也可叫做 stage，用来临时保存修改文件"></a>（3）暂存区：.git 隐藏文件夹中的一个 index 文件，也可叫做 stage，用来临时保存修改文件</h5><p>####工作区中文件的状态</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">（1）untracked 未跟踪（未被纳入版本控制）<br>（2）tracked 已跟踪（被纳入版本控制）<br>1）Unmodified 未修改状态<br>2）Modified 已修改状态<br>3）Staged 已暂存状态<br></code></pre></td></tr></table></figure><h2 id="2、常用命令："><a href="#2、常用命令：" class="headerlink" title="2、常用命令："></a>2、常用命令：</h2><h5 id="（1）全局设置："><a href="#（1）全局设置：" class="headerlink" title="（1）全局设置："></a>（1）全局设置：</h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.name 【用户名】</span><br>git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.email 【用户邮箱】</span><br></code></pre></td></tr></table></figure><h5 id="（2）获取-Git-仓库："><a href="#（2）获取-Git-仓库：" class="headerlink" title="（2）获取 Git 仓库："></a>（2）获取 Git 仓库：</h5><p> 在本地初始化一个仓库：git init<br>​ 从远处仓库克隆：git clone 【仓库地址(URL)】</p><h5 id="（3）本地仓库-工作区-常用命令："><a href="#（3）本地仓库-工作区-常用命令：" class="headerlink" title="（3）本地仓库(工作区)常用命令："></a>（3）本地仓库(工作区)常用命令：</h5><ul><li>查看工作区内的文件状态（是否纳入版本控制？已纳入的是否修改？修改后的是否暂存？）</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure><ul><li>将文件的修改加入暂存区</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> 【文件名】<br></code></pre></td></tr></table></figure><ul><li>将暂存区的文件取消暂存或者切换到指定版本 2</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">reset</span>【版本号】<br></code></pre></td></tr></table></figure><ul><li>将暂存区的文件提交修改到版本库</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m 【修改信息】【文件名】<br></code></pre></td></tr></table></figure><ul><li>查看日志，查看提交记录，方便回溯到指定版本</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><h5 id="（4）远程仓库-工作区-常用命令："><a href="#（4）远程仓库-工作区-常用命令：" class="headerlink" title="（4）远程仓库(工作区)常用命令："></a>（4）远程仓库(工作区)常用命令：</h5><ul><li>查看远程仓库：查看仓库名、仓库地址(URL)</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></figure><ul><li>将本地仓库与远程仓库连接起来</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git remote <span class="hljs-built_in">add</span> 【仓库名】【仓库地址】<br>git remote <span class="hljs-built_in">add</span> origin【仓库地址(URL)】<br></code></pre></td></tr></table></figure><ul><li>从远程仓库克隆</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">【仓库地址(URL</span>)】<br></code></pre></td></tr></table></figure><ul><li>从远程仓库拉取</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git pull 【仓库名】【仓库分支】<br>git pull origin <span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure><ul><li>将工作区内的文件推送/上传到远程仓库的分支上（文件一定是成功提交到版本库中的，才能推送至远程仓库）</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span>【仓库名】【仓库分支】<br>git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><h5 id="（5）分支操作"><a href="#（5）分支操作" class="headerlink" title="（5）分支操作"></a>（5）分支操作</h5><ul><li>列出所有本地分支</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch</span><br></code></pre></td></tr></table></figure><ul><li>列出所有远程分支</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch -r</span><br></code></pre></td></tr></table></figure><ul><li>列出所有本地分支和远程分支</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><ul><li>在本地创建分支</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">branch </span>【分支名】<br></code></pre></td></tr></table></figure><ul><li>切换本地分支</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> checkout 【分支名】<br></code></pre></td></tr></table></figure><ul><li>将该本地分支推送至远程分支</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git <span class="hljs-built_in">push</span> 【仓库名】【分支名】<br></code></pre></td></tr></table></figure><ul><li>在该分支下，合并指定分支</li></ul><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> 【分支名】<br></code></pre></td></tr></table></figure><h5 id="（6）标签操作"><a href="#（6）标签操作" class="headerlink" title="（6）标签操作"></a>（6）标签操作</h5><ul><li>列出已有标签</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span><br></code></pre></td></tr></table></figure><ul><li>创建标签</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">【标签名】</span><br></code></pre></td></tr></table></figure><ul><li>将标签推送至远程仓库</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git <span class="hljs-built_in">push</span> 【仓库名】【标签名】<br></code></pre></td></tr></table></figure><ul><li>检出标签</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> 【分支名】【标签名】<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a><!--分支：开发隔离 ，标签：分支下的版本控制--></h3><h2 id="合并冲突问题"><a href="#合并冲突问题" class="headerlink" title="合并冲突问题"></a><strong><em>合并冲突问题</em></strong></h2><ul><li>如果执行推送时出现</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">! [rejected] master -&gt; master (fetch <span class="hljs-built_in">first</span>) <span class="hljs-built_in">error</span>: fail to <span class="hljs-built_in">push</span> <span class="hljs-built_in">some</span> refs<br></code></pre></td></tr></table></figure><ul><li>在执行推送前执行</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git pull <span class="hljs-comment">--rebase origin master</span><br></code></pre></td></tr></table></figure><ul><li><p>将 README.md 拉到本地以解决此问题</p></li><li><p>如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库中拉取文件的时候会报错</p></li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">（fatal：refusing <span class="hljs-built_in">to</span> <span class="hljs-built_in">merge</span> unrelated histories）<br></code></pre></td></tr></table></figure><ul><li>如此拉取：</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git pull origin <span class="hljs-keyword">master</span> <span class="hljs-title">--allow-unrelated-histories</span><br></code></pre></td></tr></table></figure><ul><li>以解决此问题</li></ul>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test2</title>
    <link href="/blog/2023/03/16/test2/"/>
    <url>/blog/2023/03/16/test2/</url>
    
    <content type="html"><![CDATA[<p>hhhhhhhh</p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试测试测试</title>
    <link href="/blog/2023/03/15/%E6%B5%8B%E8%AF%95%E6%B5%8B%E8%AF%95%E6%B5%8B%E8%AF%95/"/>
    <url>/blog/2023/03/15/%E6%B5%8B%E8%AF%95%E6%B5%8B%E8%AF%95%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blog/2023/03/07/hello-world/"/>
    <url>/blog/2023/03/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
