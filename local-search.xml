<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>游戏打包</title>
    <link href="/blog/2023/03/19/%E6%B8%B8%E6%88%8F%E6%89%93%E5%8C%85/"/>
    <url>/blog/2023/03/19/%E6%B8%B8%E6%88%8F%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a><!--本文内容均转载自黑马程序员-阿玮老师的游戏打包教程--></h3><h1 id="主要实现步骤"><a href="#主要实现步骤" class="headerlink" title="主要实现步骤"></a>主要实现步骤</h1><p>1，   将代码打包成jar包。</p><p>2，   整合资源文件</p><p>3，   将jar包打包成exe</p><p>4，   将jdk、资源文件、jar包转换后的exe三者再次打包成最终的exe。</p><h1 id="准备软件"><a href="#准备软件" class="headerlink" title="准备软件"></a>准备软件</h1><p>1，   Idea：将代</p><p>码打包成jar包（java形式的压缩包）</p><p>2，   exe4j：将jar包转换成exe的工具。</p><p>3，   innosetup：将游戏用到的图片，Java的运行环境和第二步打包的代码，组合成最终的安装程序。</p><p><strong>备注1：</strong>exe4j和innosetup安装非常简单，傻瓜式下一步即可。</p><p><strong>备注2：</strong>exe4j支持的JDK版本是8~11，其他版本的JDK不行，所以我也给大家提供了JDK11版本。</p><p><strong>备注3：</strong>64位的操作系统用exe4j_windows-x64_6_0_2.exe</p><p>32位的操作系统用exe4j_windows_6_0_2.exe</p><p><strong>备注4：</strong>打开我的电脑，右键空白处，点击属性，在弹出界面的中央就能查看自己电脑是64位的还是32位的。</p><h1 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h1><ol><li>jdk 下载安装 <a href="https://www.oracle.com/java/technologies/downloads/#java11-windows"></a></li><li>exe4j 链接：<a href="https://pan.baidu.com/s/1LS4VhUFfj5Hcl3qLeCg8kA">https://pan.baidu.com/s/1LS4VhUFfj5Hcl3qLeCg8kA</a><br>提取码：ZSZS</li><li>innosetup 链接：<a href="https://pan.baidu.com/s/1zo29xYryY3oiY4x3naGtRQ?pwd=ibu0">https://pan.baidu.com/s/1zo29xYryY3oiY4x3naGtRQ?pwd=ibu0</a><br>提取码：ibu0</li></ol><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><p>1，     确保idea已经安装完毕</p><p>2，     安装exe4j</p><p>3，     安装innosetup</p><p>傻瓜式安装，直接下一步即可，但是要记住安装路径。</p><h1 id="代码改写："><a href="#代码改写：" class="headerlink" title="代码改写："></a>代码改写：</h1><p>代码中所有图片用到的路径需要把模块名删除，改写之后如下：</p><p>在不同的情况下，相对路径的相对位置是不一样的。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg" alt="img"></p><h1 id="打包步骤："><a href="#打包步骤：" class="headerlink" title="打包步骤："></a>打包步骤：</h1><h2 id="第一步：代码打包成jar包"><a href="#第一步：代码打包成jar包" class="headerlink" title="第一步：代码打包成jar包"></a>第一步：代码打包成jar包</h2><p>1，   点击File，再点Project Structure。</p><p>2，   点击Artifaces。</p><p>3，   下方图片箭头指向位置应为空白，如果有其他内容，可以选中之后，点击减号删除。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image003.png" alt="img"></p><p>4，   选中左侧的Artifacts ，</p><p>点击中间上方位置的+ </p><p>点击JAR</p><p>点击From modules with dependencies…</p><p>如下图所示：</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image004.png" alt="img"></p><p>5，   Module：选择要打包的项目。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image005.png" alt="img"></p><p>6，Main Class：点击红框最后的那个小图标，项目中是哪个main方法所在的类去启动项目，这里就选择哪个类。我的项目是由app里面的main方法启动的，所以我就选择App</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image006.png" alt="img"></p><p>7，设置 META-INF/MANIFEST.MF。</p><p>点击箭头指向的图标进行设置。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image007.png" alt="img"></p><p>8，选择当前模块</p><p>点击OK</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image008.png" alt="img"></p><p>9，   此时这里的路径就是模块所在路径，点击OK。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image009.png" alt="img"></p><p>10， 如果没有弹框报错，第十步可以跳过，直接看十一步。</p><p>如果出现弹框报错，表示当前模块下已存在META-INF文件夹了。可以在本地找到已存在的META-INF文件夹，右键点击DELETE删除即可。</p><p>查找方式如下：</p><p>右键模块点击open in</p><p>点击Explorer</p><p>在模块里面找到META-INF文件删除即可。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image011.jpg" alt="img"></p><p>11， 如果没有报错，就出现一个puzzlegame：jar的提示。</p><p>点击右下角的OK。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image013.jpg" alt="img"></p><p>12， 在idea主界面上方，点击Build里面的Build Artifacts。</p><p>如果是灰色的不能按，请确定在上面第一步~第九步有没有配置好jar包的信息。</p><p>如果已经配置好了jar的信息，此处就可以正常点击。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image014.png" alt="img"></p><p>13， 在主界面正中央。</p><p>选择puzzlegame:jar。</p><p>再选择Build。</p><p>idea会帮我们生成jar包。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image015.png" alt="img"></p><p>14， 等页面右下角的进度条结束，jar就已经生成完毕。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image017.jpg" alt="img"></p><p>15， 点击File，再点Project Structure。</p><p>点击Artifaces。</p><p>在下图红色框中的路径下，可以找到生成好的jar包。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image019.jpg" alt="img"></p><h2 id="第二步：整合资源文件"><a href="#第二步：整合资源文件" class="headerlink" title="第二步：整合资源文件"></a>第二步：整合资源文件</h2><p>1，   将第一步创建好的jar包拷贝到桌面上。</p><p>2，   在桌面上新建一个文件夹resource。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image020.png" alt="img"></p><p>3，   将《拼图游戏》中的image文件夹粘贴到resource文件夹当中。</p><p>此时在桌面中的resource文件夹下的image文件夹下，就会看到游戏里面用到的所有图片。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image021.png" alt="img"></p><h2 id="第三步：将jar包打包成exe"><a href="#第三步：将jar包打包成exe" class="headerlink" title="第三步：将jar包打包成exe"></a>第三步：将jar包打包成exe</h2><p>1，   双击打开安装好的exe4j.exe，注册软件。</p><p>点击下面的Enter License</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image023.jpg" alt="img"></p><p>2，   输入用户名，公司名和注册码后点击ok</p><p>用户名，公司名随便填，最好都是小写字母。</p><p>注册码：L-g782dn2d-1f1yqxx1rv1sqd</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image024.png" alt="img"></p><p>3，   注册完毕之后点击右下角的next</p><p>备注：exe4j.exe只识别JDK8到JDK11，如果安装时出现弹框报错，请检查JDK版本，资料文件夹中给大家提供了JDK11，有需要可以安装。（黑马程序员阿玮老师出品）</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image026.jpg" alt="img"></p><p>4，   选择JAVA转EXE。</p><p>点击右下角的next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image028.jpg" alt="img"></p><p>5，   输入名称puzzlegame</p><p>输出保存exe的路径，建议选择到桌面上。</p><p>点击右下角的next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image030.jpg" alt="img"></p><p>6，   选择以图形界面的形式启动游戏</p><p>输入应用名称，puzzlegame</p><p>点击高级设置Advanced Options，选择32-bit or 64-bit</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image032.jpg" alt="img"></p><p>7，   勾选Generate 64-bit executable</p><p>表示要生成64位的exe安装包，如果未勾选默认生成32位的安装包。</p><p>点击右下角next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image034.jpg" alt="img"></p><p>8，    然后一直下一步，一直出现如下界面</p><p>在本界面开始jar包并以及配置启动类。（黑马程序员阿玮老师出品）</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image036.jpg" alt="img"></p><p>9，    第一行，VM参数配置的地方加上：-Dfile.encoding=utf-8</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image037.png" alt="img"></p><p>10， 点击右侧绿色的+，添加jar包</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image039.jpg" alt="img"></p><p>11， 添加jar包</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image040.png" alt="img"></p><p>12， 选择桌面上的puzzlegame.jar。</p><p>点击下面的打开。（黑马程序员阿玮老师出品）</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image042.jpg" alt="img"></p><p>13， 检查路径，如果无误点击右下角的OK</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image044.jpg" alt="img"></p><p>14， 选择项目启动类</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image046.jpg" alt="img"></p><p>15， 因为程序主入口main方法写在App类中，所有选择app，并点击OK。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image048.jpg" alt="img"></p><p>16， 本页面中，一共修改了三处。</p><p>三处全部操作完毕。点击右下角的next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image050.jpg" alt="img"></p><p>17， 填写最小启动的JDK版本。输入1.8</p><p>配置exe加载的JDK，选择第一个。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image052.jpg" alt="img"></p><p>18， 点击+</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image054.png" alt="https://img-blog.csdnimg.cn/20200204003959383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3NzAxMzgx,size_16,color_FFFFFF,t_70"></p><p>19， 选择Directory</p><p>下面输入.\jdk</p><p><strong>（注意：输入点杠jdk，都要是英文状态下输入）</strong></p><p>点击OK</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image055.png" alt="img"></p><p>20， 再次点击+</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image057.jpg" alt="img"></p><p>21， 选择Directory</p><p>下面输入.\image</p><p><strong>（输入点杠image，都要是英文状态下输入）</strong></p><p>点击OK</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image058.png" alt="img"></p><p>22， 点击右下角的next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image060.jpg" alt="img"></p><p>23， 选择Client VM</p><p>点击右下角的next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image062.png" alt="https://img-blog.csdnimg.cn/20200204004404491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3NzAxMzgx,size_16,color_FFFFFF,t_70"></p><p>24， 然后一直下一步，最终出现如下界面</p><p>点击右下角的Exit退出。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image064.jpg" alt="img"></p><p>25， 点击Exit后，会提升是否需要保存刚刚的配置信息，可以点击Yes，并选择一个路径进行保存。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image066.jpg" alt="img"></p><p>26， 如果第三步选择的exe保存的路径是桌面，那么在桌面上</p><p>就能看到生成的puzzlegame.exe文件了。</p><p>四个文件分别为：</p><p>左一：刚刚用jar生成的exe文件。</p><p>左二：idea生成的jar包</p><p>左三：游戏用到的资源图片</p><p>左四：刚刚用exe4J设置完毕之后保存的信息。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image067.png" alt="img"></p><h2 id="第四步：将jdk、资源文件、jar包转换后的exe三者再次打包成最终的exe。"><a href="#第四步：将jdk、资源文件、jar包转换后的exe三者再次打包成最终的exe。" class="headerlink" title="第四步：将jdk、资源文件、jar包转换后的exe三者再次打包成最终的exe。"></a>第四步：将jdk、资源文件、jar包转换后的exe三者再次打包成最终的exe。</h2><p>刚刚，我们仅仅是把java代码变成了exe。下面我们要把游戏中依赖的资源文件，也就是使用到的所有图片，还有JDK三者再次打包成最终的exe，这样在没有jdk电脑环境下也能运行。</p><p>1，打开inno setup</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image069.jpg" alt="img"></p><p>2，在欢迎页面点击右下角的关闭</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image070.png" alt="img"></p><p>4，   点击左上角的File</p><p>再点击NEW</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image071.png" alt="img"></p><p>5，   点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image072.png" alt="img"></p><p>6，   输入应用名称puzzlegame</p><p>点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image073.png" alt="img"></p><p>7，   不修改任何东西，直接点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image074.png" alt="img"></p><p>8，   点击这里，选择桌面上已经生成好的puzzlegame.exe</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image075.png" alt="img"></p><p>9，   点击Add folder</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image076.png" alt="img"></p><p>10， 选择桌面的resource，再点击确定。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image077.png" alt="img"></p><p>11， 如果出现下面弹框，则点击是。</p><p>如果没有出现也没有任何关系。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image078.png" alt="img"></p><p>12， 再点击 Add file(s)…</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image079.png" alt="img"></p><p>13， 选中桌面的puzzlegame.exe，再次添加一次。</p><p>点击下面的打开。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image081.jpg" alt="img"></p><p>14， 在本页面中一共设置了三处地方。</p><p>全部设置完毕，点击next。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image082.png" alt="img"></p><p>15， 默认不用选择，点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image083.png" alt="img"></p><p>16， 默认不用选择，点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image084.png" alt="img"></p><p>17， 选择语言，还是默认，点击next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image085.png" alt="img"></p><p>18， 选择输出路径，还是选择桌面。</p><p>输入最终安装包的名字，不能跟已有的puzzlegame重名。</p><p>所以我写setup，再点击右下角next</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image086.png" alt="img"></p><p>19， 默认点击next</p><p>有部分同学电脑不显示这一步，也没有关系。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image087.png" alt="img"></p><p>20， 完成，点击finish</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image088.png" alt="img"></p><p>21， 配置到最后一步了，脚本文件，到这里会弹出问你是否马</p><p>上编译，选择否，先把脚本写好再自己编译。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image089.png" alt="img"></p><p>22， 上面红色箭头处添加一行脚本。</p><p>#define MyJdkName “jdk”</p><p>添加前：<img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image090.png" alt="img"></p><p>23， 添加完毕之后，如下图所示</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image092.jpg" alt="img"></p><p>24， 往下拉，把有红色框起来的这一行删掉</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image094.jpg" alt="img"></p><p>25， 在上一步删除位置添加一段行的文字</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">Source: <span class="hljs-string">&quot;自己本地JDK路径\*&quot;</span>; DestDir: <span class="hljs-string">&quot;&#123;app&#125;\&#123;#MyJdkName&#125;&quot;</span>; Flags: ignoreversion recursesubdirs createallsubdirs<br></code></pre></td></tr></table></figure><p><strong>千万注意：这段文字不要直接复制。根据自己电脑中JDK的安装位置进行修改，添加完毕之后如下图</strong></p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image096.jpg" alt="img"></p><p>26， 点击上方的绿色按钮开始编译。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image097.png" alt="https://img-blog.csdnimg.cn/20200204010100205.png"></p><p>27， 此时会询问，是否需要保存。</p><p>可以点击是，选择一个位置保存一下刚刚修改之后的结果。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image098.png" alt="img"></p><p>28，  然后等待绿色滚动条结束</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image100.jpg" alt="img"></p><p>29， 当绿色滚动条结束后，会自动安装setup.exe文件。</p><p>此时可以点击否，先不安装。</p><p>在桌面上，会多了一个setup.exe文件和一个后缀名为iss的文件</p><p>setup.exe：打包成功的游戏安装包。</p><p>iss文件：就是刚刚设置的脚本文件。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image101.png" alt="img"></p><p>30， 现在就可以把这个exe文件发给你的好基友了，他的电脑</p><p>上不需要安装JDK，直接双击这个安装包就可以玩游戏了。</p><p>在安装的时候可以选择安装路径。</p><p>还可以在桌面生成快捷方式。</p><h1 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h1><p>1，   安装完毕之后，可以到安装目录去找puzzlegame.exe</p><p>双击就可以玩游戏了。刚刚桌面上的5个文件可以全部删除。以后双击puzzlegame.exe就可以玩游戏了。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image102.png" alt="img"></p><p>2，   如果游戏运行之后，有效果但是无图片，或者部分图片无</p><p>法加载。如下图所示：此时背景图片无法加载。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image103.png" alt="img"></p><p>3，   修改步骤一：</p><p>检查安装目录下image文件夹中是否有该图片。如果没有将缺少的图片粘贴进去重新运行游戏。（黑马程序员阿玮老师出品）</p><p>修改步骤二：</p><p>检查代码，图片的路径需要把模块名删掉。</p><p><img src="file:///C:/Users/Lenovo/AppData/Local/Temp/msohtmlclip1/01/clip_image104.jpg" alt="img"></p><p>4，代码修改后，需要重新生成exe安装包，重新安装游戏。</p>]]></content>
    
    
    <categories>
      
      <category>project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL安装配置</title>
    <link href="/blog/2023/03/19/MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/blog/2023/03/19/MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL安装配置一条龙教程"><a href="#MySQL安装配置一条龙教程" class="headerlink" title="MySQL安装配置一条龙教程"></a>MySQL安装配置一条龙教程</h1><ul><li><h2 id="安装MySQL服务"><a href="#安装MySQL服务" class="headerlink" title="安装MySQL服务"></a>安装MySQL服务</h2><ul><li><p>视频资源   <a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx/?p=3&share_source=copy_web&vd_source=41484c3c23d7dc1caf838d6574365b27">MySQL安装教程-黑马程序员</a></p></li><li><p>文档笔记  （去年暑假自己随手记的，具体操作注意事项还是建议跟着上面的视频走一遍）</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.下载 安装解压<br>https:<span class="hljs-regexp">//</span>downloads.mysql.com<span class="hljs-regexp">/archives/</span>community/<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">2.1</span>.添加环境变量<br><span class="hljs-comment">(1)</span>新建MYSQL_HOME变量,变量名: D:\softWare\mysql\mysql<span class="hljs-number">-5.7</span><span class="hljs-number">.19</span>-wi<span class="hljs-symbol">nx64</span><br><span class="hljs-comment">(2)</span>Path环境变量:<span class="hljs-meta">%</span> MYSQL_HOME<span class="hljs-meta">%</span>\bi<span class="hljs-symbol">n</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">2.2</span>.新建配置文件<br>在路径D:\softWare\mysql\mysql<span class="hljs-number">-5.7</span><span class="hljs-number">.19</span>-winx64下创建my.ini,配置如下内容:<br>[mysql]<br><span class="hljs-keyword">default</span>-<span class="hljs-type">character</span>-<span class="hljs-keyword">set</span>=utf8<br>[mysqld]<br><span class="hljs-type">character</span>-<span class="hljs-keyword">set</span>-<span class="hljs-keyword">server</span>=utf8<br><span class="hljs-keyword">default</span>-<span class="hljs-keyword">storage</span>-engine=INNODB<br>sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">3</span>.初始化MySQL，生成date<br><span class="hljs-attribute">mysqld</span> –initialize-insecure <br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">4</span>.注册MySQL服务<br><span class="hljs-attribute">mysqld</span> -install<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">5</span>.启动MySQL服务<br><span class="hljs-attribute">C</span>:\WINDOWS\system32&gt;net start mysql <br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">6</span>.设置账户密码<br><span class="hljs-attribute">mysqladmin</span> -u 用户名 -p 密码  (这里的用户名就是root了,之后可以创建新用户)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">7</span>.后期修改账户密码<br><span class="hljs-attribute">mysqladmin</span> -u用户名 -p旧密码 password 新密码<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">3</span>.登录MySQL<br>Mysql -u root -<span class="hljs-selector-tag">p</span>密码<br></code></pre></td></tr></table></figure><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-number">4.</span>登出MySQL <br>mysql&gt; <span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-number">5</span>.关闭MySQL服务<br><span class="hljs-symbol">C:</span>\WINDOWS\system32&gt;net <span class="hljs-keyword">stop</span> mysql<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">6.卸载MySQL<br>C:\WINDOWS\system32&gt;mysqld -<span class="hljs-built_in">remove</span> mysql<br></code></pre></td></tr></table></figure></li><li><h2 id="安装可视化软件"><a href="#安装可视化软件" class="headerlink" title="安装可视化软件"></a>安装可视化软件</h2></li><li><p>可视化软件有很多，比如Navicat，sqlyog等，都是为了方便操作数据库，咱就选一个简单好用还免费的</p></li></ul><ol><li><p> <a href="https://blog.csdn.net/cong666555/article/details/128399011">安装sqlyog</a>  可以跟着这篇文章操作</p></li><li><p>连接本地数据库</p><p><a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx/?p=10&share_source=copy_web&vd_source=41484c3c23d7dc1caf838d6574365b27">Navicat连接本地数据库-黑马程序员</a>     跟着视频操作就行，他用的是Navicat，其实都一样</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用户中心开发文档</title>
    <link href="/blog/2023/03/17/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/"/>
    <url>/blog/2023/03/17/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="本文档记录了用户中心开发的基本流程，-包含了前期的框架搭建、数据库设计，以及后期的后端接口实现、前端页面开发，实现了基础的登录注册功能，以及查看在线用户状态和删除用户的功能（管理员）"><a href="#本文档记录了用户中心开发的基本流程，-包含了前期的框架搭建、数据库设计，以及后期的后端接口实现、前端页面开发，实现了基础的登录注册功能，以及查看在线用户状态和删除用户的功能（管理员）" class="headerlink" title="本文档记录了用户中心开发的基本流程， 包含了前期的框架搭建、数据库设计，以及后期的后端接口实现、前端页面开发，实现了基础的登录注册功能，以及查看在线用户状态和删除用户的功能（管理员）"></a><code>本文档记录了用户中心开发的基本流程， 包含了前期的框架搭建、数据库设计，以及后期的后端接口实现、前端页面开发，实现了基础的登录注册功能，以及查看在线用户状态和删除用户的功能（管理员）</code></h3><h1 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h1><h3 id="前端框架搭建"><a href="#前端框架搭建" class="headerlink" title="前端框架搭建"></a>前端框架搭建</h3><h3 id="后端框架搭建"><a href="#后端框架搭建" class="headerlink" title="后端框架搭建"></a>后端框架搭建</h3><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><h1 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h1><h5 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h5><h2 id="登录-校验"><a href="#登录-校验" class="headerlink" title="登录+校验"></a>登录+校验</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">User</span> <span class="hljs-title">userLogin</span>(<span class="hljs-keyword">String</span> userAccount, <span class="hljs-keyword">String</span> userPassword, HttpServletRequest request);<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>public User user<span class="hljs-constructor">Login(String <span class="hljs-params">userAccount</span>, String <span class="hljs-params">userPassword</span>, HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br>    <span class="hljs-comment">// 1.校验</span><br>    <span class="hljs-comment">// 1.1.账户, 密码不能为空</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>)</span>)<br>        return null;<br><br>    <span class="hljs-comment">// 1.2.账户不小于4位</span><br>    <span class="hljs-keyword">if</span> (userAccount.length<span class="hljs-literal">()</span> &lt; <span class="hljs-number">4</span>)<br>        return null;<br><br>    <span class="hljs-comment">// 1.3.用户密码不小于8位</span><br>    <span class="hljs-keyword">if</span> (userPassword.length<span class="hljs-literal">()</span> &lt; <span class="hljs-number">8</span>)<br>        return null;<br><br>    <span class="hljs-comment">// 1.4.账户不包含特殊字符</span><br>    String pattern = <span class="hljs-string">&quot;.*[\\s`~!@#$%^&amp;*()+=|&#123;&#125;&#x27;:;&#x27;,\\[\\].&lt;&gt;/?~！@#￥%……&amp;*（）——+|&#123;&#125;【】‘；：”“’。，、？\\\\]+.*&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Pattern</span>.</span></span>matches(pattern, userAccount))<br>        return null;<br><br>    <span class="hljs-comment">// 1.5.检验该用户是否注册</span><br>    User user = <span class="hljs-keyword">new</span> <span class="hljs-constructor">User()</span>;<br><br>    user.set<span class="hljs-constructor">UserAccount(<span class="hljs-params">userAccount</span>)</span>;<br><br>    String encryptPassword = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigestUtils</span>.</span></span>md5<span class="hljs-constructor">DigestAsHex((SALT + <span class="hljs-params">userPassword</span>)</span>.get<span class="hljs-constructor">Bytes()</span>);<br>    user.set<span class="hljs-constructor">UserPassword(<span class="hljs-params">encryptPassword</span>)</span>;<br><br>    QueryWrapper&lt;User&gt; qw = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;<span class="hljs-literal">()</span>;<br>    qw.eq(<span class="hljs-string">&quot;user_account&quot;</span>, userAccount).eq(<span class="hljs-string">&quot;user_password&quot;</span>, encryptPassword);<br>    User one = this.get<span class="hljs-constructor">One(<span class="hljs-params">qw</span>)</span>;<br><br>    <span class="hljs-comment">// 1.5.1.用户未注册(包含了MP自带的逻辑删除校验)</span><br>    <span class="hljs-keyword">if</span> (one<span class="hljs-operator"> == </span>null)<br>        return null;<br><br>    <span class="hljs-comment">// 2.脱敏用户信息</span><br>    User safetyUser = get<span class="hljs-constructor">SafetyUser(<span class="hljs-params">one</span>)</span>;<br><br>    <span class="hljs-comment">// 3.记录用户登录态</span><br>    request.get<span class="hljs-constructor">Session()</span>.set<span class="hljs-constructor">Attribute(USER_LOGIN_STATE, <span class="hljs-params">safetyUser</span>)</span>;<br><br>    <span class="hljs-comment">// 4.返回用户信息</span><br>    return safetyUser;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注册-校验"><a href="#注册-校验" class="headerlink" title="注册+校验"></a>注册+校验</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">userRegister</span><span class="hljs-params">(<span class="hljs-type">String</span> userAccount, <span class="hljs-type">String</span> userPassword, <span class="hljs-type">String</span> checkPassword)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户注册</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userAccount   账户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userPassword  密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> checkPassword 二次密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用户id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> long userRegister(String userAccount, String userPassword, String checkPassword) &#123;<br>        <span class="hljs-comment">// 1.校验</span><br>        <span class="hljs-comment">// 1.1.账户, 密码, 二次密码不能为空</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isAnyBlank(userAccount, userPassword, checkPassword))<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 1.2.账户不小于4位</span><br>        <span class="hljs-keyword">if</span> (userAccount.length() &lt; <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 1.3.账户不能重复</span><br>        QueryWrapper&lt;User&gt; lqw = new QueryWrapper&lt;&gt;(); <span class="hljs-comment">// LambdaQueryWrapper&lt;User&gt; userLambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br>        lqw.eq(<span class="hljs-string">&quot;user_account&quot;</span>, userAccount); <span class="hljs-comment">// userLambdaQueryWrapper.eq(User::getUserAccount, userAccount);</span><br>        <span class="hljs-built_in">Long</span> count = userMapper.selectCount(lqw);   <span class="hljs-comment">// long count = this.count(lqw);</span><br><br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 1.4.用户密码不小于8位</span><br>        <span class="hljs-keyword">if</span> (userPassword.length() &lt; <span class="hljs-number">8</span>)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 1.5.账户不包含特殊字符</span><br>        String pattern = <span class="hljs-string">&quot;.*[\\s`~!@#$%^&amp;*()+=|&#123;&#125;&#x27;:;&#x27;,\\[\\].&lt;&gt;/?~！@#￥%……&amp;*（）——+|&#123;&#125;【】‘；：”“’。，、？\\\\]+.*&quot;</span>;<br>        <span class="hljs-keyword">if</span> (Pattern.matches(pattern, userAccount))<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 1.6.二次密码与密码相同</span><br>        <span class="hljs-keyword">if</span> (!userPassword.equals(checkPassword))<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br><br>        <span class="hljs-comment">// 2.对密码进行加密</span><br>        String encryptPassword = DigestUtils.md5DigestAsHex((SALT + userPassword).getBytes());<br><span class="hljs-comment">//        System.out.println(encryptPassword);</span><br><br><br>        <span class="hljs-comment">// 3.向数据库中插入用户数据</span><br>        User user = new User();<br>        <span class="hljs-comment">//</span><br>        user.setUserAccount(userAccount);<br>        user.setUserPassword(encryptPassword);<br>        boolean save = <span class="hljs-keyword">this</span>.save(user);<br>        <span class="hljs-comment">//插入失败</span><br>        <span class="hljs-keyword">if</span> (!save)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">return</span> user.getId();<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="封装脱敏用户信息"><a href="#封装脱敏用户信息" class="headerlink" title="封装脱敏用户信息"></a>封装脱敏用户信息</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">User</span> <span class="hljs-title">getSafetyUser</span>(<span class="hljs-keyword">User</span> <span class="hljs-title">originUser</span>);<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户信息脱敏</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param originUser 原始用户</span><br><span class="hljs-comment"> * @return 脱敏后的用户</span><br><span class="hljs-comment"> */</span><br>public User get<span class="hljs-constructor">SafetyUser(User <span class="hljs-params">originUser</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (originUser<span class="hljs-operator"> == </span>null)<br>        return null;<br><br>    User safetyUser = <span class="hljs-keyword">new</span> <span class="hljs-constructor">User()</span>;<br>    safetyUser.set<span class="hljs-constructor">Id(<span class="hljs-params">originUser</span>.<span class="hljs-params">getId</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">UserAccount(<span class="hljs-params">originUser</span>.<span class="hljs-params">getUserAccount</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">Username(<span class="hljs-params">originUser</span>.<span class="hljs-params">getUsername</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">AvatarUrl(<span class="hljs-params">originUser</span>.<span class="hljs-params">getAvatarUrl</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">Gender(<span class="hljs-params">originUser</span>.<span class="hljs-params">getGender</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">Phone(<span class="hljs-params">originUser</span>.<span class="hljs-params">getPhone</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">Email(<span class="hljs-params">originUser</span>.<span class="hljs-params">getEmail</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">UserStatus(<span class="hljs-params">originUser</span>.<span class="hljs-params">getUserStatus</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">CreateTime(<span class="hljs-params">originUser</span>.<span class="hljs-params">getCreateTime</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">IsDelete(<span class="hljs-params">originUser</span>.<span class="hljs-params">getIsDelete</span>()</span>);<br>    safetyUser.set<span class="hljs-constructor">UserRole(<span class="hljs-params">originUser</span>.<span class="hljs-params">getUserRole</span>()</span>);<br><br>    return safetyUser;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h5><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户登录</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param userLoginRequest 登录信息封装</span><br><span class="hljs-comment">     * @param request          request</span><br><span class="hljs-comment">     * @return User</span><br><span class="hljs-comment">     */</span><br>    @<span class="hljs-constructor">PostMapping(<span class="hljs-string">&quot;/login&quot;</span>)</span><br>    public User user<span class="hljs-constructor">Login(@RequestBody UserLoginRequest <span class="hljs-params">userLoginRequest</span>, HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br>        String userAccount = userLoginRequest.get<span class="hljs-constructor">UserAccount()</span>;<br>        String userPassword = userLoginRequest.get<span class="hljs-constructor">UserPassword()</span>;<br>        <span class="hljs-comment">//controller对参数的校验</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>)</span>)<br>            return null;<br><br>        return userService.user<span class="hljs-constructor">Login(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">request</span>)</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户注册</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param userRegisterRequest 注册信息封装类</span><br><span class="hljs-comment"> * @return id</span><br><span class="hljs-comment"> */</span><br>@<span class="hljs-constructor">PostMapping(<span class="hljs-string">&quot;/register&quot;</span>)</span><br>public Long user<span class="hljs-constructor">Register(@RequestBody UserRegisterRequest <span class="hljs-params">userRegisterRequest</span>)</span> &#123;<br>    String userAccount = userRegisterRequest.get<span class="hljs-constructor">UserAccount()</span>;<br>    String userPassword = userRegisterRequest.get<span class="hljs-constructor">UserPassword()</span>;<br>    String checkPassword = userRegisterRequest.get<span class="hljs-constructor">CheckPassword()</span>;<br>    <span class="hljs-comment">//controller对参数的校验</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>)</span>)<br>        return null;<br><br>    return userService.user<span class="hljs-constructor">Register(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查询用户-权限校验"><a href="#查询用户-权限校验" class="headerlink" title="查询用户+权限校验"></a>查询用户+权限校验</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询用户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param username 用户名</span><br><span class="hljs-comment">     * @return 查到的用户</span><br><span class="hljs-comment">     */</span><br>    @<span class="hljs-constructor">GetMapping(<span class="hljs-string">&quot;/search&quot;</span>)</span><br>    public List&lt;User&gt; user<span class="hljs-constructor">Search(String <span class="hljs-params">username</span>, HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br>        <span class="hljs-comment">// 1.校验权限</span><br>        <span class="hljs-keyword">if</span> (!is<span class="hljs-constructor">Admin(<span class="hljs-params">request</span>)</span>)<br>            return <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>        <span class="hljs-comment">// 2.判空, 默认查询全部</span><br>        QueryWrapper&lt;User&gt; qw = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;<span class="hljs-literal">()</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">NotBlank(<span class="hljs-params">username</span>)</span>)<br>            qw.like(<span class="hljs-string">&quot;username&quot;</span>, username);<br>        <span class="hljs-comment">// 3.查询</span><br>        List&lt;User&gt; userList = userService.<span class="hljs-built_in">list</span>(qw);<br>        <span class="hljs-comment">// 4.返回脱敏的用户信息</span><br>        return userList.stream<span class="hljs-literal">()</span>.map(user -&gt; userService.get<span class="hljs-constructor">SafetyUser(<span class="hljs-params">user</span>)</span>).collect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collectors</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">List()</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="删除用户-权限校验"><a href="#删除用户-权限校验" class="headerlink" title="删除用户+权限校验"></a>删除用户+权限校验</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除用户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 用户id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true/false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@DeleteMapping(<span class="hljs-string">&quot;/delete&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">Boolean</span> userDelete(<span class="hljs-built_in">Long</span> id, HttpServletRequest request) &#123;<br>        <span class="hljs-comment">// 1.校验权限</span><br>        <span class="hljs-keyword">if</span> (!isAdmin(request))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">if</span> (id &lt;= <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-comment">// 2.删除用户(只要配置MP的逻辑删除的话, 该删除为逻辑删除)</span><br>        <span class="hljs-keyword">return</span> userService.removeById(id);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="获取用户登录态"><a href="#获取用户登录态" class="headerlink" title="获取用户登录态"></a>获取用户登录态</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 查询用户</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * @param username 用户名</span><br><span class="hljs-comment">   * @return 查到的用户</span><br><span class="hljs-comment">   */</span><br>  @<span class="hljs-constructor">GetMapping(<span class="hljs-string">&quot;/search&quot;</span>)</span><br>  public List&lt;User&gt; user<span class="hljs-constructor">Search(String <span class="hljs-params">username</span>, HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br>      <span class="hljs-comment">// 1.校验权限</span><br>      <span class="hljs-keyword">if</span> (!is<span class="hljs-constructor">Admin(<span class="hljs-params">request</span>)</span>)<br>          return <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>      <span class="hljs-comment">// 2.判空, 默认查询全部</span><br>      QueryWrapper&lt;User&gt; qw = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;<span class="hljs-literal">()</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">NotBlank(<span class="hljs-params">username</span>)</span>)<br>          qw.like(<span class="hljs-string">&quot;username&quot;</span>, username);<br>      <span class="hljs-comment">// 3.查询</span><br>      List&lt;User&gt; userList = userService.<span class="hljs-built_in">list</span>(qw);<br>      <span class="hljs-comment">// 4.返回脱敏的用户信息</span><br>      return userList.stream<span class="hljs-literal">()</span>.map(user -&gt; userService.get<span class="hljs-constructor">SafetyUser(<span class="hljs-params">user</span>)</span>).collect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collectors</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">List()</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="封装校验管理员逻辑"><a href="#封装校验管理员逻辑" class="headerlink" title="封装校验管理员逻辑"></a>封装校验管理员逻辑</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验是否为管理员</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param request request</span><br><span class="hljs-comment">     * @return 校验成功与否</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">Boolean</span> isAdmin(HttpServletRequest request) &#123;<br>        //校验是否为管理员<br>        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = (<span class="hljs-keyword">User</span>) request.getSession().getAttribute(USER_LOGIN_STATE);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">user</span> != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">user</span>.getUserRole() == ADMIN_ROLE;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="constant层"><a href="#constant层" class="headerlink" title="constant层"></a>constant层</h5><h2 id="封装常量"><a href="#封装常量" class="headerlink" title="封装常量"></a>封装常量</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//登录用户session Key</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> USER_LOGIN_STATE = <span class="hljs-string">&quot;userLoginState&quot;</span>;<br>   <span class="hljs-comment">//管理员权限</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> ADMIN_ROLE = <span class="hljs-number">1</span>;<br>   <span class="hljs-comment">//普通用户权限</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> DEFAULT_ROLE = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h5 id="model-request层"><a href="#model-request层" class="headerlink" title="model/request层"></a>model/request层</h5><h2 id="封装login-register实体接收类"><a href="#封装login-register实体接收类" class="headerlink" title="封装login/register实体接收类"></a>封装login/register实体接收类</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haxe">@Data<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserLoginRequest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> userAccount;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> userPassword;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe">@Data<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRegisterRequest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> userAccount;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> userPassword;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> checkPassword;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h1><h2 id="修改登录页面"><a href="#修改登录页面" class="headerlink" title="修改登录页面"></a>修改登录页面</h2><ul><li><p>熟悉登录流程 请求地址 返回数据</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">// 登录<br>const <span class="hljs-keyword">user</span> <span class="hljs-title">= await</span> login(&#123;<br>  ...values,<br>  <span class="hljs-keyword">type</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/** 登录接口 POST /api/login/account */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">body: API.LoginParams, options?: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> request&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">LoginResult</span>&gt;(<span class="hljs-string">&#x27;/api/user/login&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">data</span>: body,<br>    ...(options || &#123;&#125;),<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>登录表单的校验逻辑(账号 密码)</p></li><li><p>登录校验  成功则提示登录成功   重定向到welcome页面</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 登录成功</span><br><span class="hljs-keyword">if</span> (user) &#123;<br>  <span class="hljs-keyword">const</span> defaultLoginSuccessMessage = <span class="hljs-string">&#x27;登录成功！&#x27;</span>;<br>  message.success(defaultLoginSuccessMessage);<br>  <span class="hljs-keyword">await</span> fetchUserInfo();<br>  <span class="hljs-comment">/** 此方法会跳转到 redirect 参数所在的位置 */</span><br>  <span class="hljs-keyword">if</span> (!history) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">const</span> &#123;query&#125; = history.location;<br>  <span class="hljs-keyword">const</span> &#123;redirect&#125; = query <span class="hljs-keyword">as</span> &#123;<br>    redirect: <span class="hljs-built_in">string</span>;<br>  &#125;;<br>  <span class="hljs-comment">// &#123; path: &#x27;/&#x27;, redirect: &#x27;/welcome&#x27; &#125;,</span><br>  <span class="hljs-comment">// 跳转到欢迎页面</span><br>  history.push(redirect || <span class="hljs-string">&#x27;/&#x27;</span>);<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>登录校验  失败则提示登录失败</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">const</span> defaultLoginFailureMessage = <span class="hljs-string">&#x27;登录失败，请重试！&#x27;</span>;<br>message.<span class="hljs-keyword">error</span>(defaultLoginFailureMessage);<br></code></pre></td></tr></table></figure></li></ul><h2 id="开发注册页面"><a href="#开发注册页面" class="headerlink" title="开发注册页面"></a>开发注册页面</h2><ul><li><p>登录页的复制粘贴</p></li><li><p>路由的理解  设置注册页的路由  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;注册&#x27;</span>, <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/user/register&#x27;</span>, component: <span class="hljs-string">&#x27;./user/Register&#x27;</span> &#125;,<br></code></pre></td></tr></table></figure></li><li><p>注册表单的校验逻辑(账号 密码)</p></li><li><p>熟悉注册流程  请求地址 返回数据</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-comment">// 发起请求</span><br><span class="hljs-keyword">const</span> id = <span class="hljs-keyword">await</span> <span class="hljs-keyword">register</span>(<span class="hljs-comment">&#123;</span><br><span class="hljs-comment">  ...values,</span><br><span class="hljs-comment">  type,</span><br><span class="hljs-comment">&#125;</span>)<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/** 注册接口 POST /api/login/account */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">body: API.LoginParams, options?: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> request&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">LoginResult</span>&gt;(<span class="hljs-string">&#x27;/api/user/register&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">data</span>: body,<br>    ...(options || &#123;&#125;),<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>解决访问注册页面   重定向到Login问题   业务逻辑   白名单内, 无需重定向到登录页</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//白名单内无需重定向</span><br><span class="hljs-keyword">if</span> (NO_NEED_LOGIN_WHITE_LIST.<span class="hljs-built_in">includes</span>(location.pathname))<br>  <span class="hljs-keyword">return</span>;<br><span class="hljs-comment">// 白名单外, 如果没有登录, 重定向到 login</span><br><span class="hljs-keyword">if</span> (!initialState?.currentUser) &#123;<br>  history.<span class="hljs-built_in">push</span>(loginPath);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注册成功  提示”注册成功”  跳转登录页面</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">history.<span class="hljs-built_in">push</span>(&#123;<br>  <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;user/login&#x27;</span>,<br>  query,<br>&#125;)<br>跳转到登录页面<br></code></pre></td></tr></table></figure></li><li><p>注册失败  提示”注册失败”   </p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">const</span> defaultLoginFailureMessage = <span class="hljs-string">&#x27;注册失败，请重试！&#x27;</span>;<br>message.<span class="hljs-keyword">error</span>(defaultLoginFailureMessage);<br></code></pre></td></tr></table></figure></li><li><p>“登录” 修改为 “注册”   (了解源码)</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">submitter=</span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable">  <span class="hljs-name">searchConfig:</span> &#123;</span><br><span class="hljs-template-variable">    submitText: <span class="hljs-string">&#x27;注册&#x27;</span></span><br><span class="hljs-template-variable">  &#125;</span><br><span class="hljs-template-variable">&#125;&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>添加注册校验  简单的逻辑  根据返回的数据  解构出密码和二次密码 判断二者是否相等</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">const</span> &#123;userPassword, checkPassword&#125; = values;<br><span class="hljs-comment">//校验</span><br><span class="hljs-keyword">if</span> (userPassword != checkPassword) &#123;<br>  message.<span class="hljs-keyword">error</span>(<span class="hljs-string">&#x27;两次输入的密码不一致!&#x27;</span>)<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加登录页跳转到注册页的链接”新用户注册”  仿照  “忘记密码”  </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;a<br>  href<span class="hljs-operator">=</span><span class="hljs-string">&quot;/user/register&quot;</span><br>  target<span class="hljs-operator">=</span><span class="hljs-string">&quot;_blank&quot;</span><br>  rel<span class="hljs-operator">=</span><span class="hljs-string">&quot;noreferrer&quot;</span><br>&gt;<br>  新用户注册<br>&lt;/a&gt;<br></code></pre></td></tr></table></figure></li></ul><h1 id="获取当前用户登录态"><a href="#获取当前用户登录态" class="headerlink" title="获取当前用户登录态"></a>获取当前用户登录态</h1><h2 id="后端实现接口"><a href="#后端实现接口" class="headerlink" title="后端实现接口"></a>后端实现接口</h2><p>返回当前用户的当前信息(重新查询过数据库)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/currentUser&quot;</span>)</span><br><span class="hljs-keyword">public</span> User getCurrentUser(HttpServletRequest request) &#123;<br>    User currentUser = (User) request.getSession().getAttribute(USER_LOGIN_STATE);<br>    <span class="hljs-keyword">if</span> (currentUser == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-built_in">Long</span> id = currentUser.getId();<br>    <span class="hljs-comment">// 查询数据库, 获取最新信息, 而非登录时记录的信息</span><br>    <span class="hljs-keyword">return</span> userService.getById(id);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="前端获取用户登录态"><a href="#前端获取用户登录态" class="headerlink" title="前端获取用户登录态"></a>前端获取用户登录态</h2><ul><li>app.tsx   前端服务入口   每次打开页面, 都会执行查询</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">// 查询用户登录态信息</span><br><span class="hljs-keyword">return</span> <span class="hljs-function">await <span class="hljs-title">queryCurrentUser</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">// 请求</span><br><span class="hljs-keyword">return</span> request&lt;API.CurrentUser&gt;(<span class="hljs-string">&#x27;/api/user/currentUser&#x27;</span>, &#123;<br>  method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  ...(<span class="hljs-keyword">options</span> || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>修改CurrentUser, 将返回的字段全部修改为对应数据库中的字段</li></ul><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">type CurrentUser = &#123;<br>  <span class="hljs-attribute">id?</span>: number;<br>  <span class="hljs-attribute">userAccount?</span>: string;<br>  <span class="hljs-attribute">username?</span>: string;<br>  <span class="hljs-attribute">avatarUtil?</span>: string;<br>  <span class="hljs-attribute">gender?</span>: string;<br>  <span class="hljs-attribute">phone?</span>: string;<br>  <span class="hljs-attribute">email?</span>: string;<br>  <span class="hljs-attribute">userStatus?</span>: string;<br>  <span class="hljs-attribute">userRole?</span>: string;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>设置白名单, 登录注册页面不会返回查询到的用户登录态, 其余页面会返回查询到的用户登录态</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 白名单内(登陆注册), 不返回用户登录态信息</span><br><span class="hljs-keyword">if</span> (NO_NEED_LOGIN_WHITE_LIST.includes(history.location.pathname)) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    fetchUserInfo,<br>    settings: defaultSettings,<br>  &#125;;<br>&#125;<br><span class="hljs-comment">// 登陆注册后, 页面返回用户登录态信息</span><br><span class="hljs-keyword">const</span> currentUser = await fetchUserInfo();<br><span class="hljs-keyword">return</span> &#123;<br>  fetchUserInfo,<br>  currentUser,<br>  settings: defaultSettings,<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="开发欢迎页面"><a href="#开发欢迎页面" class="headerlink" title="开发欢迎页面"></a>开发欢迎页面</h1><ul><li>设置欢迎页面的水印  头像</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">waterMarkProps: &#123;<br>  <span class="hljs-regexp">//</span> 添加水印<br>  content: initialState?.currentUser?.username, <span class="hljs-regexp">//</span> 以用户昵称作为水印<br>&#125;,<br></code></pre></td></tr></table></figure><ul><li>头像的话在/src/components/RightContext/AvatarDropdown.tsx里有个引用</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;Avatar size<span class="hljs-operator">=</span><span class="hljs-string">&quot;small&quot;</span> className<span class="hljs-operator">=</span>&#123;styles.avatar&#125; src<span class="hljs-operator">=</span>&#123;currentUser.avatarUrl&#125; alt<span class="hljs-operator">=</span><span class="hljs-string">&quot;avatar&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><ul><li>我这边头像刷新不出来是因为数据库里字段名写成avatarUtil了,一直没发现,改了正确的字段名以及映射实体类属性名  Mapper.xml 文件后 头像映射正常了</li></ul><h1 id="开发用户管理页面"><a href="#开发用户管理页面" class="headerlink" title="开发用户管理页面"></a>开发用户管理页面</h1><h2 id="新建一个管理界面"><a href="#新建一个管理界面" class="headerlink" title="新建一个管理界面"></a>新建一个管理界面</h2><ul><li><p>他奶奶的我这边出问题了</p></li><li><p>我新建了一个/Pages/Admin/UserManage    把Register文件夹复制过去打算修改, 结果它给我把Register的路由给替换了</p></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;注册&#x27;</span>, <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/user/register&#x27;</span>, component: <span class="hljs-string">&#x27;./user/UserManage&#x27;</span> &#125;,<br></code></pre></td></tr></table></figure><ul><li>然后前端直接挂掉了, 报错报了这个玩意儿  妈的找了半天 终于发现了 把路由改回来了</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">Cannot <span class="hljs-built_in">find</span> <span class="hljs-built_in">module</span> <span class="hljs-string">&#x27;D:/Project/星球项目/ClientCenter/myapp/src/pages/user/UserManage&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>给新增的用户管理页面加个路由</li></ul><p>​    path: ‘/admin/user-manager’    是访问路径</p><p>​    component: ‘./Admin/UserManage’    是资源路径</p><p>​    仿照下面的写就行了</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&#123;<br>  <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/admin&#x27;</span>,<br>  <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;管理页&#x27;</span>,<br>  icon: <span class="hljs-string">&#x27;crown&#x27;</span>,<br>  <span class="hljs-keyword">access</span>: <span class="hljs-string">&#x27;canAdmin&#x27;</span>,<br>  component: <span class="hljs-string">&#x27;./Admin&#x27;</span>,<br>  routes: [<br>  // 用户管理<br>    &#123; <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/admin/user-manager&#x27;</span>, <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;用户管理&#x27;</span>, icon: <span class="hljs-string">&#x27;smile&#x27;</span>, component: <span class="hljs-string">&#x27;./Admin/UserManage&#x27;</span> &#125;,<br>    &#123; <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/admin/sub-page&#x27;</span>, <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;二级管理页&#x27;</span>, icon: <span class="hljs-string">&#x27;smile&#x27;</span>, component: <span class="hljs-string">&#x27;./Welcome&#x27;</span> &#125;,<br>    &#123; component: <span class="hljs-string">&#x27;./404&#x27;</span> &#125;,<br>  ],<br>&#125;,<br></code></pre></td></tr></table></figure><ul><li>访问<a href="http://localhost:8000/admin/user-manager%E5%8F%91%E7%8E%B0%E6%97%A0%E6%9D%83%E8%AE%BF%E9%97%AE">http://localhost:8000/admin/user-manager发现无权访问</a>    好像存在访问权限    访问不到</li></ul><h4 id="项目全局入口"><a href="#项目全局入口" class="headerlink" title="项目全局入口"></a>项目全局入口</h4><h6 id="app-tsx是项目全局入口-里面包含了访问页面时-就会调用的方法-重定向到Login页-查询用户登录态"><a href="#app-tsx是项目全局入口-里面包含了访问页面时-就会调用的方法-重定向到Login页-查询用户登录态" class="headerlink" title="app.tsx是项目全局入口     里面包含了访问页面时, 就会调用的方法,     重定向到Login页   查询用户登录态"></a>app.tsx是项目全局入口     里面包含了访问页面时, 就会调用的方法,     <strong>重定向到Login页   查询用户登录态</strong></h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&#123;<br>  <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/admin&#x27;</span>,<br>  <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;管理页&#x27;</span>,<br>  icon: <span class="hljs-string">&#x27;crown&#x27;</span>,<br>  // 管理员权限校验<br>  <span class="hljs-keyword">access</span>: <span class="hljs-string">&#x27;canAdmin&#x27;</span>,<br>  component: <span class="hljs-string">&#x27;./Admin&#x27;</span>,<br>  routes: [<br>    &#123; <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/admin/user-manager&#x27;</span>, <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;用户管理&#x27;</span>, icon: <span class="hljs-string">&#x27;smile&#x27;</span>, component: <span class="hljs-string">&#x27;./Admin/UserManage&#x27;</span> &#125;,<br>    &#123; <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/admin/sub-page&#x27;</span>, <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;二级管理页&#x27;</span>, icon: <span class="hljs-string">&#x27;smile&#x27;</span>, component: <span class="hljs-string">&#x27;./Welcome&#x27;</span> &#125;,<br>    &#123; component: <span class="hljs-string">&#x27;./404&#x27;</span> &#125;,<br>  ],<br>&#125;,<br></code></pre></td></tr></table></figure><h6 id="看到那个access了吗-通过校验’canAdmin’的真假-判断是否具有管理员权限-这就是控制了这个路由的访问权限-怎么实现的"><a href="#看到那个access了吗-通过校验’canAdmin’的真假-判断是否具有管理员权限-这就是控制了这个路由的访问权限-怎么实现的" class="headerlink" title="看到那个access了吗  通过校验’canAdmin’的真假   判断是否具有管理员权限  这就是控制了这个路由的访问权限    怎么实现的?"></a>看到那个access了吗  通过校验’canAdmin’的真假   判断是否具有管理员权限  这就是控制了这个路由的访问权限    怎么实现的?</h6><h4 id="访问权限管理"><a href="#访问权限管理" class="headerlink" title="访问权限管理"></a>访问权限管理</h4><h6 id="access-ts是访问权限管理-在查询到用户登录态后-通过返回结果CurrentUser来校验-这段逻辑非常简单-我们可以修改为自己的逻辑"><a href="#access-ts是访问权限管理-在查询到用户登录态后-通过返回结果CurrentUser来校验-这段逻辑非常简单-我们可以修改为自己的逻辑" class="headerlink" title="access.ts是访问权限管理    在查询到用户登录态后    通过返回结果CurrentUser来校验    这段逻辑非常简单    我们可以修改为自己的逻辑"></a>access.ts是访问权限管理    在查询到用户登录态后    通过返回结果CurrentUser来校验    这段逻辑非常简单    我们可以修改为自己的逻辑</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">access</span>(<span class="hljs-params">initialState: &#123; currentUser?: API.CurrentUser &#125; | <span class="hljs-literal">undefined</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; currentUser &#125; = initialState ?? &#123;&#125;;<br>  <span class="hljs-comment">// 权限校验</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-comment">// 校验管理员权限</span><br>    <span class="hljs-attr">canAdmin</span>: currentUser &amp;&amp; currentUser.<span class="hljs-property">access</span> === <span class="hljs-string">&#x27;admin&#x27;</span><br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>修改访问路由的管理员权限的校验规则</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">// 校验管理员权限</span><br>canAdmin: currentUser <span class="hljs-meta">&amp;&amp; currentUser.userRole === 1,</span><br></code></pre></td></tr></table></figure><ul><li>找一个管理员账号登录,  发现<a href="http://localhost:8000/admin/user-manager%E9%A1%B5%E9%9D%A2%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E4%BA%86">http://localhost:8000/admin/user-manager页面可以访问了</a>  因为我们由管理员权限了</li></ul><h2 id="正确显示管理页面"><a href="#正确显示管理页面" class="headerlink" title="正确显示管理页面"></a>正确显示管理页面</h2><h6 id="原本的页面显示组件是-Admin-tsx"><a href="#原本的页面显示组件是-Admin-tsx" class="headerlink" title="原本的页面显示组件是 Admin.tsx"></a>原本的页面显示组件是 Admin.tsx</h6><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// 父路由</span><br>path: &#x27;/admin&#x27;,<br>name: &#x27;管理页&#x27;,<br><span class="hljs-attribute">icon</span>: <span class="hljs-string">&#x27;crown&#x27;</span>,<br><span class="hljs-attribute">component</span>: <span class="hljs-string">&#x27;./Admin&#x27;</span>,<br><span class="hljs-comment">// 子路由</span><br>    <span class="hljs-attribute">routes</span>: [<br>      &#123; <span class="hljs-attribute">path</span>: <span class="hljs-string">&#x27;/admin/user-manager&#x27;</span>, <span class="hljs-attribute">name</span>: <span class="hljs-string">&#x27;用户管理&#x27;</span>, <span class="hljs-attribute">icon</span>: <span class="hljs-string">&#x27;smile&#x27;</span>, <span class="hljs-attribute">component</span>: <span class="hljs-string">&#x27;./Admin/UserManage&#x27;</span> &#125;,<br>      &#123; component: &#x27;./404&#x27; &#125;,<br>    ],<br></code></pre></td></tr></table></figure><h6 id="组件里面这么写"><a href="#组件里面这么写" class="headerlink" title="组件里面这么写:"></a>组件里面这么写:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">onst <span class="hljs-title class_">Admin</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">FC</span> = <span class="hljs-function">(<span class="hljs-params">&#123;children&#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PageHeaderWrapper</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&#123;</span>&#x27; <span class="hljs-attr">这个页面只有</span> <span class="hljs-attr">admin</span> <span class="hljs-attr">权限才能查看</span>&#x27;&#125;&gt;</span></span><br><span class="language-xml">    // 展示子路由组件</span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">PageHeaderWrapper</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><h6 id="这样管理页面就能显示我们定义的组件-Admin-UserManage-index-tsx-了"><a href="#这样管理页面就能显示我们定义的组件-Admin-UserManage-index-tsx-了" class="headerlink" title="这样管理页面就能显示我们定义的组件 Admin/UserManage/index.tsx 了"></a>这样管理页面就能显示我们定义的组件 Admin/UserManage/index.tsx 了</h6><ul><li><p>我们上ProComponents的高级表格里找一个高级表格, 作为管理页面</p></li><li><p>直接找一个漂亮有用的, 粘贴到/UserManage/index.tsx里</p></li><li><p>接下来就是对该页面的改造了</p></li></ul><h2 id="改造新的组件-管理页面"><a href="#改造新的组件-管理页面" class="headerlink" title="改造新的组件(管理页面)"></a>改造新的组件(管理页面)</h2><h4 id="改造表格数据-数据如何展示"><a href="#改造表格数据-数据如何展示" class="headerlink" title="改造表格数据(数据如何展示)"></a>改造表格数据(数据如何展示)</h4><ul><li>改造返回数据类型 (API.CurrentUser) 和各列名</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//</span> <span class="hljs-string">返回的数据类型改造为Api.currentUser</span><br><span class="hljs-attr">const columns:</span> <span class="hljs-string">ProColumns&lt;API.CurrentUser&gt;[]</span> <span class="hljs-string">=</span> [<br>  &#123;<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;账号&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;userAccount&#x27;</span>,<br>    <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;昵称&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;username&#x27;</span>,<br>    <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;头像&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;avatarUrl&#x27;</span>,<br>    <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;性别&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;gender&#x27;</span>,<br>    <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;电话&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;phone&#x27;</span>,<br>    <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;邮件&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;email&#x27;</span>,<br>    <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;角色&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;userRole&#x27;</span>,<br>    <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;createTime&#x27;</span>,<br>    <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">disable:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;状态&#x27;</span>,<br>    <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;state&#x27;</span>,<br>    <span class="hljs-attr">filters:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">onFilter:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">ellipsis:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">valueType:</span> <span class="hljs-string">&#x27;select&#x27;</span>,<br>    <span class="hljs-attr">valueEnum:</span> &#123;<br>      <span class="hljs-attr">all:</span> &#123;<span class="hljs-attr">text:</span> <span class="hljs-string">&#x27;超长&#x27;</span><span class="hljs-string">.repeat(50)</span>&#125;,<br>      <span class="hljs-attr">open:</span> &#123;<br>        <span class="hljs-attr">text:</span> <span class="hljs-string">&#x27;未解决&#x27;</span>,<br>        <span class="hljs-attr">status:</span> <span class="hljs-string">&#x27;Error&#x27;</span>,<br>      &#125;,<br>      <span class="hljs-attr">closed:</span> &#123;<br>        <span class="hljs-attr">text:</span> <span class="hljs-string">&#x27;已解决&#x27;</span>,<br>        <span class="hljs-attr">status:</span> <span class="hljs-string">&#x27;Success&#x27;</span>,<br>        <span class="hljs-attr">disabled:</span> <span class="hljs-literal">true</span>,<br>      &#125;,<br>      <span class="hljs-attr">processing:</span> &#123;<br>        <span class="hljs-attr">text:</span> <span class="hljs-string">&#x27;解决中&#x27;</span>,<br>        <span class="hljs-attr">status:</span> <span class="hljs-string">&#x27;Processing&#x27;</span>,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br><br>]<span class="hljs-string">;</span><br></code></pre></td></tr></table></figure><h4 id="改造访问路径-数据从何而来"><a href="#改造访问路径-数据从何而来" class="headerlink" title="改造访问路径(数据从何而来)"></a>改造访问路径(数据从何而来)</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade">columns=&#123;columns&#125;<br>actionRef=&#123;actionRef&#125;<br>cardBordered<br>request=&#123;async (params = &#123;&#125;, <span class="hljs-built_in">sort</span>, <span class="hljs-built_in">filter</span>) =&gt; &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sort</span>, <span class="hljs-built_in">filter</span>);<br>  <span class="hljs-comment">// 返回userList</span><br>  <span class="hljs-comment">// 自定义函数</span><br>  const userList = await searchUsers();<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">data</span>: userList<br>  &#125;<br>&#125;&#125;<br></code></pre></td></tr></table></figure><ul><li>在api.ts下编写自定义函数searchUsers, 并设置访问路径</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/** 此处后端没有提供注释 GET /api/notices */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">searchUsers</span>(<span class="hljs-params">options?: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;</span>) &#123;<br><span class="hljs-comment">// 返回数据格式为API.CurrentUser</span><br>  <span class="hljs-keyword">return</span> request&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">CurrentUser</span>&gt;(<span class="hljs-string">&#x27;/api/user/search&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    ...(options || &#123;&#125;),<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>后端返回所有用户数据, 并展示在表格中 展示成功了</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询用户</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param username 用户名</span><br><span class="hljs-comment"> * @return 查到的用户</span><br><span class="hljs-comment"> */</span><br>@<span class="hljs-constructor">GetMapping(<span class="hljs-string">&quot;/search&quot;</span>)</span><br>public List&lt;User&gt; user<span class="hljs-constructor">Search(String <span class="hljs-params">username</span>, HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br>    <span class="hljs-comment">// 1.校验权限</span><br>    <span class="hljs-keyword">if</span> (!is<span class="hljs-constructor">Admin(<span class="hljs-params">request</span>)</span>)<br>        return <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>    <span class="hljs-comment">// 2.判空, 默认查询全部</span><br>    QueryWrapper&lt;User&gt; qw = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;<span class="hljs-literal">()</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">NotBlank(<span class="hljs-params">username</span>)</span>)<br>        qw.like(<span class="hljs-string">&quot;username&quot;</span>, username);<br>    <span class="hljs-comment">// 3.查询</span><br>    List&lt;User&gt; userList = userService.<span class="hljs-built_in">list</span>(qw);<br>    <span class="hljs-comment">// 4.返回脱敏的用户信息</span><br>    return userList.stream<span class="hljs-literal">()</span>.map(user -&gt; userService.get<span class="hljs-constructor">SafetyUser(<span class="hljs-params">user</span>)</span>).collect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collectors</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">List()</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="项目全局命名空间-把一组TS类型全部定义到了这个命名空间下-即定义了一组返回数据对象-取的时候就不需要import了-直接API-TS类型就可以取到"><a href="#项目全局命名空间-把一组TS类型全部定义到了这个命名空间下-即定义了一组返回数据对象-取的时候就不需要import了-直接API-TS类型就可以取到" class="headerlink" title="项目全局命名空间, 把一组TS类型全部定义到了这个命名空间下, 即定义了一组返回数据对象, 取的时候就不需要import了, 直接API.TS类型就可以取到"></a><em><strong>项目全局命名空间</strong></em>, <em>把一组TS类型全部定义到了这个命名空间下, 即定义了一组返回数据对象, 取的时候就不需要import了, 直接API.TS类型就可以取到</em></h6><h6 id="src-services-ant-design-pro-typings-d-ts"><a href="#src-services-ant-design-pro-typings-d-ts" class="headerlink" title="src/services/ant-design-pro/typings.d.ts"></a>src/services/ant-design-pro/typings.d.ts</h6><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs lasso">declare namespace API &#123;<br>  <span class="hljs-keyword">type</span> CurrentUser = &#123;<br>  <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> LoginResult = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> RegisterResult = number;<br><br>  <span class="hljs-keyword">type</span> PageParams = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> RuleListItem = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> RuleList = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> FakeCaptcha = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> LoginParams = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> RegisterParams = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> ErrorResponse = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> NoticeIconList = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br><br>  <span class="hljs-keyword">type</span> NoticeIconItemType = <span class="hljs-string">&#x27;notification&#x27;</span> | <span class="hljs-string">&#x27;message&#x27;</span> | <span class="hljs-string">&#x27;event&#x27;</span>;<br><br>  <span class="hljs-keyword">type</span> NoticeIconItem = &#123;<br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="src-services-ant-design-pro-api-ts-这里定义了许多请求接口-根据请求地址-请求方式发出请求"><a href="#src-services-ant-design-pro-api-ts-这里定义了许多请求接口-根据请求地址-请求方式发出请求" class="headerlink" title="src/services/ant-design-pro/api.ts    这里定义了许多请求接口    根据请求地址 请求方式发出请求"></a>src/services/ant-design-pro/api.ts    <em>这里定义了许多请求接口</em>    <em>根据请求地址</em> 请求方式发出请求</h6><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123;request&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="修改表格显示细节"><a href="#修改表格显示细节" class="headerlink" title="修改表格显示细节"></a>修改表格显示细节</h2><ul><li><p>通过columns定义表格有哪些列</p></li><li><p>column属性</p></li></ul><p>​        <em><strong>dataIndex    对应返回数据对象的属性</strong></em></p><p>​        <em><strong>title    表格列名</strong></em></p><p>​        <em><strong>copyable    是否允许复制</strong></em></p><p>​        <em><strong>ellipsis    是否允许缩略</strong></em></p><p>​        <em><strong>valueType    用于声明这一列的类型</strong></em></p><ul><li>头像</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;头像&#x27;</span>,<br>  <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;avatarUrl&#x27;</span>,<br>  <span class="hljs-attr">copyable</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.avatarUrl&#125;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;100&#125;/</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;,<br></code></pre></td></tr></table></figure><ul><li>性别    角色    状态</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br>  title: <span class="hljs-string">&#x27;性别&#x27;</span>,<br>  dataIndex: <span class="hljs-string">&#x27;gender&#x27;</span>,<br>  valueType: <span class="hljs-string">&#x27;select&#x27;</span>,<br>  valueEnum: &#123;<br>    <span class="hljs-number">0</span>: &#123;<br>      text: <span class="hljs-string">&#x27;女&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-number">1</span>: &#123;<br>      text: <span class="hljs-string">&#x27;男&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br>  title: <span class="hljs-string">&#x27;角色&#x27;</span>,<br>  dataIndex: <span class="hljs-string">&#x27;userRole&#x27;</span>,<br>  valueType: <span class="hljs-string">&#x27;select&#x27;</span>,<br>  valueEnum: &#123;<br>    <span class="hljs-number">0</span>: &#123;<br>      text: <span class="hljs-string">&#x27;普通用户&#x27;</span>,<br>      status: <span class="hljs-string">&#x27;Default&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-number">1</span>: &#123;<br>      text: <span class="hljs-string">&#x27;管理员&#x27;</span>,<br>      status: <span class="hljs-string">&#x27;Success&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br>  title: <span class="hljs-string">&#x27;状态&#x27;</span>,<br>  dataIndex: <span class="hljs-string">&#x27;userStatus&#x27;</span>,<br>  valueType: <span class="hljs-string">&#x27;select&#x27;</span>,<br>  valueEnum: &#123;<br>    <span class="hljs-number">0</span>: &#123;<br>      text: <span class="hljs-string">&#x27;正常&#x27;</span>,<br>      status: <span class="hljs-string">&#x27;Success&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-number">1</span>: &#123;<br>      text: <span class="hljs-string">&#x27;异常&#x27;</span>,<br>      status: <span class="hljs-string">&#x27;Error&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><h1 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h1><h2 id="新增注销功能"><a href="#新增注销功能" class="headerlink" title="新增注销功能"></a>新增注销功能</h2><ul><li>service层新增userLogout</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> user<span class="hljs-constructor">Logout(HttpServletRequest <span class="hljs-params">request</span>)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 用户注销</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">userLogout</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>   <span class="hljs-comment">// 移除session</span><br>       request.getSession().removeAttribute(USER_LOGIN_STATE);<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li>controller层新增userLogout</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 用户登录</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> request request</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> int</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@PostMapping(<span class="hljs-string">&quot;/logout&quot;</span>)</span><br>  <span class="hljs-keyword">public</span> Integer userLogout(HttpServletRequest request) &#123;<br>      <span class="hljs-comment">//controller对参数的校验</span><br>      <span class="hljs-keyword">if</span> (request == <span class="hljs-literal">null</span>)<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>      <span class="hljs-keyword">return</span> userService.userLogout(request);<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li>前端src/RightContent/AvatarDropdown.tsx下有注销功能</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 退出登录，并且将当前的 url 保存</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> loginOut = async () =&gt; &#123;<br>  await outLogin();<br>  <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">query</span> = &#123;&#125;, <span class="hljs-keyword">search</span>, pathname&#125; = history.location;<br>  <span class="hljs-keyword">const</span> &#123;redirect&#125; = <span class="hljs-keyword">query</span>;<br>  <span class="hljs-comment">// <span class="hljs-doctag">Note:</span> There may be security issues, please note</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">window</span>.location.pathname !== &#x27;/user/login&#x27; &amp;&amp; !redirect) &#123;<br>    history.<span class="hljs-keyword">replace</span>(&#123;<br>      pathname: &#x27;/user/login&#x27;,<br>      <span class="hljs-keyword">search</span>: stringify(&#123;<br>        redirect: pathname + <span class="hljs-keyword">search</span>,<br>      &#125;),<br>    &#125;);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>修改注销接口 请求路径 </li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/** 退出登录接口 POST /api/user/logout */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">outLogin</span>(<span class="hljs-params">options?: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> request&lt;<span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">any</span>&gt;&gt;(<span class="hljs-string">&#x27;/api/user/logout&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    ...(options || &#123;&#125;),<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注销功能优化完毕"><a href="#注销功能优化完毕" class="headerlink" title="注销功能优化完毕"></a>注销功能优化完毕</h4><h2 id="用户必填信息新增星球编号"><a href="#用户必填信息新增星球编号" class="headerlink" title="用户必填信息新增星球编号"></a>用户必填信息新增星球编号</h2><ul><li>user表新增字段planet_code</li><li>重新生成对应实体类 domain    Mapper.xml  </li><li>注册接收类新增planetCode</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe">@Data<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRegisterRequest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> userAccount;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> userPassword;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> checkPassword;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> planetCode;<br>&#125;<br></code></pre></td></tr></table></figure><p>service层</p><ul><li>注册校验新增</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">userRegister</span><span class="hljs-params">(<span class="hljs-type">String</span> userAccount, <span class="hljs-type">String</span> userPassword, <span class="hljs-type">String</span> checkPassword, <span class="hljs-type">String</span> planetCode)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 1.6.星球编号不能超过5位</span><br>       <span class="hljs-keyword">if</span> (planetCode.<span class="hljs-built_in">length</span>() &gt; <span class="hljs-number">5</span>)<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl">// <span class="hljs-number">1.8</span>.星球编号不能重复<br>       QueryWrapper&lt;User&gt; pc_lqw = new QueryWrapper&lt;&gt;();<br>       pc_lqw.e<span class="hljs-string">q(&quot;planet_code&quot;, planetCode)</span>;<br>       Long pc_count = userMapper.selectCount(pc_lqw);<br>       <span class="hljs-keyword">if</span> (pc_count &gt; <span class="hljs-number">0</span>)<br>           <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><ul><li>用户信息脱敏新增</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">safetyUser.set<span class="hljs-constructor">PlanetCode(<span class="hljs-params">originUser</span>.<span class="hljs-params">getPlanetCode</span>()</span>);<br></code></pre></td></tr></table></figure><p>controller层</p><ul><li>controller参数校验</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//controller对参数的校验</span><br><span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>)<br>    return null;<br></code></pre></td></tr></table></figure><ul><li>注册页面新增星球编号填写和校验</li></ul><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ProFormText</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;planetCode&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">fieldProps</span>=</span></span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable">    <span class="hljs-name">size:</span> <span class="hljs-string">&#x27;large&#x27;</span>,</span><br><span class="hljs-template-variable">    prefix: &lt;LockOutlined <span class="hljs-attr">className</span>=&#123;styles.prefixIcon&#125;/&gt;,</span><br><span class="hljs-template-variable">  &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">请输入星球编号</span>&#x27;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">rules</span>=<span class="hljs-string">&#123;[</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &#123;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">required:</span> <span class="hljs-attr">true</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">message:</span> &#x27;<span class="hljs-attr">星球编号是必填项</span>！&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">    &#125;,</span></span><br><span class="hljs-tag"><span class="language-xml">    &#123;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">max:</span> <span class="hljs-attr">5</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">type:</span> &#x27;<span class="hljs-attr">string</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">message:</span> &#x27;<span class="hljs-attr">长度不能大于5位</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">    &#125;,</span></span><br><span class="hljs-tag"><span class="language-xml">  ]&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">/&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>测试类新增planetCode</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void user<span class="hljs-constructor">Register()</span> &#123;<br>    String userAccount = <span class="hljs-string">&quot;memory&quot;</span>;<br>    String userPassword = <span class="hljs-string">&quot;&quot;</span>;<br>    String checkPassword = <span class="hljs-string">&quot;123456&quot;</span>;<br>    String planetCode = <span class="hljs-string">&quot;17265&quot;</span>;<br><br>    long result = userService.user<span class="hljs-constructor">Register(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Assertions</span>.</span></span><span class="hljs-keyword">assert</span><span class="hljs-constructor">Equals(-1, <span class="hljs-params">result</span>)</span>;<br>    userAccount = <span class="hljs-string">&quot;mem&quot;</span>;<br>    result = userService.user<span class="hljs-constructor">Register(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Assertions</span>.</span></span><span class="hljs-keyword">assert</span><span class="hljs-constructor">Equals(-1, <span class="hljs-params">result</span>)</span>;<br>    userPassword = <span class="hljs-string">&quot;123456&quot;</span>;<br>    result = userService.user<span class="hljs-constructor">Register(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Assertions</span>.</span></span><span class="hljs-keyword">assert</span><span class="hljs-constructor">Equals(-1, <span class="hljs-params">result</span>)</span>;<br>    userAccount = <span class="hljs-string">&quot;me mory&quot;</span>;<br>    userPassword = <span class="hljs-string">&quot;12345678&quot;</span>;<br>    result = userService.user<span class="hljs-constructor">Register(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Assertions</span>.</span></span><span class="hljs-keyword">assert</span><span class="hljs-constructor">Equals(-1, <span class="hljs-params">result</span>)</span>;<br>    userAccount = <span class="hljs-string">&quot;me mory&quot;</span>;<br>    checkPassword = <span class="hljs-string">&quot;12345678&quot;</span>;<br>    result = userService.user<span class="hljs-constructor">Register(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Assertions</span>.</span></span><span class="hljs-keyword">assert</span><span class="hljs-constructor">Equals(-1, <span class="hljs-params">result</span>)</span>;<br>    userAccount = <span class="hljs-string">&quot;memory4&quot;</span>;<br>    result = userService.user<span class="hljs-constructor">Register(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Assertions</span>.</span></span><span class="hljs-keyword">assert</span><span class="hljs-constructor">True(<span class="hljs-params">result</span> &gt; 0)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>currentUser新增planetCode</li></ul><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">type CurrentUser = &#123;<br>  <span class="hljs-attribute">id?</span>: number;<br>  <span class="hljs-attribute">userAccount?</span>: string;<br>  <span class="hljs-attribute">username?</span>: string;<br>  <span class="hljs-attribute">avatarUrl?</span>: string;<br>  <span class="hljs-attribute">gender?</span>: string;<br>  <span class="hljs-attribute">phone?</span>: string;<br>  <span class="hljs-attribute">email?</span>: string;<br>  <span class="hljs-attribute">createTime?</span>: Date;<br>  <span class="hljs-attribute">userStatus?</span>: string;<br>  <span class="hljs-attribute">userRole?</span>: number;<br>  <span class="hljs-attribute">planetCode?</span>: string;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>管理页用户信息新增planetCode</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;<br>  <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;星球编号&#x27;</span>,<br>  <span class="hljs-attr">dataIndex:</span> <span class="hljs-string">&#x27;planetCode&#x27;</span>,<br>  <span class="hljs-attr">copyable:</span> <span class="hljs-literal">true</span>,<br>&#125;<span class="hljs-string">,</span><br></code></pre></td></tr></table></figure><h4 id="新增星球编号注册必填项完成-管理页用户信息正常显示"><a href="#新增星球编号注册必填项完成-管理页用户信息正常显示" class="headerlink" title="新增星球编号注册必填项完成, 管理页用户信息正常显示"></a>新增星球编号注册必填项完成, 管理页用户信息正常显示</h4><h2 id="返回通用对象"><a href="#返回通用对象" class="headerlink" title="返回通用对象"></a>返回通用对象</h2><ul><li><h5 id="自定义通用返回对象-BaseResponse"><a href="#自定义通用返回对象-BaseResponse" class="headerlink" title="自定义通用返回对象 - BaseResponse"></a>自定义通用返回对象 - BaseResponse</h5></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 状态码</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br>  <span class="hljs-comment">// 数据</span><br>  <span class="hljs-keyword">private</span> T data;<br>  <span class="hljs-comment">// 信息</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> message;<br>  <span class="hljs-comment">// 描述</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> description;<br></code></pre></td></tr></table></figure><ul><li><h5 id="通用返回对象多种构造器"><a href="#通用返回对象多种构造器" class="headerlink" title="通用返回对象多种构造器"></a>通用返回对象多种构造器</h5></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> BaseResponse(int code, T <span class="hljs-keyword">data</span>, String message, String description) &#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span> = <span class="hljs-keyword">data</span>;<br>        <span class="hljs-keyword">this</span>.message = message;<br>        <span class="hljs-keyword">this</span>.description = description;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> BaseResponse(int code, String message, String description) &#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span> = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">this</span>.message = message;<br>        <span class="hljs-keyword">this</span>.description = description;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> BaseResponse(ErrorCode errorCode) &#123;<br>        <span class="hljs-keyword">this</span>.code = errorCode.getCode();<br>        <span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span> = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">this</span>.message = errorCode.getMessage();<br>        <span class="hljs-keyword">this</span>.description = errorCode.getDescription();<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="通用返回对象添加getter-setter方法"><a href="#通用返回对象添加getter-setter方法" class="headerlink" title="通用返回对象添加getter, setter方法"></a>通用返回对象添加getter, setter方法</h5></li><li><h5 id="这一步一定不要忘记啊-我就因为没加这俩方法-测试登录注册就报406错误"><a href="#这一步一定不要忘记啊-我就因为没加这俩方法-测试登录注册就报406错误" class="headerlink" title="这一步一定不要忘记啊, 我就因为没加这俩方法, 测试登录注册就报406错误"></a>这一步一定不要忘记啊, 我就因为没加这俩方法, 测试登录注册就报406错误</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> int <span class="hljs-title function_">getCode</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getMessage</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getDescription</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setCode</span>(<span class="hljs-params">int code</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">code</span> = code;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setData</span>(<span class="hljs-params">T data</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = data;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setMessage</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> message</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = message;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setDescription</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> description</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">description</span> = description;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="返回成功的话-就是返回成功状态-即返回状态码-数据-“ok”-message-“”-description"><a href="#返回成功的话-就是返回成功状态-即返回状态码-数据-“ok”-message-“”-description" class="headerlink" title="返回成功的话, 就是返回成功状态, 即返回状态码 + 数据 + “ok”(message) + “”(description)"></a>返回成功的话, 就是返回成功状态, 即返回状态码 + 数据 + “ok”(message) + “”(description)</h4><ul><li><h5 id="封装返回成功状态下通用对象的方法"><a href="#封装返回成功状态下通用对象的方法" class="headerlink" title="封装返回成功状态下通用对象的方法"></a>封装返回成功状态下通用对象的方法</h5></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ResultUtils</span> &#123;<br>    <span class="hljs-comment">// 请求成功</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-title">BaseResponse</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-title">success</span>(<span class="hljs-params">T data</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BaseResponse&lt;&gt;(<span class="hljs-number">0</span>, data, <span class="hljs-string">&quot;ok&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="返回失败的话-就是返回失败状态-即返回状态码-null-data-message-description"><a href="#返回失败的话-就是返回失败状态-即返回状态码-null-data-message-description" class="headerlink" title="返回失败的话, 就是返回失败状态, 即返回状态码 + null(data) + message + description"></a>返回失败的话, 就是返回失败状态, 即返回状态码 + null(data) + message + description</h4><h4 id="实现思路-这里我们打算封装自定义异常类和全局异常处理器-当业务中出现错误-不会返回失败结果-而是抛出相应的异常-并由全局异常处理器捕获-再由全局异常处理器来返回对应失败状态"><a href="#实现思路-这里我们打算封装自定义异常类和全局异常处理器-当业务中出现错误-不会返回失败结果-而是抛出相应的异常-并由全局异常处理器捕获-再由全局异常处理器来返回对应失败状态" class="headerlink" title="实现思路: 这里我们打算封装自定义异常类和全局异常处理器, 当业务中出现错误, 不会返回失败结果, 而是抛出相应的异常, 并由全局异常处理器捕获, 再由全局异常处理器来返回对应失败状态"></a>实现思路: 这里我们打算封装自定义异常类和全局异常处理器, 当业务中出现错误, 不会返回失败结果, 而是抛出相应的异常, 并由全局异常处理器捕获, 再由全局异常处理器来返回对应失败状态</h4><h2 id="封装自定义异常BusinessException"><a href="#封装自定义异常BusinessException" class="headerlink" title="封装自定义异常BusinessException"></a>封装自定义异常BusinessException</h2><h5 id="自定义异常成员属性"><a href="#自定义异常成员属性" class="headerlink" title="自定义异常成员属性"></a>自定义异常成员属性</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 状态码</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> code;<br><span class="hljs-comment">// 异常描述</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> description;<br></code></pre></td></tr></table></figure><h5 id="自定义异常多种构造器"><a href="#自定义异常多种构造器" class="headerlink" title="自定义异常多种构造器"></a>自定义异常多种构造器</h5><ul><li><h5 id="局部业务代码下自定义的异常信息"><a href="#局部业务代码下自定义的异常信息" class="headerlink" title="局部业务代码下自定义的异常信息"></a>局部业务代码下自定义的异常信息</h5></li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 局部业务代码下自定义的异常信息</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message     异常信息</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> code        异常状态码</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> description 异常描述</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BusinessException</span><span class="hljs-params">(String message, <span class="hljs-keyword">int</span> code, String description)</span> </span>&#123;<br>      <span class="hljs-keyword">super</span>(message);<br>      <span class="hljs-keyword">this</span>.code = code;<br>      <span class="hljs-keyword">this</span>.description = description;<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="common-ErrorCode下封装的全局自定义异常信息"><a href="#common-ErrorCode下封装的全局自定义异常信息" class="headerlink" title="common/ErrorCode下封装的全局自定义异常信息"></a>common/ErrorCode下封装的全局自定义异常信息</h5></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * common/ErrorCode下封装的全局自定义异常信息</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> errorCode 全局自定义异常</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> BusinessException(ErrorCode errorCode) &#123;<br>       <span class="hljs-keyword">super</span>(errorCode.getMessage());<br>       <span class="hljs-keyword">this</span>.code = errorCode.getCode();<br>       <span class="hljs-keyword">this</span>.description = errorCode.getDescription();<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="补充-封装全局自定义异常信息-ErrorCode-枚举类"><a href="#补充-封装全局自定义异常信息-ErrorCode-枚举类" class="headerlink" title="补充: 封装全局自定义异常信息 ErrorCode (枚举类)"></a>补充: 封装全局自定义异常信息 ErrorCode (枚举类)</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> enum ErrorCode &#123;<br><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="枚举值-需持续完善更新"><a href="#枚举值-需持续完善更新" class="headerlink" title="枚举值 (需持续完善更新)"></a>枚举值 (需持续完善更新)</h5></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">PARMS_ERROR</span>(<span class="hljs-number">40000</span>, <span class="hljs-string">&quot;请求参数错误&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>  <span class="hljs-attribute">NULL_ERROR</span>(<span class="hljs-number">40001</span>, <span class="hljs-string">&quot;请求数据为空&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>  <span class="hljs-attribute">UPDATE_ERROR</span>(<span class="hljs-number">40002</span>, <span class="hljs-string">&quot;操作数据库失败&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>  <span class="hljs-attribute">NOT_LOGIN</span>(<span class="hljs-number">40101</span>, <span class="hljs-string">&quot;未注册&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>  <span class="hljs-attribute">NOT_REGISTER</span>(<span class="hljs-number">40102</span>, <span class="hljs-string">&quot;未登录&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>  <span class="hljs-attribute">NO_AUTH</span>(<span class="hljs-number">40103</span>, <span class="hljs-string">&quot;无权限&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>  <span class="hljs-attribute">SYSTEM_ERROR</span>(<span class="hljs-number">10000</span>, <span class="hljs-string">&quot;系统内部异常&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><h5 id="成员属性"><a href="#成员属性" class="headerlink" title="成员属性"></a>成员属性</h5></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 状态码</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> code;<br>   <span class="hljs-comment">// 状态码信息</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> message;<br>   <span class="hljs-comment">// 状态码描述</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> description;<br></code></pre></td></tr></table></figure><ul><li><h5 id="构造器和-getter-方法"><a href="#构造器和-getter-方法" class="headerlink" title="构造器和 getter 方法"></a>构造器和 getter 方法</h5></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">ErrorCode</span>(int code, <span class="hljs-title class_">String</span> message, <span class="hljs-title class_">String</span> description) &#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">code</span> = code;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = message;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">description</span> = description;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> int <span class="hljs-title function_">getCode</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">return</span> code;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getMessage</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">return</span> message;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getDescription</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">return</span> description;<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="自定义异常-getter-方法"><a href="#自定义异常-getter-方法" class="headerlink" title="自定义异常 getter 方法"></a>自定义异常 getter 方法</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getCode</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br>    <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDescription</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;    <br></code></pre></td></tr></table></figure><h2 id="封装全局异常处理器"><a href="#封装全局异常处理器" class="headerlink" title="封装全局异常处理器"></a>封装全局异常处理器</h2><h5 id=""><a href="#" class="headerlink" title=""></a><!--熟悉全局异常处理器的写法和实现过程, 了解其实现原理--></h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RestControllerAdvice</span><br><span class="hljs-variable">@Slf4j</span><br>public class GlobalExceptionHandler &#123;<br>....................<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="捕获局部业务代码下的自定义异常信息"><a href="#捕获局部业务代码下的自定义异常信息" class="headerlink" title="捕获局部业务代码下的自定义异常信息"></a>捕获局部业务代码下的自定义异常信息</h5></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 捕获局部业务代码下的自定义异常信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param e 自定义异常</span><br><span class="hljs-comment">     * @return 封装返回失败状态</span><br><span class="hljs-comment">     */</span><br>    @<span class="hljs-constructor">ExceptionHandler(BusinessException.<span class="hljs-params">class</span>)</span><br>    public BaseResponse business<span class="hljs-constructor">ExceptionHandler(BusinessException <span class="hljs-params">e</span>)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;businessException: &quot;</span> + e.get<span class="hljs-constructor">Message()</span>, e);<br>        log.info(<span class="hljs-string">&quot;&quot;</span> + e.get<span class="hljs-constructor">Code()</span>);<br>        log.info(e.get<span class="hljs-constructor">Message()</span>);<br>        log.info(e.get<span class="hljs-constructor">Description()</span>);<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResultUtils</span>.</span></span>error(e.get<span class="hljs-constructor">Code()</span>, e.get<span class="hljs-constructor">Message()</span>, e.get<span class="hljs-constructor">Description()</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="捕获common-ErrorCode下封装的全局自定义异常信息"><a href="#捕获common-ErrorCode下封装的全局自定义异常信息" class="headerlink" title="捕获common/ErrorCode下封装的全局自定义异常信息"></a>捕获common/ErrorCode下封装的全局自定义异常信息</h5></li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 捕获common/ErrorCode下封装的全局自定义异常信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 自定义异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 封装返回失败状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//捕获自定义的异常2</span><br>    <span class="hljs-meta">@ExceptionHandler</span>(RuntimeException.class)<br>    <span class="hljs-keyword">public</span> <span class="hljs-function">BaseResponse <span class="hljs-title">runtimeExceptionHandler</span><span class="hljs-params">(BusinessException e)</span> </span>&#123;<br>        log.<span class="hljs-keyword">error</span>(<span class="hljs-string">&quot;runtimeException&quot;</span>, e);<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> ResultUtils.<span class="hljs-title">error</span><span class="hljs-params">(ErrorCode.SYSTEM_ERROR)</span></span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="修改后端返回给前端的数据-全部更新为直接返回通用对象-成功状态-或抛出业务异常再由全局异常处理器返回通用对象-失败状态"><a href="#修改后端返回给前端的数据-全部更新为直接返回通用对象-成功状态-或抛出业务异常再由全局异常处理器返回通用对象-失败状态" class="headerlink" title="修改后端返回给前端的数据, 全部更新为直接返回通用对象(成功状态)或抛出业务异常再由全局异常处理器返回通用对象(失败状态)"></a>修改后端返回给前端的数据, 全部更新为直接返回通用对象(成功状态)或抛出业务异常再由全局异常处理器返回通用对象(失败状态)</h2><ul><li><h5 id="成功状态-controller层"><a href="#成功状态-controller层" class="headerlink" title="成功状态 (controller层)"></a>成功状态 (controller层)</h5></li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户注册</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param userRegisterRequest 注册信息封装类</span><br><span class="hljs-comment">     * @return id</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;Long&gt; userRegister(@RequestBody UserRegisterRequest userRegisterRequest) &#123;<br>    <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>    <span class="hljs-keyword">return</span> ResultUtils.success(userRegister);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户登录</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param userLoginRequest 登录信息封装</span><br><span class="hljs-comment">     * @param request          request</span><br><span class="hljs-comment">     * @return User</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-variable">@PostMapping</span>(<span class="hljs-string">&quot;/login&quot;</span>)<br>    public BaseResponse&lt;User&gt; <span class="hljs-built_in">userLogin</span>(<span class="hljs-variable">@RequestBody</span> UserLoginRequest userLoginRequest, HttpServletRequest request) &#123;<br>        .........................<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">ResultUtils</span><span class="hljs-selector-class">.success</span>(userLogin);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户登录</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param request request</span><br><span class="hljs-comment">     * @return int</span><br><span class="hljs-comment">     */</span><br>    @PostMapping(<span class="hljs-string">&quot;/logout&quot;</span>)<br>    <span class="hljs-keyword">public</span> BaseResponse&lt;<span class="hljs-built_in">String</span>&gt; userLogout(HttpServletRequest request) &#123;<br>        <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br>        <span class="hljs-keyword">return</span> ResultUtils.success(userLogout);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取当前用户登录态</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param request request</span><br><span class="hljs-comment">     * @return 当前用户信息</span><br><span class="hljs-comment">     */</span><br>    @GetMapping(<span class="hljs-string">&quot;/currentUser&quot;</span>)<br>    <span class="hljs-keyword">public</span> BaseResponse&lt;User&gt; getCurrentUser(HttpServletRequest request) &#123;<br>        <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>        <span class="hljs-keyword">return</span> ResultUtils.success(user);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询用户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param username 用户名</span><br><span class="hljs-comment">     * @return 查到的用户</span><br><span class="hljs-comment">     */</span><br>    @GetMapping(<span class="hljs-string">&quot;/search&quot;</span>)<br>    <span class="hljs-keyword">public</span> BaseResponse&lt;<span class="hljs-built_in">List</span>&lt;User&gt;&gt; userSearch(<span class="hljs-built_in">String</span> username, HttpServletRequest request) &#123;<br>        <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br>        <span class="hljs-keyword">return</span> ResultUtils.success(users);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除用户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param id 用户id</span><br><span class="hljs-comment">     * @return true/false</span><br><span class="hljs-comment">     */</span><br>    @DeleteMapping(<span class="hljs-string">&quot;/delete&quot;</span>)<br>    <span class="hljs-keyword">public</span> BaseResponse&lt;<span class="hljs-built_in">Boolean</span>&gt; userDelete(Long id, HttpServletRequest request) &#123;<br>        <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><br>        <span class="hljs-keyword">return</span> ResultUtils.success(removeById);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>)<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">BusinessException(PARMS_ERROR)</span>;<br></code></pre></td></tr></table></figure><h5 id="失败状态"><a href="#失败状态" class="headerlink" title="失败状态"></a>失败状态</h5><ul><li><h5 id="controller层-register-login-logout-currentUser-search-delete-下的controller参数校验"><a href="#controller层-register-login-logout-currentUser-search-delete-下的controller参数校验" class="headerlink" title="controller层    register    login    logout    currentUser    search    delete 下的controller参数校验"></a>controller层    register    login    logout    currentUser    search    delete 下的controller参数校验</h5></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>, <span class="hljs-params">planetCode</span>)</span>)<br>       throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">BusinessException(PARMS_ERROR)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>)</span>)<br>        throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">BusinessException(PARMS_ERROR)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">if</span> (request == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(PARMS_ERROR);<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">if</span> (currentUser == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(PARMS_ERROR);<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> (!is<span class="hljs-constructor">Admin(<span class="hljs-params">request</span>)</span>)<br>         throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">BusinessException(NO_AUTH)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">if</span> (!isAdmin(request))<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(NO_AUTH);<br><span class="hljs-keyword">if</span> (id &lt;= <span class="hljs-number">0</span>)<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(PARMS_ERROR);<br></code></pre></td></tr></table></figure><ul><li><h5 id="service层-register-下的参数校验"><a href="#service层-register-下的参数校验" class="headerlink" title="service层    register 下的参数校验"></a>service层    register 下的参数校验</h5></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 1.1.账户, 密码, 二次密码不能为空</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>, <span class="hljs-params">checkPassword</span>)</span>)<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">BusinessException(PARMS_ERROR)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 1.2.账户不小于4位</span><br>        <span class="hljs-keyword">if</span> (userAccount.length() &lt; <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(<span class="hljs-string">&quot;账户不符合要求&quot;</span>, <span class="hljs-number">50000</span>, <span class="hljs-string">&quot;账户小于4位&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 1.3.账户不包含特殊字符</span><br>        <span class="hljs-type">String</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.*[<span class="hljs-subst">\\</span>s`~!@#$%^&amp;*()+=|&#123;&#125;&#x27;:;&#x27;,<span class="hljs-subst">\\</span>[<span class="hljs-subst">\\</span>].&lt;&gt;/?~！@#￥%……&amp;*（）——+|&#123;&#125;【】‘；：”“’。，、？<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>]+.*&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-type">Pattern</span>.matches(pattern, userAccount))<br>            <span class="hljs-keyword">throw</span> new <span class="hljs-type">BusinessException</span>(<span class="hljs-string">&quot;账户不符合要求&quot;</span>, <span class="hljs-number">50001</span>, <span class="hljs-string">&quot;账户包含特殊字符&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 1.4.用户密码不小于8位</span><br>        <span class="hljs-keyword">if</span> (userPassword.length() &lt; <span class="hljs-number">8</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(<span class="hljs-string">&quot;密码不符合要求&quot;</span>, <span class="hljs-number">60000</span>, <span class="hljs-string">&quot;用户密码小于8位&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 1.5.二次密码与密码相同</span><br>        <span class="hljs-keyword">if</span> (!userPassword.<span class="hljs-keyword">equals</span>(checkPassword))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BusinessException(<span class="hljs-string">&quot;二次密码不符合要求&quot;</span>, <span class="hljs-number">60001</span>, <span class="hljs-string">&quot;二次密码与密码不相同&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 1.6.星球编号不能超过5位</span><br>        <span class="hljs-keyword">if</span> (planetCode.length() &gt; <span class="hljs-number">5</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(<span class="hljs-string">&quot;星球编号不符合要求&quot;</span>, <span class="hljs-number">60002</span>, <span class="hljs-string">&quot;星球编号超过5位&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl">// <span class="hljs-number">1.7</span>.账户不能重复<br>        QueryWrapper&lt;User&gt; ua_lqw = new QueryWrapper&lt;&gt;(); <span class="hljs-regexp">//</span> LambdaQueryWrapper&lt;User&gt; userLambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();<br>        ua_lqw.e<span class="hljs-string">q(&quot;user_account&quot;, userAccount)</span>; <span class="hljs-regexp">//</span> userLambdaQueryWrapper.e<span class="hljs-string">q(User::getUserAccount, userAccount)</span>;<br>        Long ua_count = userMapper.selectCount(ua_lqw);   <span class="hljs-regexp">//</span> long count = this.count(lqw);<br>        <span class="hljs-keyword">if</span> (ua_count &gt; <span class="hljs-number">0</span>)<br>            throw new BusinessException(<span class="hljs-string">&quot;账户不符合要求&quot;</span>, <span class="hljs-number">50002</span>, <span class="hljs-string">&quot;账户重复&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 1.8.星球编号不能重复</span><br>        QueryWrapper&lt;User&gt; pc_lqw = <span class="hljs-keyword">new</span> <span class="hljs-type">QueryWrapper</span>&lt;&gt;();<br>        pc_lqw.eq(<span class="hljs-string">&quot;planet_code&quot;</span>, planetCode);<br>        Long pc_count = userMapper.selectCount(pc_lqw);<br>        <span class="hljs-keyword">if</span> (pc_count &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(<span class="hljs-string">&quot;星球编号不符合要求&quot;</span>, <span class="hljs-number">60003</span>, <span class="hljs-string">&quot;星球编号重复&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><h5 id="service层-login下的参数校验"><a href="#service层-login下的参数校验" class="headerlink" title="service层    login下的参数校验"></a>service层    login下的参数校验</h5></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 1.1.账户, 密码不能为空</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">AnyBlank(<span class="hljs-params">userAccount</span>, <span class="hljs-params">userPassword</span>)</span>)<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">BusinessException(PARMS_ERROR)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 1.2.账户不小于4位</span><br>        <span class="hljs-keyword">if</span> (userAccount.length() &lt; <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(<span class="hljs-string">&quot;账户不符合要求&quot;</span>, <span class="hljs-number">50000</span>, <span class="hljs-string">&quot;账户小于4位&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 1.3.用户密码不小于8位</span><br>        <span class="hljs-keyword">if</span> (userPassword.length() &lt; <span class="hljs-number">8</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BusinessException</span>(<span class="hljs-string">&quot;密码不符合要求&quot;</span>, <span class="hljs-number">60000</span>, <span class="hljs-string">&quot;用户密码小于8位&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 1.4.账户不包含特殊字符</span><br>        <span class="hljs-type">String</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.*[<span class="hljs-subst">\\</span>s`~!@#$%^&amp;*()+=|&#123;&#125;&#x27;:;&#x27;,<span class="hljs-subst">\\</span>[<span class="hljs-subst">\\</span>].&lt;&gt;/?~！@#￥%……&amp;*（）——+|&#123;&#125;【】‘；：”“’。，、？<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>]+.*&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-type">Pattern</span>.matches(pattern, userAccount))<br>            <span class="hljs-keyword">throw</span> new <span class="hljs-type">BusinessException</span>(<span class="hljs-string">&quot;账户不符合要求&quot;</span>, <span class="hljs-number">50001</span>, <span class="hljs-string">&quot;账户包含特殊字符&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><h5 id="service层-logout下的返回信息"><a href="#service层-logout下的返回信息" class="headerlink" title="service层    logout下的返回信息"></a>service层    logout下的返回信息</h5></li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">request.getSession().removeAttribute(USER_LOGIN_STATE)<span class="hljs-comment">;</span><br>        return <span class="hljs-string">&quot;注销成功&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h5 id="自定义异常并由全局异常处理器成功处理-功能基本完成"><a href="#自定义异常并由全局异常处理器成功处理-功能基本完成" class="headerlink" title="自定义异常并由全局异常处理器成功处理, 功能基本完成"></a>自定义异常并由全局异常处理器成功处理, 功能基本完成</h5><h2 id="前端适配后端的通用返回对象"><a href="#前端适配后端的通用返回对象" class="headerlink" title="前端适配后端的通用返回对象"></a>前端适配后端的通用返回对象</h2><ul><li><h5 id="前端定义通用返回对象-services-ant-design-pro-typings-d-ts"><a href="#前端定义通用返回对象-services-ant-design-pro-typings-d-ts" class="headerlink" title="前端定义通用返回对象(services/ant-design-pro/typings.d.ts)"></a>前端定义通用返回对象(services/ant-design-pro/typings.d.ts)</h5></li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通用返回类</span><br><span class="hljs-comment">   */</span><br>  type BaseResponse<span class="hljs-params">&lt;T&gt;</span> = <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">    code:</span> number,<br><span class="hljs-symbol">    data:</span> T,<br><span class="hljs-symbol">    message:</span> string,<br><span class="hljs-symbol">    description:</span> string<br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="封装各接口响应类型-services-ant-design-pro-api-ts"><a href="#封装各接口响应类型-services-ant-design-pro-api-ts" class="headerlink" title="封装各接口响应类型(services/ant-design-pro/api.ts)"></a>封装各接口响应类型(services/ant-design-pro/api.ts)</h5></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">return</span> request&lt;API.BaseResponse&lt;API.CurrentUser&gt;&gt;(<span class="hljs-string">&#x27;/api/user/currentUser&#x27;</span>, &#123;<br>  method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  ...(<span class="hljs-keyword">options</span> || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">return</span> request&lt;API.BaseResponse&lt;API.CurrentUser&gt;&gt;(<span class="hljs-string">&#x27;/api/user/logout&#x27;</span>, &#123;<br>  method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  ...(<span class="hljs-keyword">options</span> || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">return</span> request&lt;API.BaseResponse&lt;API.CurrentUser&gt;&gt;(<span class="hljs-string">&#x27;/api/user/login&#x27;</span>, &#123;<br>  method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  headers: &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-keyword">data</span>: body,<br>  ...(options || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">return</span> request&lt;API.BaseResponse&lt;API.CurrentUser&gt;&gt;(<span class="hljs-string">&#x27;/api/user/register&#x27;</span>, &#123;<br>  method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  headers: &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-keyword">data</span>: body,<br>  ...(options || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">return</span> request&lt;API.BaseResponse&lt;API.CurrentUser&gt;&gt;(<span class="hljs-string">&#x27;/api/user/search&#x27;</span>, &#123;<br>  method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  ...(<span class="hljs-keyword">options</span> || &#123;&#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><h5 id="这边还要记得修改两个地方"><a href="#这边还要记得修改两个地方" class="headerlink" title="这边还要记得修改两个地方:"></a>这边还要记得修改两个地方:</h5></li></ul><h6 id="修改管理员权限的校验-解决了无法正确访问到管理员页面的问题"><a href="#修改管理员权限的校验-解决了无法正确访问到管理员页面的问题" class="headerlink" title="修改管理员权限的校验 - 解决了无法正确访问到管理员页面的问题"></a>修改管理员权限的校验 - 解决了无法正确访问到管理员页面的问题</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">access</span>(<span class="hljs-params">initialState: &#123; baseResponse?: API.BaseResponse&lt;API.CurrentUser&gt; &#125; | <span class="hljs-literal">undefined</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; baseResponse &#125; = initialState ?? &#123;&#125;;<br>  <span class="hljs-comment">// 权限校验</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-comment">// 校验管理员权限</span><br>    <span class="hljs-attr">canAdmin</span>: baseResponse &amp;&amp; baseResponse.<span class="hljs-property">data</span>.<span class="hljs-property">userRole</span> === <span class="hljs-number">1</span>,<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="修改查询在线用户信息-解决了在线用户信息页面无法正常显示的问题"><a href="#修改查询在线用户信息-解决了在线用户信息页面无法正常显示的问题" class="headerlink" title="修改查询在线用户信息 - 解决了在线用户信息页面无法正常显示的问题"></a>修改查询在线用户信息 - 解决了在线用户信息页面无法正常显示的问题</h6><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">request=&#123;async (params = &#123;&#125;, <span class="hljs-built_in">sort</span>, <span class="hljs-built_in">filter</span>) =&gt; &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sort</span>, <span class="hljs-built_in">filter</span>);<br>  <span class="hljs-comment">// 返回userList</span><br>  const baseResponse = await searchUsers();<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">data</span>: baseResponse.data,<br>  &#125;<br>&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="封装全局响应拦截器"><a href="#封装全局响应拦截器" class="headerlink" title="封装全局响应拦截器"></a>封装全局响应拦截器</h2>]]></content>
    
    
    <categories>
      
      <category>project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
      <tag>开发经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基础</title>
    <link href="/blog/2023/03/17/Git%E5%9F%BA%E7%A1%80/"/>
    <url>/blog/2023/03/17/Git%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-是一个分布式版本控制工具，提供代码托管服务"><a href="#Git-是一个分布式版本控制工具，提供代码托管服务" class="headerlink" title="Git 是一个分布式版本控制工具，提供代码托管服务"></a>Git 是一个分布式版本控制工具，提供代码托管服务</h1><h2 id="1、基础知识：工作区、版本库、暂存区"><a href="#1、基础知识：工作区、版本库、暂存区" class="headerlink" title="1、基础知识：工作区、版本库、暂存区"></a>1、基础知识：工作区、版本库、暂存区</h2><h5 id="（1）工作区：包含-git-隐藏文件夹的目录，也称为工作目录，用于存放开发的代码"><a href="#（1）工作区：包含-git-隐藏文件夹的目录，也称为工作目录，用于存放开发的代码" class="headerlink" title="（1）工作区：包含.git 隐藏文件夹的目录，也称为工作目录，用于存放开发的代码"></a>（1）工作区：包含.git 隐藏文件夹的目录，也称为工作目录，用于存放开发的代码</h5><h5 id="（2）版本库：-git-隐藏文件夹，储存配置信息、日志信息和文件版本信息等"><a href="#（2）版本库：-git-隐藏文件夹，储存配置信息、日志信息和文件版本信息等" class="headerlink" title="（2）版本库：.git 隐藏文件夹，储存配置信息、日志信息和文件版本信息等"></a>（2）版本库：.git 隐藏文件夹，储存配置信息、日志信息和文件版本信息等</h5><h5 id="（3）暂存区：-git-隐藏文件夹中的一个-index-文件，也可叫做-stage，用来临时保存修改文件"><a href="#（3）暂存区：-git-隐藏文件夹中的一个-index-文件，也可叫做-stage，用来临时保存修改文件" class="headerlink" title="（3）暂存区：.git 隐藏文件夹中的一个 index 文件，也可叫做 stage，用来临时保存修改文件"></a>（3）暂存区：.git 隐藏文件夹中的一个 index 文件，也可叫做 stage，用来临时保存修改文件</h5><p>####工作区中文件的状态</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">（1）untracked 未跟踪（未被纳入版本控制）<br>（2）tracked 已跟踪（被纳入版本控制）<br>1）Unmodified 未修改状态<br>2）Modified 已修改状态<br>3）Staged 已暂存状态<br></code></pre></td></tr></table></figure><h2 id="2、常用命令："><a href="#2、常用命令：" class="headerlink" title="2、常用命令："></a>2、常用命令：</h2><h5 id="（1）全局设置："><a href="#（1）全局设置：" class="headerlink" title="（1）全局设置："></a>（1）全局设置：</h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.name 【用户名】</span><br>git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.email 【用户邮箱】</span><br></code></pre></td></tr></table></figure><h5 id="（2）获取-Git-仓库："><a href="#（2）获取-Git-仓库：" class="headerlink" title="（2）获取 Git 仓库："></a>（2）获取 Git 仓库：</h5><p> 在本地初始化一个仓库：git init<br>​ 从远处仓库克隆：git clone 【仓库地址(URL)】</p><h5 id="（3）本地仓库-工作区-常用命令："><a href="#（3）本地仓库-工作区-常用命令：" class="headerlink" title="（3）本地仓库(工作区)常用命令："></a>（3）本地仓库(工作区)常用命令：</h5><ul><li>查看工作区内的文件状态（是否纳入版本控制？已纳入的是否修改？修改后的是否暂存？）</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure><ul><li>将文件的修改加入暂存区</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> 【文件名】<br></code></pre></td></tr></table></figure><ul><li>将暂存区的文件取消暂存或者切换到指定版本 2</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">reset</span>【版本号】<br></code></pre></td></tr></table></figure><ul><li>将暂存区的文件提交修改到版本库</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m 【修改信息】【文件名】<br></code></pre></td></tr></table></figure><ul><li>查看日志，查看提交记录，方便回溯到指定版本</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><h5 id="（4）远程仓库-工作区-常用命令："><a href="#（4）远程仓库-工作区-常用命令：" class="headerlink" title="（4）远程仓库(工作区)常用命令："></a>（4）远程仓库(工作区)常用命令：</h5><ul><li>查看远程仓库：查看仓库名、仓库地址(URL)</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></figure><ul><li>将本地仓库与远程仓库连接起来</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git remote <span class="hljs-built_in">add</span> 【仓库名】【仓库地址】<br>git remote <span class="hljs-built_in">add</span> origin【仓库地址(URL)】<br></code></pre></td></tr></table></figure><ul><li>从远程仓库克隆</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">【仓库地址(URL</span>)】<br></code></pre></td></tr></table></figure><ul><li>从远程仓库拉取</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git pull 【仓库名】【仓库分支】<br>git pull origin <span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure><ul><li>将工作区内的文件推送/上传到远程仓库的分支上（文件一定是成功提交到版本库中的，才能推送至远程仓库）</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span>【仓库名】【仓库分支】<br>git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><h5 id="（5）分支操作"><a href="#（5）分支操作" class="headerlink" title="（5）分支操作"></a>（5）分支操作</h5><ul><li>列出所有本地分支</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch</span><br></code></pre></td></tr></table></figure><ul><li>列出所有远程分支</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch -r</span><br></code></pre></td></tr></table></figure><ul><li>列出所有本地分支和远程分支</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><ul><li>在本地创建分支</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">branch </span>【分支名】<br></code></pre></td></tr></table></figure><ul><li>切换本地分支</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> checkout 【分支名】<br></code></pre></td></tr></table></figure><ul><li>将该本地分支推送至远程分支</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git <span class="hljs-built_in">push</span> 【仓库名】【分支名】<br></code></pre></td></tr></table></figure><ul><li>在该分支下，合并指定分支</li></ul><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> 【分支名】<br></code></pre></td></tr></table></figure><h5 id="（6）标签操作"><a href="#（6）标签操作" class="headerlink" title="（6）标签操作"></a>（6）标签操作</h5><ul><li>列出已有标签</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span><br></code></pre></td></tr></table></figure><ul><li>创建标签</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">【标签名】</span><br></code></pre></td></tr></table></figure><ul><li>将标签推送至远程仓库</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git <span class="hljs-built_in">push</span> 【仓库名】【标签名】<br></code></pre></td></tr></table></figure><ul><li>检出标签</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> 【分支名】【标签名】<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a><!--分支：开发隔离 ，标签：分支下的版本控制--></h3><h2 id="合并冲突问题"><a href="#合并冲突问题" class="headerlink" title="合并冲突问题"></a><strong><em>合并冲突问题</em></strong></h2><ul><li>如果执行推送时出现</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">! [rejected] master -&gt; master (fetch <span class="hljs-built_in">first</span>) <span class="hljs-built_in">error</span>: fail to <span class="hljs-built_in">push</span> <span class="hljs-built_in">some</span> refs<br></code></pre></td></tr></table></figure><ul><li>在执行推送前执行</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git pull <span class="hljs-comment">--rebase origin master</span><br></code></pre></td></tr></table></figure><ul><li><p>将 README.md 拉到本地以解决此问题</p></li><li><p>如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库中拉取文件的时候会报错</p></li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">（fatal：refusing <span class="hljs-built_in">to</span> <span class="hljs-built_in">merge</span> unrelated histories）<br></code></pre></td></tr></table></figure><ul><li>如此拉取：</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git pull origin <span class="hljs-keyword">master</span> <span class="hljs-title">--allow-unrelated-histories</span><br></code></pre></td></tr></table></figure><ul><li>以解决此问题</li></ul>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test2</title>
    <link href="/blog/2023/03/16/test2/"/>
    <url>/blog/2023/03/16/test2/</url>
    
    <content type="html"><![CDATA[<p>hhhhhhhh</p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试测试测试</title>
    <link href="/blog/2023/03/15/%E6%B5%8B%E8%AF%95%E6%B5%8B%E8%AF%95%E6%B5%8B%E8%AF%95/"/>
    <url>/blog/2023/03/15/%E6%B5%8B%E8%AF%95%E6%B5%8B%E8%AF%95%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blog/2023/03/07/hello-world/"/>
    <url>/blog/2023/03/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
